Library = {
    RainbowAccent = false,
    OutLineColor = Color3.fromRGB(50,50,50),
    AccentColor = Color3.fromRGB(40,50,200),
    MainColor = Color3.fromRGB(28,28,28),
    BackGroundColor = Color3.fromRGB(20,20,20),
    TextColor = Color3.fromRGB(255,255,255),
    Black = Color3.fromRGB(0,0,0),
    White = Color3.fromRGB(255,255,255),
    RainbowAccentColor
}

task.spawn(function()
    local Tick = tick()

    local Hue = 0


    while game:GetService('RunService').RenderStepped:Wait() do 
        if tick() - Tick >= (1/60)  then 
            
            Hue = Hue + (1/400) 

            if Hue >= 1 then 
                Hue = 0 
            end

            Library.RainbowAccentColor = Color3.fromHSV(Hue, 0.8, 1) 

            Tick = tick()
        end	
    end
end)

function GetDarkerColor(Color)
    local H, S, V = Color3.toHSV(Color)
    return Color3.fromHSV(H, S, V / 1.5)
end

function IsMouseOverFrame (Frame)

end

-- // Declarations \\ --
local UIS = game:GetService('UserInputService')
local Players = game:GetService('Players')
local Mouse = Players.LocalPlayer:GetMouse()
local RenderStepped = game:GetService('RunService').RenderStepped

-- // Settings \\ --



function Library:CreateMain (Info, KeyBind)
    wait(1)
    if game.CoreGui:FindFirstChild('ScreenGui') then
        game.CoreGui:FindFirstChild('ScreenGui'):Destroy()
    end

    -- // Instances \\ --

        ScreenGui = Instance.new("ScreenGui");
        TopBar = Instance.new("Frame");
        Holder = Instance.new("Frame");
        Outline = Instance.new("Frame");
        MainFrame = Instance.new("Frame");
        SecondaryFrame = Instance.new("Frame");
        Title = Instance.new("TextLabel");
        TabHolder = Instance.new("Frame");
        UIListLayout = Instance.new("UIListLayout");
        WelcomeFrame = Instance.new('Frame')
        WelcomeImage = Instance.new('ImageLabel')
        WelcomeText = Instance.new('TextLabel')
    
    ScreenGui.Parent = game.CoreGui
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    TopBar.Name = "TopBar"
    TopBar.Parent = ScreenGui
    TopBar.Active = true
    TopBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TopBar.BackgroundTransparency = 0.990
    TopBar.BorderSizePixel = 0
    TopBar.Position = UDim2.new(0.300000012, 0, 0.00999999978, 0)
    TopBar.Selectable = true
    TopBar.Size = UDim2.new(0, 528, 0, 24)
    
    Holder.Name = "Holder"
    Holder.Parent = TopBar
    Holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Holder.BackgroundTransparency = 0.990
    Holder.BorderSizePixel = 0
    Holder.Position = UDim2.new(0, -2, 0, -1)
    Holder.Size = UDim2.new(0, 528, 0, 578)
    
    Outline.Name = "Outline"
    Outline.Parent = Holder
    Outline.BackgroundColor3 = Library.Black
    Outline.BorderColor3 = Library.Black
    Outline.Position = UDim2.new(0, -2, 0, -1)
    Outline.Size = UDim2.new(0, 528, 0, 578)
    
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = Outline
    MainFrame.Active = true
    RenderStepped:connect(function()
        MainFrame.BackgroundColor3 = Library.MainColor
    end)
    task.spawn(function()
        while wait() do
            if Library.RainbowAccent == true then
                MainFrame.BorderColor3 = Library.RainbowAccentColor
            else 
                MainFrame.BorderColor3 = Library.AccentColor
            end
        end
    end)
    MainFrame.Position = UDim2.new(0, 1, 0, 1)
    MainFrame.Size = UDim2.new(0, 526, 0, 576)
    
    SecondaryFrame.Name = "SecondaryFrame"
    SecondaryFrame.Parent = MainFrame
    SecondaryFrame.Active = true
    RenderStepped:connect(function()
        SecondaryFrame.BackgroundColor3 = Library.BackGroundColor
        SecondaryFrame.BorderColor3 = Library.OutLineColor
    end)
    SecondaryFrame.Position = UDim2.new(0, 10, 0, 25)
    SecondaryFrame.Size = UDim2.new(0, 506, 0, 541)
    
    Title.Name = "Title"
    Title.Parent = MainFrame
    Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Title.BackgroundTransparency = 1.000
    Title.BorderSizePixel = 0
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.Size = UDim2.new(0, 281, 0, 24)
    Title.Font = Enum.Font.Code
    Title.Text = tostring(Info.Title)
    RenderStepped:connect(function()
        Title.TextColor3 = Library.TextColor
    end)
    Title.TextSize = 16.000
    Title.TextStrokeTransparency = 0.000
    Title.TextWrapped = true
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    TabHolder.Parent = SecondaryFrame
    TabHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabHolder.BackgroundTransparency = 1.000
    TabHolder.Position = UDim2.new(0, 11, 0, 11)
    TabHolder.Size = UDim2.new(0, 484, 0, 21)

    UIListLayout.Parent = TabHolder
    UIListLayout.FillDirection = Enum.FillDirection.Horizontal
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

    local InnerLibrary = {}

    local PageFolder = Instance.new('Folder')

    PageFolder.Name = 'PageFolder'
    PageFolder.Parent = SecondaryFrame

    WelcomeFrame.Parent = PageFolder
    WelcomeFrame.BackgroundColor3 = Library.MainColor
    WelcomeFrame.BorderColor3 = Library.OutLineColor
    WelcomeFrame.Position = UDim2.new(0, 11, 0, 32)
    WelcomeFrame.Size = UDim2.new(0, 484, 0, 498)
    WelcomeFrame.Visible = true

    WelcomeImage.Parent = WelcomeFrame
    WelcomeImage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    WelcomeImage.Position = UDim2.new(0, 30, 0, 30)
    WelcomeImage.Size = UDim2.new(0, 426, 0, 369)
    WelcomeImage.Image = "http://www.roblox.com/asset/?id=444167615"

    WelcomeText.Name = "WelcomeText"
    WelcomeText.Parent = WelcomeFrame
    WelcomeText.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    WelcomeText.BackgroundTransparency = 1.000
    WelcomeText.BorderColor3 = Color3.fromRGB(50, 50, 50)
    WelcomeText.BorderSizePixel = 0
    WelcomeText.Position = UDim2.new(0, 126, 0, 414)
    WelcomeText.Size = UDim2.new(0, 233, 0, 52)
    WelcomeText.Font = Enum.Font.Kalam
    WelcomeText.Text = Info.WelcomeText
    RenderStepped:connect(function()
        if WelcomeFrame.Visible then
            if Library.RainbowAccent then
                WelcomeText.TextColor3 = Library.RainbowAccentColor
            else
                WelcomeText.TextColor3 = Library.AccentColor
            end
        end
    end)
    WelcomeText.TextScaled = true
    WelcomeText.TextSize = 52.000
    WelcomeText.TextWrapped = true

    UIS.InputBegan:Connect(function(Input, gameProcessedEvent)
        if Input.KeyCode == KeyBind then
            TopBar.Active = not TopBar.Active
            TopBar.Visible = not TopBar.Visible
        end
    end)

    function InnerLibrary:CreateTab (Properties)
        assert(Properties.Name, 'Missing Tab Info')
       
        local Tab = Instance.new('TextButton')
        local Box = Instance.new('Frame')
        local Border = Instance.new('Frame')
        local PickerFolder = Instance.new('Folder')
        local DDFolder = Instance.new('Folder')

        Tab.Parent = TabHolder
        Tab.BackgroundColor3 = Library.BackGroundColor
        RenderStepped:connect(function()
            Tab.BorderColor3 = Library.OutLineColor
        end)
        Tab.Size = UDim2.new(0, 0, 0, 21)
        Tab.Text = ' '..tostring(Properties.Name)..' '
        RenderStepped:connect(function()
            Tab.TextColor3 = Library.TextColor
        end)
        Tab.Font = Enum.Font.Code
        Tab.TextStrokeTransparency = 0
        Tab.TextSize = 16
        Tab.AutomaticSize = Enum.AutomaticSize.XY
        Tab.AutoButtonColor = false

        Box.Parent = PageFolder
        RenderStepped:connect(function()
            Box.BackgroundColor3 = Library.MainColor
            Box.BorderColor3 = Library.OutLineColor
        end)
        Box.Position = UDim2.new(0, 11, 0, 32)
        Box.Size = UDim2.new(0, 484, 0, 498)
        Box.Visible = false

        Border.Name = "Border"
        Border.Parent = Box
        RenderStepped:connect(function()
            Border.BackgroundColor3 = Library.MainColor
        end)
        Border.BorderSizePixel = 0
        Border.Position = UDim2.new(0, ((Tab.AbsolutePosition.X - TopBar.AbsolutePosition.X) - 17.5) , 0, -1)  
        Border.Size = UDim2.new(0,Tab.AbsoluteSize.X , 0, 1)
        Border.Visible = true

        PickerFolder.Name = 'ColorPickers'
        PickerFolder.Parent = Box

        DDFolder.Parent = Box
        Tab.MouseButton1Click:Connect(function()
            for i,v in pairs (PageFolder:GetChildren()) do
                    v.Visible = false
            end
            for i,v in pairs (TabHolder:GetChildren()) do
                if v.ClassName == 'TextButton' then
                v.BackgroundColor3 = Library.BackGroundColor
                end
            end
            Tab.BackgroundColor3 = Library.MainColor
            Box.Visible = true
        end)

        RenderStepped:connect(function()
            if Box.Visible == true then
                Tab.BackgroundColor3 = Library.MainColor
            else
                Tab.BackgroundColor3 = Library.BackGroundColor
            end
        end)

        local RightGroupBox = Instance.new("Frame")
        local UIListLayout = Instance.new("UIListLayout")

        RightGroupBox.Name = "RightGroupBox"
        RightGroupBox.Parent = Box
        RightGroupBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        RightGroupBox.BackgroundTransparency = 1.000
        RightGroupBox.BorderColor3 = Color3.fromRGB(27, 42, 53)
        RightGroupBox.ClipsDescendants = true
        RightGroupBox.Position = UDim2.new(0, 247, 0, 10)
        RightGroupBox.Size = UDim2.new(0, 228, 0, 478)

        UIListLayout.Parent = RightGroupBox
        UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Padding = UDim.new(0, 11)
                

            local Boxes = {}

            function Boxes:AddRightBox (Info)

                local RightBox = Instance.new("Frame")
                local Led = Instance.new("Frame")
                local UIListLayout = Instance.new("UIListLayout")
                local BoxTitle = Instance.new('TextLabel')

                RightBox.Name = "RightBox"
                RightBox.Parent = RightGroupBox
                RenderStepped:connect(function()
                    RightBox.BackgroundColor3 = Library.BackGroundColor
                    RightBox.BorderColor3 = Library.OutLineColor
                end)
                RightBox.ClipsDescendants = false
                RightBox.BackgroundTransparency = 0.000
                RightBox.Visible = true
                RightBox.Size = UDim2.new(0, 226, 0, Info.CustomSize.Y.Offset)

                Led.Name = "Led"
                Led.Parent = RightBox
                task.spawn(function()
                    while wait() do
                        if Library.RainbowAccent == true then
                            Led.BackgroundColor3 = Library.RainbowAccentColor 
                        else
                        Led.BackgroundColor3 = Library.AccentColor
                        end
                    end
                end)
                Led.BorderSizePixel = 0
                Led.Position = UDim2.new(0, 0, 0, 0)
                Led.Size = UDim2.new(0, 226, 0, 2)
                Led.ZIndex = 6

                UIListLayout.Parent = RightBox
                UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout.Padding = UDim.new(0, 4)

                BoxTitle.Name = "BoxTitle"
                BoxTitle.Parent = RightBox
                BoxTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                BoxTitle.BackgroundTransparency = 1.000
                BoxTitle.Position = UDim2.new(0, 0, 0, 0)
                BoxTitle.Size = UDim2.new(0, 190, 0, 16)
                BoxTitle.Font = Enum.Font.Code
                BoxTitle.Text = " "..Info.BoxName
                RenderStepped:connect(function()
                    BoxTitle.TextColor3 = Library.TextColor
                end)
                BoxTitle.TextSize = 14.000
                BoxTitle.TextStrokeTransparency = 0.000
                BoxTitle.TextXAlignment = Enum.TextXAlignment.Left

                local BoxComps = {}

                function BoxComps:AddBasicToggle(Info, CallBack)
          
                    local ToggleFrame = Instance.new("Frame")
                    local OuterToggle = Instance.new("TextButton")
                    local InnerToggle = Instance.new("TextButton")
                    local ToggleName = Instance.new("TextLabel")
                    local ToggleBounds = Instance.new('TextButton')
                    local ToggleCCBounds = Instance.new('Frame') 
                    local UIListLayout = Instance.new("UIListLayout")

                    ToggleFrame.Name = "ToggleFrame"
                    ToggleFrame.Parent = RightBox
                    ToggleFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleFrame.BackgroundTransparency = 1.000
                    ToggleFrame.Position = UDim2.new(0, 0, 0, 0)
                    ToggleFrame.Size = UDim2.new(0, 226, 0, 15)
                    ToggleFrame.ZIndex = 1
                    
                    ToggleCCBounds.Name = "ToggleCCBounds"
                    ToggleCCBounds.Parent = ToggleFrame
                    ToggleCCBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleCCBounds.BackgroundTransparency = 1.000
                    ToggleCCBounds.Position = UDim2.new(0, 158, 0, 1)
                    ToggleCCBounds.Size = UDim2.new(0, 62, 0, 13)
                    ToggleCCBounds.ZIndex = 1

                    UIListLayout.Parent = ToggleCCBounds
                    UIListLayout.FillDirection = Enum.FillDirection.Horizontal
                    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
                    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
                    UIListLayout.Padding = UDim.new(0, 6)

                    OuterToggle.Name = "OuterToggle"
                    OuterToggle.Parent = ToggleFrame
                    OuterToggle.BackgroundColor3 = Library.BackGroundColor
                    OuterToggle.BorderColor3 = Library.Black
                    OuterToggle.BorderSizePixel = 1
                    OuterToggle.Position = UDim2.new(0, 5, 0, 0)
                    OuterToggle.Size = UDim2.new(0, 13, 0, 13)
                    OuterToggle.Font = Enum.Font.SourceSans
                    OuterToggle.Text = ""
                    OuterToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
                    OuterToggle.TextSize = 14.000

                    InnerToggle.Name = "InnerToggle"
                    InnerToggle.Parent = OuterToggle
                    InnerToggle.BackgroundColor3 = Library.MainColor
                    InnerToggle.BorderColor3 = Library.OutLineColor
                    InnerToggle.BorderSizePixel = 1
                    InnerToggle.BorderMode = Enum.BorderMode.Inset
                    InnerToggle.Size = UDim2.new(1, 0, 1, 0)
                    InnerToggle.Position = UDim2.new(0, 0, 0, 0)
                    InnerToggle.Font = Enum.Font.SourceSans
                    InnerToggle.Text = ""
                    InnerToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
                    InnerToggle.TextSize = 14.000
                    InnerToggle.AutoButtonColor = false

                    ToggleName.Name = "ToggleName"
                    ToggleName.Parent = ToggleFrame
                    ToggleName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    ToggleName.BackgroundTransparency = 1.000
                    ToggleName.Position = UDim2.new(0, 16, 0, -1)
                    ToggleName.Size = UDim2.new(0, 130, 0, 15)
                    ToggleName.Font = Enum.Font.Code
                    ToggleName.Text = " "..Info.Name
                    RenderStepped:connect(function()
                        ToggleName.TextColor3 = Library.TextColor
                    end)
                    ToggleName.TextSize = 14.000
                    ToggleName.TextStrokeTransparency = 0.000
                    ToggleName.TextXAlignment = Enum.TextXAlignment.Left

                    ToggleBounds.Name = 'ToggleBounds'
                    ToggleBounds.Parent = ToggleName
                    ToggleBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleBounds.BackgroundTransparency = 1
                    ToggleBounds.BorderSizePixel = 0
                    ToggleBounds.Size = UDim2.new(0, 130, 0, 16)
                    ToggleBounds.Position = UDim2.new(0, 12, 0, -1)
                    ToggleBounds.Text = ''

                    local MouseInToggle = false

                    OuterToggle.MouseEnter:Connect(function()
                        MouseInToggle = true
                        while MouseInToggle == true do
                            if Library.RainbowAccent == true then
                                OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                            else
                                OuterToggle.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)
                    ToggleBounds.MouseEnter:Connect(function()
                        MouseInToggle = true
                        while MouseInToggle == true do
                            if Library.RainbowAccent == true then
                                OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                            else
                                OuterToggle.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    OuterToggle.MouseLeave:Connect(function()
                        MouseInToggle = false
                        OuterToggle.BorderColor3 = Library.Black
                    end)
                    ToggleBounds.MouseLeave:Connect(function()
                        MouseInToggle = false
                        OuterToggle.BorderColor3 = Library.Black
                    end)

                    local Toggle = false

                    ToggleBounds.MouseButton1Click:Connect(function()
                        Toggle = not Toggle
                        CallBack(Toggle)
                    end)

                    InnerToggle.MouseButton1Click:Connect(function()
                        Toggle = not Toggle
                        CallBack(Toggle)
                    end)

                    task.spawn(function()
                        while RenderStepped:wait() do
                            if Library.RainbowAccent == true and Toggle == true then
                                InnerToggle.BackgroundColor3 = Library.RainbowAccentColor
                                InnerToggle.BorderColor3 = GetDarkerColor(Library.RainbowAccentColor) 
                            elseif Library.RainbowAccent == false and Toggle == true then
                                InnerToggle.BackgroundColor3 = Library.AccentColor
                                InnerToggle.BorderColor3 = GetDarkerColor(Library.AccentColor) 
                            elseif Toggle == false then
                                InnerToggle.BackgroundColor3 = Library.MainColor
                                InnerToggle.BorderColor3 = Library.OutLineColor
                            end
                        end
                    end)

                    local Extras = {}
                    function Extras:AddKeyBind (Org, Type, CallBack)
                        local KeyBind = Instance.new("TextButton")
                        local KeyDisplay = Instance.new('TextLabel')

                        KeyBind.Name = "KeyBind"
                        KeyBind.Parent = ToggleFrame
                        RenderStepped:connect(function()
                            KeyBind.BackgroundColor3 = Library.MainColor
                        end)
                        KeyBind.BorderColor3 = Library.Black
                        KeyBind.Position = UDim2.new(0, 196, 0, 1)
                        KeyBind.Size = UDim2.new(0, 24, 0, 12)
                        KeyBind.Text = ' '
                        KeyBind.AutoButtonColor = false

                        KeyDisplay.Parent = KeyBind
                        KeyDisplay.BackgroundTransparency = 1
                        KeyDisplay.BorderSizePixel = 0
                        KeyDisplay.Font = Enum.Font.Roboto
                        local OrgResult 
                        local OrgInput
                        if Type == 'MouseButton1' or Type == 'MouseButton2' then 

                            local OrgInput = tostring(Org)
                            OrgResult = string.gsub(OrgInput, 'Enum.UserInputType.', '')
                                            
                            if OrgResult == 'MouseButton1' then
                                OrgResult = 'LMB'
                            elseif OrgResult == 'MouseButton2'then
                                OrgResult = 'RMB'
                            end
                        elseif Type == 'Keyboard' then
                            local OrgInput = tostring(Org)
                            OrgResult = string.gsub(OrgInput, 'Enum.KeyCode.', '')
                        end

                        KeyDisplay.Text = OrgResult
                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                        KeyDisplay.Size = UDim2.new(0, 28, 0, 12)
                        RenderStepped:connect(function()
                            KeyDisplay.TextColor3 = Library.TextColor
                        end)
                        KeyDisplay.TextSize = 11.000
                        KeyDisplay.TextStrokeTransparency = 0.000
                        KeyDisplay.TextWrapped = true
                        KeyDisplay.TextXAlignment = Enum.TextXAlignment.Center

                        -- // KeyBindSetter Function \\ --
                        local UserInputService = game:GetService('UserInputService')
                        
                        local debounce = false
                        local Wait = false
                        --Default KeyBind--

                        task.spawn(function()
                            while wait() do
                                while Wait == true do
                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '.'

                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break
                                    end

                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '. .'

                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break
                                    end

                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '. . .'
                                    
                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break

                                    end
                                end
                            end
                        end)

                        CallBack(Org)
                        
                        KeyBind.MouseButton1Click:Connect(function()
                            debounce = true
                            Wait = true
                                UserInputService.InputBegan:Connect(function(Input, Processed)
                                if debounce then
                                    if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.MouseButton2 then 
                                        Wait = false
                                        local Inputted = tostring(Input.UserInputType)
                                        local Result = string.gsub(Inputted, 'Enum.UserInputType.', '')
                                        
                                        if Result == 'MouseButton1' then
                                            Result = 'LMB'
                                        elseif Result == 'MouseButton2'then
                                            Result = 'RMB'
                                        end

                                        CallBack(Input.UserInputType)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    elseif Input.UserInputType == Enum.UserInputType.Keyboard then
                                        Wait = false
                                        local Inputted = tostring(Input.KeyCode)
                                        local Result = string.gsub(Inputted, 'Enum.KeyCode.', '')

                                        CallBack(Input.KeyCode)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    end
                                end
                            end)
                        end)
                    end


                    function Extras:AddColorPicker ( Org, CallBack)

                         -- // Instance Creator \\ --
                        local ColorPicker = Instance.new("TextButton")
                        local ColorPickerBox = Instance.new("Frame")
                        local ColorPickerBounds = Instance.new('Frame')
                        local Led = Instance.new("Frame")
                        local RGB = Instance.new("TextBox")
                        local Hex = Instance.new("TextBox")
                        local HueSliderBorder = Instance.new("Frame")
                        local HueSlider = Instance.new("TextButton")
                        local UIGradient = Instance.new("UIGradient")
                        local Indicator = Instance.new("Frame")
                        local GradientBox = Instance.new("ImageButton")
                        local GradientIndicator = Instance.new("ImageLabel")
                        -- // Conversion from Object to usable HSV code \\ --
                        local OrgHSV = Org:ToHSV()
                        local Hue, Sat, Val = Org:ToHSV()

                        -- // Instance Properties \\ --

                        ColorPicker.Name = "ColorPicker"
                        ColorPicker.Parent = ToggleCCBounds
                        ColorPicker.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                        ColorPicker.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                        ColorPicker.Position = UDim2.new(0, 192, 0, 1)
                        ColorPicker.Size = UDim2.new(0, 28, 0, 13)
                        ColorPicker.Font = Enum.Font.SourceSans
                        ColorPicker.Text = ""
                        ColorPicker.TextColor3 = Color3.fromRGB(0, 0, 0)
                        ColorPicker.TextSize = 14.000
                        ColorPicker.AutoButtonColor = false

                        ColorPickerBox.Name = "ColorPickerBox"
                        ColorPickerBox.Parent = PickerFolder
                        ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

                        local CPosX = ColorPicker.AbsolutePosition.X - Box.AbsolutePosition.X
                        local CPosY = ColorPicker.AbsolutePosition.Y - Box.AbsolutePosition.Y

                        ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
                        ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
                        ColorPickerBox.ZIndex = 6

                        ColorPickerBounds.Name = "ColorPickerBounds"
                        ColorPickerBounds.Parent = ToggleFrame
                        ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                        ColorPickerBounds.Transparency = 1
                        ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
                        ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
                        ColorPickerBounds.ZIndex = 6

                        Led.Name = "Led"
                        Led.Parent = ColorPickerBox
                        task.spawn(function()
                            while wait() do
                                if Library.RainbowAccent == true then
                                    Led.BackgroundColor3 = Library.RainbowAccentColor 
                                else
                                Led.BackgroundColor3 = Library.AccentColor
                                end
                            end
                        end)
                        Led.BorderSizePixel = 0
                        Led.Size = UDim2.new(0, 220, 0, 2)

                        RGB.Name = "RGB"
                        RGB.Parent = ColorPickerBox
                        RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        RGB.BorderColor3 = Color3.fromRGB(50,50,50)
                        RGB.TextColor3 = Color3.fromRGB(255,255,255)
                        RGB.Position = UDim2.new(0, 113, 0, 199)
                        RGB.Size = UDim2.new(0, 102, 0, 20)
                        RGB.Font = Enum.Font.Code
                        RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                        RGB.PlaceholderText = " RGB Color"
                        RGB.Text = " 255, 0, 0"
                        RGB.TextSize = 13.000
                        RGB.TextStrokeTransparency = 0.000
                        RGB.TextWrapped = true
                        RGB.TextXAlignment = Enum.TextXAlignment.Left

                        Hex.Name = "Hex"
                        Hex.Parent = ColorPickerBox
                        Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        Hex.BorderColor3 = Color3.fromRGB(50,50,50)
                        Hex.TextColor3 = Color3.fromRGB(255,255,255)
                        Hex.Position = UDim2.new(0, 5, 0, 199)
                        Hex.Size = UDim2.new(0, 102, 0, 20)
                        Hex.Font = Enum.Font.Code
                        Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                        Hex.PlaceholderText = " Hex Color"
                        Hex.Text = " #FF0000"
                        Hex.TextSize = 14.000
                        Hex.TextStrokeTransparency = 0.000
                        Hex.TextWrapped = true
                        Hex.TextXAlignment = Enum.TextXAlignment.Left

                        HueSliderBorder.Parent = ColorPickerBox
                        HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
                        HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        HueSliderBorder.BorderSizePixel = 1
                        HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
                        HueSliderBorder.Rotation = 90.000
                        HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

                        HueSlider.Name = "HueSlider"
                        HueSlider.Parent = ColorPickerBox
                        HueSlider.AnchorPoint = Vector2.new(0, 1)
                        HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        HueSlider.BorderSizePixel = 0
                        HueSlider.ClipsDescendants = true
                        HueSlider.Position = UDim2.new(0, 112, 0, 107)
                        HueSlider.Rotation = 90.000
                        HueSlider.Size = UDim2.new(0, 185, 0, 15)
                        HueSlider.AutoButtonColor = false
                        HueSlider.Font = Enum.Font.SourceSans
                        HueSlider.Text = ""
                        HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                        HueSlider.TextSize = 14.000

                        UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
                        UIGradient.Parent = HueSlider

                        Indicator.Name = "Indicator"
                        Indicator.Parent = HueSlider
                        Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Indicator.Position = UDim2.new(0, 0, 0, -1)
                        Indicator.Size = UDim2.new(0, 1, 0, 6)

                        GradientBox.Name = "Gradient Box"
                        GradientBox.Parent = ColorPickerBox
                        GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                        GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        GradientBox.Position = UDim2.new(0, 5, 0, 7)
                        GradientBox.Size = UDim2.new(0, 185, 0, 185)
                        GradientBox.AutoButtonColor = false
                        GradientBox.Image = "rbxassetid://4155801252"

                        GradientIndicator.Parent = GradientBox
                        GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
                        GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        GradientIndicator.BackgroundTransparency = 1.000
                        GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
                        GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
                        GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

                        -- // Default Functions \\ --
                        local PickerOn = false

                        ColorPicker.MouseButton1Click:connect(function()
                            if ColorPickerBox.Visible == true then
                                PickerOn = true
                            else
                                PickerOn = false
                            end
                            for i,v in pairs (PickerFolder:GetChildren()) do
                                if v.Name == 'ColorPickerBox' then
                                    v.Visible = false
                                end
                            end
                            for i,v in pairs (DDFolder:GetChildren()) do
                                v.Visible = false
                            end
                            if PickerOn == true then
                                ColorPickerBox.Visible = false
                            else
                                ColorPickerBox.Visible = true
                            end
                        end)

                        local MouseInPicker = false

                        ColorPickerBox.MouseLeave:connect(function()
                            MouseInPicker = false 
                        end)

                        ColorPickerBox.MouseEnter:connect(function()
                            MouseInPicker = true
                        end)

                        local MouseInPickerBox = false
                        ColorPicker.MouseLeave:connect(function()
                            MouseInPickerBox = false 
                        end)

                        ColorPicker.MouseEnter:connect(function()
                            MouseInPickerBox = true
                        end)

                        local MouseInPickerBounds = false
                        ColorPickerBounds.MouseLeave:connect(function()
                            MouseInPickerBounds = false 
                        end)

                        ColorPickerBounds.MouseEnter:connect(function()
                            MouseInPickerBounds = true
                        end)

                        task.spawn(function()
                            UIS.InputBegan:Connect(function(Input, Processed)
                                if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    ColorPickerBox.Visible = false
                                end
                            end)
                        end)

                        -- // Gradient Box Function / Sat and Val Updaters \\ --
                        local GHeld = false

                        GradientBox.MouseButton1Down:Connect(function()
                            GHeld = true
                        end)

                        UIS.InputEnded:Connect(function(Input, Processed)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                GHeld = false
                            end
                        end)

                        local Value1
                        
                        RenderStepped:Connect(function(Delta)
                            if GHeld then
                                local MousePos = UIS:GetMouseLocation()
                                local GradientPos = GradientBox.AbsolutePosition
                                local GradientSize = GradientBox.AbsoluteSize
                                
                                local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                                Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                                local Value2 = -(Value1 - 1)

                                Sat = math.clamp(Saturation, 0, 1)
                                Val = math.clamp(Value2, 0, 1)

                                Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                                RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                                GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                            end
                            GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
                        end)

                        GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

                        -- // HueSlider Functions / Hue Updater \\ --

                        local SHeld = false

                        HueSlider.MouseButton1Down:Connect(function()
                            SHeld = true
                        end)

                        UIS.InputEnded:Connect(function(Input, Processed)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                SHeld = false
                            end
                        end)


                        RenderStepped:Connect(function(Delta)
                            if SHeld then
                                local MousePos = UIS:GetMouseLocation().Y
                                local SliderPos = HueSlider.AbsolutePosition.Y - 52
                                local SliderSize = HueSlider.AbsoluteSize.X
                                
                                local Pos = (MousePos - SliderPos) / SliderSize

                                Hue = math.clamp(Pos, 0, 1)

                                Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                                RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                            else

                            end

                            Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                                
                            if Hue == 1 then
                                Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                            end
                        end)

                        -- // Color Updater for CallBack and Color Picker Button \\ --
                        task.spawn(function()
                            while RenderStepped:wait() do
                                ColorPicker.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                                ColorPicker.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                                CallBack(Hue, Sat, Val)
                            end
                        end)

                        -- // Code to Integer Converter \\ --

                        function ToInteger (Color)
                            return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
                        end
                        
                        -- // From RGB to Hex Code Converter \\ --
                        function ToHex (Color)
                            local Red, Green, Blue = ToInteger(Color)
                            local HexChar = {
                                'A', 'B', 'C', 'D', 'E', 'F'
                            }
                            local ColorTable = {Red, Green, Blue}
                            local Result = ' #'
                        
                            for i,Code in pairs (ColorTable) do
                                local Divide = Code / 16
                                local FirstNumber = math.floor(Divide)
                                local Remainder = (Divide - FirstNumber) * 16
                                local Char
                        
                                if FirstNumber >= 10 then
                                    Char = HexChar[FirstNumber - 9]
                                else
                                    Char = FirstNumber
                                end
                        
                                if Remainder >= 10 then
                                    Char = Char..HexChar[Remainder - 9]
                                else 
                                    Char = Char..tonumber(Remainder)
                                end
                        
                                Result = Result..Char
                            end
                        
                            return tostring(Result)
                        end

                        -- // RGB to String Converter \\ --
                        function ToRGB(Color)
                            local Red, Green, Blue = ToInteger(Color)
                            local RGB = ' '..Red..', '..Green..', '..Blue
                            return tostring(RGB)
                        end

                        Hex.Text = ToHex(Org)
                        RGB.Text = ToRGB(Org)
                      

                    end
                    return Extras
                end

                function BoxComps:AddSlider(Info, CallBack)

 
                    local SliderFrame = Instance.new("Frame")
                    local OuterSlider = Instance.new("TextButton")
                    local InnerSlider = Instance.new("TextButton")
                    local SliderInfo = Instance.new("TextLabel")
                    local Name = Instance.new("TextLabel")
                    local SliderBorder = Instance.new('Frame')

                    SliderFrame.Name = "SliderFrame"
                    SliderFrame.Parent = RightBox
                    SliderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderFrame.BackgroundTransparency = 1.000
                    SliderFrame.BorderSizePixel = 0
                    SliderFrame.Size = UDim2.new(0, 226, 0, 29)
                    SliderFrame.ZIndex = 2
                    SliderBorder.Parent = SliderFrame
                    SliderBorder.BackgroundColor3 = Library.MainColor
                    SliderBorder.BackgroundTransparency = 0
                    SliderBorder.BorderColor3 = Library.Black
                    SliderBorder.BorderSizePixel = 1
                    SliderBorder.Position = UDim2.new(0, 5, 0, 13)
                    SliderBorder.Size = UDim2.new(0, 216, 0, 14)

                    OuterSlider.Name = "OuterSlider"
                    OuterSlider.Parent = SliderBorder
                    RenderStepped:connect(function()
                        OuterSlider.BackgroundColor3 = Library.MainColor
                        OuterSlider.BorderColor3 = Library.OutLineColor
                    end)
                    OuterSlider.BorderMode = Enum.BorderMode.Inset
                    OuterSlider.Position = UDim2.new(0, 0, 0, 0)
                    OuterSlider.Size = UDim2.new(1, 0, 1, 0)
                    OuterSlider.Font = Enum.Font.SourceSans
                    OuterSlider.Text = ""
                    OuterSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    OuterSlider.TextSize = 14.000
                    OuterSlider.TextStrokeTransparency = 0.000
                    OuterSlider.AutoButtonColor = false

                    InnerSlider.Name = "InnerSlider"
                    InnerSlider.Parent = OuterSlider
                    task.spawn(function()
                        while wait() do
                            if Library.RainbowAccent == true then
                                InnerSlider.BackgroundColor3 = Library.RainbowAccentColor
                                InnerSlider.BorderColor3 = GetDarkerColor(Library.RainbowAccentColor)
                            else
                                InnerSlider.BackgroundColor3 = Library.AccentColor
                                InnerSlider.BorderColor3 = GetDarkerColor(Library.AccentColor)
                            end
                        end
                    end)
                    InnerSlider.BackgroundTransparency = 0
                    InnerSlider.BorderSizePixel = 1
                    InnerSlider.Position = UDim2.new(0, 0, 0, 0)
                    InnerSlider.Size = UDim2.new(0, 1, 0, 12)
                    InnerSlider.Visible = true
                    InnerSlider.Font = Enum.Font.SourceSans
                    InnerSlider.Text = ""
                    InnerSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    InnerSlider.TextSize = 14.000
                    InnerSlider.AutoButtonColor = false

                    SliderInfo.Name = "SliderInfo"
                    SliderInfo.Parent = OuterSlider
                    SliderInfo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderInfo.BackgroundTransparency = 1.000
                    SliderInfo.Position = UDim2.new(0, 73, 0, -1)
                    SliderInfo.Size = UDim2.new(0, 70, 0, 12)
                    SliderInfo.Font = Enum.Font.Code
                    SliderInfo.LineHeight = 0.950
                    SliderInfo.Text = Info.SliderName..': '..Info.SliderStartingValue..'m'
                    RenderStepped:connect(function()
                        SliderInfo.TextColor3 = Library.TextColor
                    end)
                    SliderInfo.TextSize = 13.000
                    SliderInfo.TextStrokeTransparency = 0.000

                    Name.Name = "Name"
                    Name.Parent = SliderFrame
                    Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Name.BackgroundTransparency = 1.000
                    Name.Position = UDim2.new(0, 6, 0, -4)
                    Name.Size = UDim2.new(0, 180, 0, 16)
                    Name.Font = Enum.Font.Code
                    Name.Text = Info.Name
                    RenderStepped:connect(function()
                        Name.TextColor3 = Library.TextColor
                    end)
                    Name.TextSize = 14.000
                    Name.TextStrokeTransparency = 0.000
                    Name.TextXAlignment = Enum.TextXAlignment.Left

                    local MouseInSlider = false

                    SliderBorder.MouseEnter:Connect(function()
                        MouseInSlider = true
                        while MouseInSlider == true do
                            if Library.RainbowAccent == true then
                                SliderBorder.BorderColor3 = Library.RainbowAccentColor 
                            else
                                SliderBorder.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    SliderBorder.MouseLeave:Connect(function()
                        MouseInSlider = false
                        SliderBorder.BorderColor3 = Library.Black
                    end)

                    -- Sliding Funco --

                    --Variables-------------------------------------------------
                    local UIS = game:GetService('UserInputService')
                    local OuterSlider = OuterSlider
                    local InnerSlider = InnerSlider
                    local SliderInfo = SliderInfo
                    local player = game.Players.LocalPlayer
                    local RUS = game:GetService('RunService')
                    local Value
                    SliderInfo.Text = Info.SliderName..': '..Info.SliderStartingValue..Info.Unit
                    --Properties------------------------------------------
                    local Held = false                                                    -- Variable for if you are holding down the slider, holds information that the script would need.
                    local factor = Info.Factor                                                 --Step is the factor
                    
                    --Default Settings--------------------------------------------
                    if Info.SliderStartingValue == 0 then
                        InnerSlider.Size = UDim2.new(Info.SliderStartingValue * factor, 1, InnerSlider.Size.Y.Scale, InnerSlider.Size.Y.Offset)
                    else
                        InnerSlider.Size = UDim2.new(Info.SliderStartingValue * factor, 0, InnerSlider.Size.Y.Scale, InnerSlider.Size.Y.Offset)
                    end
                    --Script------------------------------------------------------
                    local function Round(number, factor)                            
                        if factor == 0 then                                               -- IF there is no factor then it just returns the % that the innerslider covers              
                            return number        
                        end
                        return math.floor(number/factor+0.5) * factor                     -- Returns the sum of this to be the value of Pos, would now be an increment of 'factor'  e.g. only goes up in 0.01 by rounding down anything that isnt an increment/factor of 0.01 to an increment/factor of 0.01.  
                    end
                    
                    local function rounding(Num)
                        return math.floor(Num * 10 ^ Info.Round) / 10 ^ Info.Round                 -- Round's number is the amount of decimal place it rounds to, so if Round = 1 then it would round it down to 1 decimal place.
                    end
                    
                    OuterSlider.MouseButton1Down:Connect(function()                       -- When you click and are holding down the slider with LMB
                        Held = true                                                       -- Makes held variable true
                    end)
                    InnerSlider.MouseButton1Down:Connect(function()
                        Held = true
                    end)
                    UIS.InputEnded:Connect(function(Input, Processed)                     -- When you stop holding down the slider with LMB
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Held = false                                                  -- Makes held variable false
                        end
                    end)
                    
                    RUS.RenderStepped:Connect(function(delta)                            				  -- An event that fires prior to the frame being rendered
                        if Held then                                                     				  -- If the slider is being held then
                            local MousePos = UIS:GetMouseLocation().X                  				      -- gets the X value of where the Mouse is at on the screen
                            local ISPos = InnerSlider.Position                              		      -- ISPos is the InnerSlider's Position
                            local ISSize = InnerSlider.Size                                               -- ISSize is the InnerSlider's Size
                            local SliderPos = OuterSlider.AbsolutePosition.X                  				  -- Gets the X value of the Slider's Position
                            local SliderSize = OuterSlider.AbsoluteSize.X                                      -- Gets the X value of the Slider's Size
                            local Pos = Round((MousePos-SliderPos)/SliderSize, factor)                    -- '(MousePos-SliderPos)/SliderSize is the % of the slider that the inner slider covers. 1 is 100%, 0 is 0%. (With mouse it'd be the % of the way to the end of the slider),
                                                                                                        -- 'Round' sends the values to be rounded in a function, where Pos would be the value that the function returns
                            local Percentage = math.clamp(Pos,0,1)                                        -- For math.clamp, The first argument is the value you want to clamp, the 2nd is the minimum(smallest) value that the clamped value can be, 3rd is the maximum(biggest) value it can be
                    
                            if Percentage <= 0 then
                                InnerSlider.Size = UDim2.new(Percentage, 1, ISSize.Y.Scale, ISSize.Y.Offset)
                            elseif Percentage == 1 then
                                InnerSlider.Size = UDim2.new(Percentage, 2, ISSize.Y.Scale, ISSize.Y.Offset)
                            else
                                InnerSlider.Size = UDim2.new(Percentage, 0, ISSize.Y.Scale, ISSize.Y.Offset)  -- Makes the InnerSlider's X Scale according to the % it should cover
                            end

                            SliderInfo.Text = Info.SliderName..': '..rounding(Percentage * Info.SliderSize)..Info.Unit                                    -- Makes SliderInfo the % that the innerslider covers
                            Value =  math.floor(Percentage * Info.ValueSize)
                            CallBack(Value)
                        end 
                    end)
                end

                function BoxComps:AddDropDown (Info, Drops, CallBack)

                    local DropDown = Instance.new("Frame")
                    local DropDownBounds = Instance.new('Frame')
                    local DropDownMain = Instance.new("TextButton")
                    local Arrow = Instance.new("ImageLabel")
                    local DDHolder = Instance.new("Frame")
                    local UIListLayout = Instance.new("UIListLayout")
                    local DropDownName = Instance.new("TextLabel")
                    local DropDownBorder = Instance.new('Frame')

                    local Selected = Info.Org
                    local Dropped = false
                    local MouseInDropDown = false

                    DropDown.Name = "DropDown"
                    DropDown.Parent = RightBox
                    DropDown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDown.BackgroundTransparency = 1.000
                    DropDown.BorderSizePixel = 0
                    DropDown.Size = UDim2.new(0, 226, 0, 36)
                    DropDown.ZIndex = 5


                    DropDownName.Name = "DropDownName"
                    DropDownName.Parent = DropDown
                    DropDownName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDownName.BackgroundTransparency = 1.000
                    DropDownName.Position = UDim2.new(0, 6, 0, -4)
                    DropDownName.Size = UDim2.new(0, 180, 0, 16)
                    DropDownName.Font = Enum.Font.Code
                    DropDownName.Text = Info.Name
                    RenderStepped:connect(function()
                        DropDownName.TextColor3 = Library.TextColor
                    end)
                    DropDownName.TextSize = 14.000
                    DropDownName.TextStrokeTransparency = 0.000
                    DropDownName.TextXAlignment = Enum.TextXAlignment.Left

                    DropDownBounds.Name = "DropDownBounds"
                    DropDownBounds.Parent = DropDown
                    DropDownBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    DropDownBounds.BorderColor3 = Library.Black
                    DropDownBounds.BorderSizePixel = 1
                    DropDownBounds.Position = UDim2.new(0, 5, 0, 13)
                    DropDownBounds.Size = UDim2.new(0, 216, 0, 20)

                    DropDownMain.Name = "DropDownMain"
                    DropDownMain.Parent = DropDownBounds
                    RenderStepped:connect(function()
                        DropDownMain.BackgroundColor3 = Library.MainColor
                        DropDownMain.BorderColor3 = Library.OutLineColor
                    end)
                    DropDownMain.BorderMode = Enum.BorderMode.Inset
                    DropDownMain.Position = UDim2.new(0, 0, 0, 0)
                    DropDownMain.Size = UDim2.new(1, 0, 1, 0)
                    DropDownMain.Font = Enum.Font.Code
                    DropDownMain.Text = tostring(Info.Org)
                    RenderStepped:connect(function()
                        DropDownMain.TextColor3 = Library.TextColor
                    end)
                    DropDownMain.TextSize = 14.000
                    DropDownMain.TextStrokeTransparency = 0.000
                    DropDownMain.TextXAlignment = Enum.TextXAlignment.Left
                    DropDownMain.AutoButtonColor = false

                    Arrow.Name = "Arrow"
                    Arrow.Parent = DropDownMain
                    Arrow.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    Arrow.BackgroundTransparency = 1.000
                    Arrow.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    Arrow.Position = UDim2.new(0, 197, 0, 2)
                    Arrow.Size = UDim2.new(0, 15, 0, 15)
                    Arrow.Image = "http://www.roblox.com/asset/?id=9482956116"

                    local DDMPosX = DropDownMain.AbsolutePosition.X - Box.AbsolutePosition.X
                    local DDMPosY = DropDownMain.AbsolutePosition.Y - Box.AbsolutePosition.Y

                    DropDownBorder.Parent = DDFolder
                    DropDownBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDownBorder.BackgroundTransparency = 1.000
                    DropDownBorder.BorderSizePixel = 0
                    DropDownBorder.Size = UDim2.new(0, 216, 0, 20)
                    DropDownBorder.Position = UDim2.new(0, DDMPosX, 0, DDMPosY)
                    DropDownBorder.AutomaticSize = Enum.AutomaticSize.XY

                    DDHolder.Name = "DDHolder"
                    DDHolder.Parent = DropDownBorder
                    RenderStepped:connect(function()
                        DDHolder.BackgroundColor3 = Library.MainColor
                    end)
                    DDHolder.BorderColor3 = Library.Black

                    DDHolder.Position = UDim2.new(0, 1, 0, 22)
                    DDHolder.Size = UDim2.new(0, 0, 0, 0)
                    DDHolder.Visible = false
                    DDHolder.AutomaticSize = Enum.AutomaticSize.XY

                    UIListLayout.Parent = DDHolder
                    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    UIListLayout.Padding = UDim.new(0, 1)

                    for i,v in pairs (Drops) do
                        local Drop = Instance.new("TextButton")
                        local MouseInDrop = false
                        Drop.Name = "Drop"
                        Drop.Parent = DDHolder
                        RenderStepped:connect(function()
                            Drop.BackgroundColor3 = Library.MainColor
                        end)
                        Drop.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        Drop.Position = UDim2.new(0, 0, 0, -1)
                        Drop.Size = UDim2.new(0, 214, 0, 19)
                        Drop.Selected = true
                        Drop.Font = Enum.Font.Code
                        Drop.Text = ' '..tostring(v)
                        Drop.TextColor3 = Library.TextColor
                        Drop.TextSize = 14.000
                        Drop.TextStrokeTransparency = 0.000
                        Drop.TextXAlignment = Enum.TextXAlignment.Left
                        Drop.AutoButtonColor = false

                        Drop.MouseButton1Click:connect(function()
                            Selected = tostring(v)
                            CallBack(Selected)
                        end)

                        task.spawn(function()
                            while RenderStepped:wait() do
                                if Selected == tostring(v) and Library.RainbowAccent then
                                    Drop.TextColor3 = Library.RainbowAccentColor
                                elseif Selected == tostring(v) and not Library.RainbowAccent then
                                    Drop.TextColor3 = Library.AccentColor
                                elseif Selected ~= tostring(v) then
                                    Drop.TextColor3 = Library.TextColor
                                end
                            end
                        end)

                        Drop.MouseEnter:connect(function()
                            MouseInDrop = true
                            while MouseInDrop do
                                if Library.RainbowAccent then
                                    Drop.BorderColor3 = Library.RainbowAccentColor
                                elseif not Library.RainbowAccent then
                                    Drop.BorderColor3 = Library.AccentColor
                                end
                                wait()
                            end
                        end)

                        Drop.MouseLeave:connect(function()
                            MouseInDrop = false
                        end)

                        RenderStepped:connect(function()
                            if MouseInDrop == false then
                                Drop.BorderColor3 = Library.OutLineColor
                            end
                        end)
                    end



                    DropDownBounds.MouseEnter:connect(function()
                        MouseInDropDown = true
                        while MouseInDropDown do
                            if Library.RainbowAccent then
                                DropDownBounds.BorderColor3 = Library.RainbowAccentColor
                            elseif not Library.RainbowAccent then
                                DropDownBounds.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    DropDownBounds.MouseLeave:connect(function()
                        MouseInDropDown = false
                        DropDownBounds.BorderColor3 = Library.Black
                    end)

                    for i,v in pairs (DDHolder:GetChildren()) do
                        if v.Name == "Drop" then
                        v.Visible = true
                        end
                    end

                    DropDownMain.MouseButton1Click:Connect(function()
                        
                        if Dropped == false then
                            for i,v in pairs (DDFolder:GetChildren()) do
                                v.Visible = false
                            end
                            for i,v in pairs (PickerFolder:GetChildren()) do
                                v.Visible = false
                            end
                            DDHolder.Visible = true
                            DropDownBorder.Visible = true
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9489839300'
                            Arrow.Position = UDim2.new(0, 197, 0, 4)
                            Dropped = true
                            DDHolder.ZIndex = 8
                            DropDownBorder.ZIndex = 8

                        elseif Dropped == true then
                            DDHolder.Visible = false
                            DropDownBorder.Visible = false
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9482956116'
                            Arrow.Position = UDim2.new(0, 197, 0, 2)
                            Dropped = false
                            DDHolder.ZIndex = 1
                            DropDownBorder.ZIndex = 1
                        end
                        
                    end)

                    local MouseInDropBounds = false
                    DropDownBorder.MouseLeave:connect(function()
                        MouseInDropBounds = false 
                    end)
        
                    DropDownBorder.MouseEnter:connect(function()
                        MouseInDropBounds = true
                    end)
        
                    task.spawn(function()
                        UIS.InputBegan:Connect(function(Input, Processed)
                            if not MouseInDropBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 and Dropped then
                                if DropDownBorder.Visible and not MouseInDropDown then 
                                    DropDownBorder.Visible = false
                                end
                            end
                        end)
                    end)

                    RenderStepped:connect(function()
                        if DropDownBorder.Visible == true then 
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9489839300'
                            Arrow.Position = UDim2.new(0, 197, 0, 4)
                            Dropped = true
                        else
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9482956116'
                            Arrow.Position = UDim2.new(0, 197, 0, 2)
                            Dropped = false
                        end
                    end)

                    task.spawn(function() 
                        while RenderStepped:wait() do
                            DropDownMain.Text = ' '..tostring(Selected)
                            CallBack(tostring(Selected))
                        end
                    end)
                end
                function BoxComps:AddNamewColorPicker (Info, Org, CallBack)
                    local CCBG = Instance.new("Frame")
                    local CPN = Instance.new("TextLabel")
                    local CPB = Instance.new("TextButton")

                    local ColorPickerBox = Instance.new("Frame")
                    local ColorPickerBounds = Instance.new('Frame')
                    local Led = Instance.new("Frame")
                    local RGB = Instance.new("TextBox")
                    local Hex = Instance.new("TextBox")
                    local HueSliderBorder = Instance.new("Frame")
                    local HueSlider = Instance.new("TextButton")
                    local UIGradient = Instance.new("UIGradient")
                    local Indicator = Instance.new("Frame")
                    local GradientBox = Instance.new("ImageButton")
                    local GradientIndicator = Instance.new("ImageLabel")
                    -- // Conversion from Object to usable HSV code \\ --

                    local OrgHSV = Org:ToHSV()
                    local Hue, Sat, Val = Org:ToHSV()

                    --Properties:

                    CCBG.Name = "CCBG"
                    CCBG.Parent = RightBox
                    CCBG.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    CCBG.BackgroundTransparency = 1.000
                    CCBG.Position = UDim2.new(0, 0, 0, 0)
                    CCBG.Size = UDim2.new(0, 226, 0, 17)

                    CPN.Name = "CPN"
                    CPN.Parent = CCBG
                    CPN.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
                    CPN.BackgroundTransparency = 1.000
                    CPN.BorderSizePixel = 0
                    CPN.Position = UDim2.new(0, 6, 0, -1)
                    CPN.Size = UDim2.new(0, 87, 0, 16)
                    CPN.Font = Enum.Font.Code
                    CPN.Text = Info.Name
                    RenderStepped:connect(function()
                        CPN.TextColor3 = Library.TextColor
                    end)
                    CPN.TextSize = 14.000
                    CPN.TextStrokeTransparency = 0.000
                    CPN.TextXAlignment = Enum.TextXAlignment.Left

                    CPB.Name = "CPB"
                    CPB.Parent = CCBG
                    CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                    CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                    CPB.Position = UDim2.new(0, 192, 0, 1)
                    CPB.Size = UDim2.new(0, 28, 0, 13)
                    CPB.Font = Enum.Font.SourceSans
                    CPB.Text = ""
                    CPB.TextColor3 = Color3.fromRGB(0, 0, 0)
                    CPB.TextSize = 14.000
                    CPB.AutoButtonColor = false

                    ColorPickerBox.Name = "ColorPickerBox"
                    ColorPickerBox.Parent = PickerFolder
                    ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

                    local CPosX = CPB.AbsolutePosition.X - Box.AbsolutePosition.X
                    local CPosY = CPB.AbsolutePosition.Y - Box.AbsolutePosition.Y

                    ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
                    ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
                    ColorPickerBox.ZIndex = 6

                    ColorPickerBounds.Name = "ColorPickerBounds"
                    ColorPickerBounds.Parent = CCBG
                    ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    ColorPickerBounds.Transparency = 1
                    ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
                    ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
                    ColorPickerBounds.ZIndex = 6

                    Led.Name = "Led"
                    Led.Parent = ColorPickerBox
                    task.spawn(function()
                        while wait() do
                            if Library.RainbowAccent == true then
                                Led.BackgroundColor3 = Library.RainbowAccentColor 
                            else
                            Led.BackgroundColor3 = Library.AccentColor
                            end
                        end
                    end)
                    Led.BorderSizePixel = 0
                    Led.Size = UDim2.new(0, 220, 0, 2)

                    RGB.Name = "RGB"
                    RGB.Parent = ColorPickerBox
                    RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    RGB.BorderColor3 = Color3.fromRGB(50,50,50)
                    RGB.TextColor3 = Color3.fromRGB(255,255,255)
                    RGB.Position = UDim2.new(0, 113, 0, 199)
                    RGB.Size = UDim2.new(0, 102, 0, 20)
                    RGB.Font = Enum.Font.Code
                    RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                    RGB.PlaceholderText = " RGB Color"
                    RGB.Text = " 255, 0, 0"
                    RGB.TextSize = 13.000
                    RGB.TextStrokeTransparency = 0.000
                    RGB.TextWrapped = true
                    RGB.TextXAlignment = Enum.TextXAlignment.Left

                    Hex.Name = "Hex"
                    Hex.Parent = ColorPickerBox
                    Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    Hex.BorderColor3 = Color3.fromRGB(50,50,50)
                    Hex.TextColor3 = Color3.fromRGB(255,255,255)
                    Hex.Position = UDim2.new(0, 5, 0, 199)
                    Hex.Size = UDim2.new(0, 102, 0, 20)
                    Hex.Font = Enum.Font.Code
                    Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                    Hex.PlaceholderText = " Hex Color"
                    Hex.Text = " #FF0000"
                    Hex.TextSize = 14.000
                    Hex.TextStrokeTransparency = 0.000
                    Hex.TextWrapped = true
                    Hex.TextXAlignment = Enum.TextXAlignment.Left

                    HueSliderBorder.Parent = ColorPickerBox
                    HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
                    HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    HueSliderBorder.BorderSizePixel = 1
                    HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
                    HueSliderBorder.Rotation = 90.000
                    HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

                    HueSlider.Name = "HueSlider"
                    HueSlider.Parent = ColorPickerBox
                    HueSlider.AnchorPoint = Vector2.new(0, 1)
                    HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    HueSlider.BorderSizePixel = 0
                    HueSlider.ClipsDescendants = true
                    HueSlider.Position = UDim2.new(0, 112, 0, 107)
                    HueSlider.Rotation = 90.000
                    HueSlider.Size = UDim2.new(0, 185, 0, 15)
                    HueSlider.AutoButtonColor = false
                    HueSlider.Font = Enum.Font.SourceSans
                    HueSlider.Text = ""
                    HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    HueSlider.TextSize = 14.000

                    UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
                    UIGradient.Parent = HueSlider

                    Indicator.Name = "Indicator"
                    Indicator.Parent = HueSlider
                    Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    Indicator.Position = UDim2.new(0, 0, 0, -1)
                    Indicator.Size = UDim2.new(0, 1, 0, 6)

                    GradientBox.Name = "Gradient Box"
                    GradientBox.Parent = ColorPickerBox
                    GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                    GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    GradientBox.Position = UDim2.new(0, 5, 0, 7)
                    GradientBox.Size = UDim2.new(0, 185, 0, 185)
                    GradientBox.AutoButtonColor = false
                    GradientBox.Image = "rbxassetid://4155801252"

                    GradientIndicator.Parent = GradientBox
                    GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
                    GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    GradientIndicator.BackgroundTransparency = 1.000
                    GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
                    GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
                    GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

                    -- // Default Functions \\ --
                    local PickerOn = false

                    CPB.MouseButton1Click:connect(function()
                        if ColorPickerBox.Visible == true then
                            PickerOn = true
                        else
                            PickerOn = false
                        end
                        for i,v in pairs (PickerFolder:GetChildren()) do
                            if v.Name == 'ColorPickerBox' then
                                v.Visible = false
                            end
                        end
                        for i,v in pairs (DDFolder:GetChildren()) do
                            v.Visible = false
                        end
                        if PickerOn == true then
                            ColorPickerBox.Visible = false
                        else
                            ColorPickerBox.Visible = true
                        end
                    end)

                    local MouseInPicker = false

                    ColorPickerBox.MouseLeave:connect(function()
                        MouseInPicker = false 
                    end)

                    ColorPickerBox.MouseEnter:connect(function()
                        MouseInPicker = true
                    end)

                    local MouseInPickerBox = false
                    CPB.MouseLeave:connect(function()
                        MouseInPickerBox = false 
                    end)

                    CPB.MouseEnter:connect(function()
                        MouseInPickerBox = true
                    end)

                    local MouseInPickerBounds = false
                    ColorPickerBounds.MouseLeave:connect(function()
                        MouseInPickerBounds = false 
                    end)

                    ColorPickerBounds.MouseEnter:connect(function()
                        MouseInPickerBounds = true
                    end)

                    task.spawn(function()
                        UIS.InputBegan:Connect(function(Input, Processed)
                            if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                ColorPickerBox.Visible = false
                            end
                        end)
                    end)

                    -- // Gradient Box Function / Sat and Val Updaters \\ --
                    local GHeld = false

                    GradientBox.MouseButton1Down:Connect(function()
                        GHeld = true
                    end)

                    UIS.InputEnded:Connect(function(Input, Processed)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            GHeld = false
                        end
                    end)

                    local Value1
                        
                    RenderStepped:Connect(function(Delta)
                        if GHeld then
                            local MousePos = UIS:GetMouseLocation()
                            local GradientPos = GradientBox.AbsolutePosition
                            local GradientSize = GradientBox.AbsoluteSize
                                
                            local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                            Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                            local Value2 = -(Value1 - 1)

                            Sat = math.clamp(Saturation, 0, 1)
                            Val = math.clamp(Value2, 0, 1)

                            Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                            RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                            GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                        end
                        GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
                    end)

                    GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

                    -- // HueSlider Functions / Hue Updater \\ --

                    local SHeld = false

                    HueSlider.MouseButton1Down:Connect(function()
                        SHeld = true
                    end)

                    UIS.InputEnded:Connect(function(Input, Processed)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            SHeld = false
                        end
                    end)


                    RenderStepped:Connect(function(Delta)
                        if SHeld then
                            local MousePos = UIS:GetMouseLocation().Y
                            local SliderPos = HueSlider.AbsolutePosition.Y - 52
                            local SliderSize = HueSlider.AbsoluteSize.X
                                
                            local Pos = (MousePos - SliderPos) / SliderSize

                            Hue = math.clamp(Pos, 0, 1)

                            Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                            RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                        else

                        end

                        Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                                
                        if Hue == 1 then
                            Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                        end
                    end)

                    -- // Color Updater for CallBack and Color Picker Button \\ --
                    task.spawn(function()
                        while RenderStepped:wait() do
                            CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                            CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                            CallBack(Hue, Sat, Val)
                        end
                    end)


                    -- // Code to Integer Converter \\ --

                    function ToInteger (Color)
                        return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
                    end
                        
                    -- // From RGB to Hex Code Converter \\ --
                    function ToHex (Color)
                        local Red, Green, Blue = ToInteger(Color)
                        local HexChar = {
                            'A', 'B', 'C', 'D', 'E', 'F'
                        }
                        local ColorTable = {Red, Green, Blue}
                        local Result = ' #'
                        
                        for i,Code in pairs (ColorTable) do
                            local Divide = Code / 16
                            local FirstNumber = math.floor(Divide)
                            local Remainder = (Divide - FirstNumber) * 16
                            local Char
                        
                            if FirstNumber >= 10 then
                                Char = HexChar[FirstNumber - 9]
                            else
                                Char = FirstNumber
                            end
                        
                            if Remainder >= 10 then
                                Char = Char..HexChar[Remainder - 9]
                            else 
                                Char = Char..tonumber(Remainder)
                            end
                        
                            Result = Result..Char
                        end
                        
                        return tostring(Result)
                    end

                    -- // RGB to String Converter \\ --
                    function ToRGB(Color)
                        local Red, Green, Blue = ToInteger(Color)
                        local RGB = ' '..Red..', '..Green..', '..Blue
                        return tostring(RGB)
                    end

                    Hex.Text = ToHex(Org)
                    RGB.Text = ToRGB(Org)
                end
                return BoxComps  
            end

            function Boxes:AddRightDualBox(Properties)
        
                            
                local RightDualBox = Instance.new("Frame")
                local Box1 = Instance.new("Frame")
                local Box2 = Instance.new("Frame")
                local Tab2 = Instance.new("TextButton")
                local Tab1 = Instance.new("TextButton")
                local Led = Instance.new("Frame")
                local UIListLayout1 = Instance.new("UIListLayout")
                local UIListLayout2 = Instance.new("UIListLayout")
                local TabBound1 = Instance.new("Frame")
                local TabBound2 = Instance.new("Frame")

                RightDualBox.Name = "RightDualBox"
                RightDualBox.Parent = RightGroupBox
                RightDualBox.BackgroundColor3 = Library.OutLineColor
                RightDualBox.BorderColor3 = Library.OutLineColor
                RightDualBox.ClipsDescendants = false
                RightDualBox.BackgroundTransparency = 1
                RightDualBox.Visible = true
                RightDualBox.Size = UDim2.new(0, 228, 0, Properties.CustomSize.Y.Offset)

                Box1.Name = "Box1"
                Box1.Parent = RightDualBox
                RenderStepped:connect(function()
                    Box1.BackgroundColor3 = Library.BackGroundColor
                    Box1.BorderColor3 = Library.OutLineColor
                end)
                Box1.BorderSizePixel = 1
                Box1.Position = UDim2.new(0, 1, 0, 0)
                Box1.Size = UDim2.new(0, 226, 0, Properties.CustomSize.Y.Offset)
                Box1.Visible = true

                Box2.Name = "Box2"
                Box2.Parent = RightDualBox
                RenderStepped:connect(function()
                    Box2.BackgroundColor3 = Library.BackGroundColor
                    Box2.BorderColor3 = Library.OutLineColor
                end)
                Box2.BorderSizePixel = 1
                Box2.Position = UDim2.new(0, 1, 0, 0)
                Box2.Size = UDim2.new(0, 226, 0, Properties.CustomSize.Y.Offset)
                Box2.Visible = false


                Tab2.Name = "Tab2"
                Tab2.Parent = RightDualBox
                Tab2.BackgroundColor3 = Library.MainColor
                RenderStepped:connect(function()
                    Tab2.BorderColor3 = Library.OutLineColor
                end)
                Tab2.Position = UDim2.new(0, 115, 0, 2)
                Tab2.Size = UDim2.new(0, 112, 0, 16)
                Tab2.Text = tostring(Properties.TabName2)
                Tab2.Font = Enum.Font.Code
                RenderStepped:connect(function()    
                    Tab2.TextColor3 = Library.TextColor
                end)

                Tab2.TextSize = 14.000
                Tab2.ZIndex = 6
                Tab2.AutoButtonColor = false

                Tab1.Name = "Tab1"
                Tab1.Parent = RightDualBox
                Tab1.BackgroundColor3 = Library.BackGroundColor
                RenderStepped:connect(function()
                    Tab1.BorderColor3 = Library.OutLineColor
                end)
                Tab1.Position = UDim2.new(0, 1, 0, 2)
                Tab1.Size = UDim2.new(0, 113, 0, 16)
                Tab1.Text = tostring(Properties.TabName1)
                Tab1.Font = Enum.Font.Code
                RenderStepped:connect(function()
                    Tab1.TextColor3 = Library.TextColor
                end)
                Tab1.TextSize = 14.000
                Tab1.ZIndex = 6
                Tab1.AutoButtonColor = false

                Led.Name = "Led"
                Led.Parent = RightDualBox
                task.spawn(function()
                    while wait() do
                        if Library.RainbowAccent == true then
                            Led.BackgroundColor3 = Library.RainbowAccentColor 
                        else
                        Led.BackgroundColor3 = Library.AccentColor
                        end
                    end
                end)
                Led.BorderSizePixel = 0
                Led.Position = UDim2.new(0, 1, 0, 0)
                Led.Size = UDim2.new(0, 226, 0, 2)
                Led.ZIndex = 6
                Tab1.MouseButton1Click:connect(function()
                    Box2.Visible = false
                    Box1.Visible = true
                    Tab1.BackgroundColor3 = Library.BackGroundColor
                    Tab2.BackgroundColor3 = Library.MainColor
                    Tab1.BorderSizePixel = 0
                    Tab2.BorderSizePixel = 1
                end)

                Tab2.MouseButton1Click:connect(function()
                    Box2.Visible = true
                    Box1.Visible = false
                    Tab1.BackgroundColor3 = Library.MainColor
                    Tab2.BackgroundColor3 = Library.BackGroundColor
                    Tab1.BorderSizePixel = 1
                    Tab2.BorderSizePixel = 0
                end)

                RenderStepped:connect(function()
                    if Box2.Visible == true and Box1.Visible == false then
                        Tab1.BackgroundColor3 = Library.MainColor
                        Tab2.BackgroundColor3 = Library.BackGroundColor
                        Tab1.BorderSizePixel = 1
                        Tab2.BorderSizePixel = 0
                    else
                        Tab1.BackgroundColor3 = Library.BackGroundColor
                        Tab2.BackgroundColor3 = Library.MainColor
                        Tab1.BorderSizePixel = 0
                        Tab2.BorderSizePixel = 1
                    end
                end)
                UIListLayout1.Parent = Box1
                UIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout1.Padding = UDim.new(0, 4)

                UIListLayout2.Parent = Box2
                UIListLayout2.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout2.Padding = UDim.new(0, 4)

                TabBound1.Name = "TabBound"
                TabBound1.Parent = Box1
                TabBound1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TabBound1.BackgroundTransparency = 1.000
                TabBound1.BorderSizePixel = 0
                TabBound1.Size = UDim2.new(0, 226, 0, 18)

                TabBound2.Name = "TabBound"
                TabBound2.Parent = Box2
                TabBound2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TabBound2.BackgroundTransparency = 1.000
                TabBound2.BorderSizePixel = 0
                TabBound2.Size = UDim2.new(0, 226, 0, 18)

                local BoxComps = {}

                function BoxComps:AddBasicToggle(Info,BoxOption, CallBack)
          
                    local ToggleFrame = Instance.new("Frame")
                    local OuterToggle = Instance.new("TextButton")
                    local InnerToggle = Instance.new("TextButton")
                    local ToggleName = Instance.new("TextLabel")
                    local ToggleBounds = Instance.new('TextButton')
                    local ToggleCCBounds = Instance.new('Frame') 
                    local UIListLayout = Instance.new("UIListLayout")

                    ToggleFrame.Name = "ToggleFrame"
                    if BoxOption == 'Box1' then
                        ToggleFrame.Parent = Box1
                    elseif BoxOption == 'Box2' then
                        ToggleFrame.Parent = Box2
                    end
                    ToggleFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleFrame.BackgroundTransparency = 1.000
                    ToggleFrame.Position = UDim2.new(0, 0, 0, 0)
                    ToggleFrame.Size = UDim2.new(0, 226, 0, 15)
                    ToggleFrame.ZIndex = 1
                    
                    ToggleCCBounds.Name = "ToggleCCBounds"
                    ToggleCCBounds.Parent = ToggleFrame
                    ToggleCCBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleCCBounds.BackgroundTransparency = 1.000
                    ToggleCCBounds.Position = UDim2.new(0, 158, 0, 1)
                    ToggleCCBounds.Size = UDim2.new(0, 62, 0, 13)
                    ToggleCCBounds.ZIndex = 1

                    UIListLayout.Parent = ToggleCCBounds
                    UIListLayout.FillDirection = Enum.FillDirection.Horizontal
                    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
                    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
                    UIListLayout.Padding = UDim.new(0, 6)

                    OuterToggle.Name = "OuterToggle"
                    OuterToggle.Parent = ToggleFrame
                    OuterToggle.BackgroundColor3 = Library.BackGroundColor
                    OuterToggle.BorderColor3 = Library.Black
                    OuterToggle.BorderSizePixel = 1
                    OuterToggle.Position = UDim2.new(0, 5, 0, 0)
                    OuterToggle.Size = UDim2.new(0, 13, 0, 13)
                    OuterToggle.Font = Enum.Font.SourceSans
                    OuterToggle.Text = ""
                    OuterToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
                    OuterToggle.TextSize = 14.000
                    OuterToggle.AutoButtonColor = false

                    InnerToggle.Name = "InnerToggle"
                    InnerToggle.Parent = OuterToggle
                    InnerToggle.BackgroundColor3 = Library.MainColor
                    InnerToggle.BorderColor3 = Library.OutLineColor
                    InnerToggle.BorderSizePixel = 1
                    InnerToggle.BorderMode = Enum.BorderMode.Inset
                    InnerToggle.Size = UDim2.new(1, 0, 1, 0)
                    InnerToggle.Position = UDim2.new(0, 0, 0, 0)
                    InnerToggle.Font = Enum.Font.SourceSans
                    InnerToggle.Text = ""
                    InnerToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
                    InnerToggle.TextSize = 14.000
                    InnerToggle.AutoButtonColor = false

                    ToggleName.Name = "ToggleName"
                    ToggleName.Parent = ToggleFrame
                    ToggleName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    ToggleName.BackgroundTransparency = 1.000
                    ToggleName.Position = UDim2.new(0, 16, 0, -1)
                    ToggleName.Size = UDim2.new(0, 130, 0, 15)
                    ToggleName.Font = Enum.Font.Code
                    ToggleName.Text = " "..Info.Name
                    RenderStepped:connect(function()
                        ToggleName.TextColor3 = Library.TextColor
                    end)
                    ToggleName.TextSize = 14.000
                    ToggleName.TextStrokeTransparency = 0.000
                    ToggleName.TextXAlignment = Enum.TextXAlignment.Left

                    ToggleBounds.Name = 'ToggleBounds'
                    ToggleBounds.Parent = ToggleName
                    ToggleBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleBounds.BackgroundTransparency = 1
                    ToggleBounds.BorderSizePixel = 0
                    ToggleBounds.Size = UDim2.new(0, 130, 0, 16)
                    ToggleBounds.Position = UDim2.new(0, 12, 0, -1)
                    ToggleBounds.Text = ''

                    local MouseInToggle = false

                    OuterToggle.MouseEnter:Connect(function()
                        MouseInToggle = true
                        while MouseInToggle == true do
                            if Library.RainbowAccent == true then
                                OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                            else
                                OuterToggle.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)
                    ToggleBounds.MouseEnter:Connect(function()
                        MouseInToggle = true
                        while MouseInToggle == true do
                            if Library.RainbowAccent == true then
                                OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                            else
                                OuterToggle.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    OuterToggle.MouseLeave:Connect(function()
                        MouseInToggle = false
                        OuterToggle.BorderColor3 = Library.Black
                    end)
                    ToggleBounds.MouseLeave:Connect(function()
                        MouseInToggle = false
                        OuterToggle.BorderColor3 = Library.Black
                    end)

                    local Toggle = false
            
                    ToggleBounds.MouseButton1Click:Connect(function()
                        Toggle = not Toggle
                        CallBack(Toggle)
                    end)

                    InnerToggle.MouseButton1Click:Connect(function()
                        Toggle = not Toggle
                        CallBack(Toggle)
                    end)

                    task.spawn(function()
                        while RenderStepped:wait() do
                            if Library.RainbowAccent == true and Toggle == true then
                                InnerToggle.BackgroundColor3 = Library.RainbowAccentColor
                                InnerToggle.BorderColor3 = GetDarkerColor(Library.RainbowAccentColor) 
                            elseif Library.RainbowAccent == false and Toggle == true then
                                InnerToggle.BackgroundColor3 = Library.AccentColor
                                InnerToggle.BorderColor3 = GetDarkerColor(Library.AccentColor) 
                            elseif Toggle == false then
                                InnerToggle.BackgroundColor3 = Library.MainColor
                                InnerToggle.BorderColor3 = Library.OutLineColor
                            end
                        end
                    end)

                    local Extras = {}
                    function Extras:AddKeyBind (Org, Type, CallBack)
                        local KeyBind = Instance.new("TextButton")
                        local KeyDisplay = Instance.new('TextLabel')

                        KeyBind.Name = "KeyBind"
                        KeyBind.Parent = ToggleFrame
                        RenderStepped:connect(function()
                            KeyBind.BackgroundColor3 = Library.MainColor
                        end)
                        KeyBind.BorderColor3 = Library.Black
                        KeyBind.Position = UDim2.new(0, 196, 0, 1)
                        KeyBind.Size = UDim2.new(0, 24, 0, 12)
                        KeyBind.Text = ' '
                        KeyBind.AutoButtonColor = false

                        KeyDisplay.Parent = KeyBind
                        KeyDisplay.BackgroundTransparency = 1
                        KeyDisplay.BorderSizePixel = 0
                        KeyDisplay.Font = Enum.Font.Roboto
                        local OrgResult 
                        local OrgInput
                        if Type == 'MouseButton1' or Type == 'MouseButton2' then 

                            local OrgInput = tostring(Org)
                            OrgResult = string.gsub(OrgInput, 'Enum.UserInputType.', '')
                                            
                            if OrgResult == 'MouseButton1' then
                                OrgResult = 'LMB'
                            elseif OrgResult == 'MouseButton2'then
                                OrgResult = 'RMB'
                            end
                        elseif Type == 'Keyboard' then
                            local OrgInput = tostring(Org)
                            OrgResult = string.gsub(OrgInput, 'Enum.KeyCode.', '')
                        end

                        KeyDisplay.Text = OrgResult
                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                        KeyDisplay.Size = UDim2.new(0, 28, 0, 12)
                        RenderStepped:connect(function()
                            KeyDisplay.TextColor3 = Library.TextColor
                        end)
                        KeyDisplay.TextSize = 11.000
                        KeyDisplay.TextStrokeTransparency = 0.000
                        KeyDisplay.TextWrapped = true
                        KeyDisplay.TextXAlignment = Enum.TextXAlignment.Center

                        -- // KeyBindSetter Function \\ --
                        local UserInputService = game:GetService('UserInputService')
                        
                        local debounce = false
                        local Wait = false
                        --Default KeyBind--

                        task.spawn(function()
                            while wait() do
                                while Wait == true do
                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '.'

                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break
                                    end

                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '. .'

                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break
                                    end

                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '. . .'
                                    
                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break

                                    end
                                end
                            end
                        end)

                        CallBack(Org)
                        
                        KeyBind.MouseButton1Click:Connect(function()
                            debounce = true
                            Wait = true
                                UserInputService.InputBegan:Connect(function(Input, Processed)
                                if debounce then
                                    if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.MouseButton2 then 
                                        Wait = false
                                        local Inputted = tostring(Input.UserInputType)
                                        local Result = string.gsub(Inputted, 'Enum.UserInputType.', '')
                                        
                                        if Result == 'MouseButton1' then
                                            Result = 'LMB'
                                        elseif Result == 'MouseButton2'then
                                            Result = 'RMB'
                                        end

                                        CallBack(Input.UserInputType)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    elseif Input.UserInputType == Enum.UserInputType.Keyboard then
                                        Wait = false
                                        local Inputted = tostring(Input.KeyCode)
                                        local Result = string.gsub(Inputted, 'Enum.KeyCode.', '')

                                        CallBack(Input.KeyCode)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    end
                                end
                            end)
                        end)

                        CallBack(Org)
                        
                        KeyBind.MouseButton1Click:Connect(function()
                            debounce = true
                            Wait = true
                                UserInputService.InputBegan:Connect(function(Input, Processed)
                                if debounce then
                                    if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.MouseButton2 then 
                                        Wait = false
                                        local Inputted = tostring(Input.UserInputType)
                                        local Result = string.gsub(Inputted, 'Enum.UserInputType.', '')
                                        
                                        if Result == 'MouseButton1' then
                                            Result = 'LMB'
                                        elseif Result == 'MouseButton2'then
                                            Result = 'RMB'
                                        end

                                        CallBack(Input.UserInputType)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    elseif Input.UserInputType == Enum.UserInputType.Keyboard then
                                        Wait = false
                                        local Inputted = tostring(Input.KeyCode)
                                        local Result = string.gsub(Inputted, 'Enum.KeyCode.', '')

                                        CallBack(Input.KeyCode)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    end
                                end
                            end)
                        end)
                    end


                    function Extras:AddColorPicker ( Org, CallBack)

                         -- // Instance Creator \\ --
                        local ColorPicker = Instance.new("TextButton")
                        local ColorPickerBox = Instance.new("Frame")
                        local ColorPickerBounds = Instance.new('Frame')
                        local Led = Instance.new("Frame")
                        local RGB = Instance.new("TextBox")
                        local Hex = Instance.new("TextBox")
                        local HueSliderBorder = Instance.new("Frame")
                        local HueSlider = Instance.new("TextButton")
                        local UIGradient = Instance.new("UIGradient")
                        local Indicator = Instance.new("Frame")
                        local GradientBox = Instance.new("ImageButton")
                        local GradientIndicator = Instance.new("ImageLabel")
                        -- // Conversion from Object to usable HSV code \\ --
                        local OrgHSV = Org:ToHSV()
                        local Hue, Sat, Val = Org:ToHSV()

                        -- // Instance Properties \\ --

                        ColorPicker.Name = "ColorPicker"
                        ColorPicker.Parent = ToggleCCBounds
                        ColorPicker.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                        ColorPicker.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                        ColorPicker.Position = UDim2.new(0, 192, 0, 1)
                        ColorPicker.Size = UDim2.new(0, 28, 0, 13)
                        ColorPicker.Font = Enum.Font.SourceSans
                        ColorPicker.Text = ""
                        ColorPicker.TextColor3 = Color3.fromRGB(0, 0, 0)
                        ColorPicker.TextSize = 14.000
                        ColorPicker.AutoButtonColor = false

                        ColorPickerBox.Name = "ColorPickerBox"
                        ColorPickerBox.Parent = PickerFolder
                        ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

                        local CPosX = ColorPicker.AbsolutePosition.X - Box.AbsolutePosition.X
                        local CPosY = ColorPicker.AbsolutePosition.Y - Box.AbsolutePosition.Y

                        ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
                        ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
                        ColorPickerBox.ZIndex = 6

                        ColorPickerBounds.Name = "ColorPickerBounds"
                        ColorPickerBounds.Parent = ToggleFrame
                        ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                        ColorPickerBounds.Transparency = 1
                        ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
                        ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
                        ColorPickerBounds.ZIndex = 6

                        Led.Name = "Led"
                        Led.Parent = ColorPickerBox
                        task.spawn(function()
                            while wait() do
                                if Library.RainbowAccent == true then
                                    Led.BackgroundColor3 = Library.RainbowAccentColor 
                                else
                                Led.BackgroundColor3 = Library.AccentColor
                                end
                            end
                        end)
                        Led.BorderSizePixel = 0
                        Led.Size = UDim2.new(0, 220, 0, 2)

                        RGB.Name = "RGB"
                        RGB.Parent = ColorPickerBox
                        RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        RGB.BorderColor3 = Color3.fromRGB(50,50,50)
                        RGB.TextColor3 = Color3.fromRGB(255,255,255)
                        RGB.Position = UDim2.new(0, 113, 0, 199)
                        RGB.Size = UDim2.new(0, 102, 0, 20)
                        RGB.Font = Enum.Font.Code
                        RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                        RGB.PlaceholderText = " RGB Color"
                        RGB.Text = " 255, 0, 0"
                        RGB.TextSize = 13.000
                        RGB.TextStrokeTransparency = 0.000
                        RGB.TextWrapped = true
                        RGB.TextXAlignment = Enum.TextXAlignment.Left

                        Hex.Name = "Hex"
                        Hex.Parent = ColorPickerBox
                        Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        Hex.BorderColor3 = Color3.fromRGB(50,50,50)
                        Hex.TextColor3 = Color3.fromRGB(255,255,255)
                        Hex.Position = UDim2.new(0, 5, 0, 199)
                        Hex.Size = UDim2.new(0, 102, 0, 20)
                        Hex.Font = Enum.Font.Code
                        Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                        Hex.PlaceholderText = " Hex Color"
                        Hex.Text = " #FF0000"
                        Hex.TextSize = 14.000
                        Hex.TextStrokeTransparency = 0.000
                        Hex.TextWrapped = true
                        Hex.TextXAlignment = Enum.TextXAlignment.Left

                        HueSliderBorder.Parent = ColorPickerBox
                        HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
                        HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        HueSliderBorder.BorderSizePixel = 1
                        HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
                        HueSliderBorder.Rotation = 90.000
                        HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

                        HueSlider.Name = "HueSlider"
                        HueSlider.Parent = ColorPickerBox
                        HueSlider.AnchorPoint = Vector2.new(0, 1)
                        HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        HueSlider.BorderSizePixel = 0
                        HueSlider.ClipsDescendants = true
                        HueSlider.Position = UDim2.new(0, 112, 0, 107)
                        HueSlider.Rotation = 90.000
                        HueSlider.Size = UDim2.new(0, 185, 0, 15)
                        HueSlider.AutoButtonColor = false
                        HueSlider.Font = Enum.Font.SourceSans
                        HueSlider.Text = ""
                        HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                        HueSlider.TextSize = 14.000

                        UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
                        UIGradient.Parent = HueSlider

                        Indicator.Name = "Indicator"
                        Indicator.Parent = HueSlider
                        Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Indicator.Position = UDim2.new(0, 0, 0, -1)
                        Indicator.Size = UDim2.new(0, 1, 0, 6)

                        GradientBox.Name = "Gradient Box"
                        GradientBox.Parent = ColorPickerBox
                        GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                        GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        GradientBox.Position = UDim2.new(0, 5, 0, 7)
                        GradientBox.Size = UDim2.new(0, 185, 0, 185)
                        GradientBox.AutoButtonColor = false
                        GradientBox.Image = "rbxassetid://4155801252"

                        GradientIndicator.Parent = GradientBox
                        GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
                        GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        GradientIndicator.BackgroundTransparency = 1.000
                        GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
                        GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
                        GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

                        -- // Default Functions \\ --
                        local PickerOn = false

                        ColorPicker.MouseButton1Click:connect(function()
                            if ColorPickerBox.Visible == true then
                                PickerOn = true
                            else
                                PickerOn = false
                            end
                            for i,v in pairs (PickerFolder:GetChildren()) do
                                if v.Name == 'ColorPickerBox' then
                                    v.Visible = false
                                end
                            end
                            for i,v in pairs (DDFolder:GetChildren()) do
                                v.Visible = false
                            end
                            if PickerOn == true then
                                ColorPickerBox.Visible = false
                            else
                                ColorPickerBox.Visible = true
                            end
                        end)

                        local MouseInPicker = false

                        ColorPickerBox.MouseLeave:connect(function()
                            MouseInPicker = false 
                        end)

                        ColorPickerBox.MouseEnter:connect(function()
                            MouseInPicker = true
                        end)

                        local MouseInPickerBox = false
                        ColorPicker.MouseLeave:connect(function()
                            MouseInPickerBox = false 
                        end)

                        ColorPicker.MouseEnter:connect(function()
                            MouseInPickerBox = true
                        end)

                        local MouseInPickerBounds = false
                        ColorPickerBounds.MouseLeave:connect(function()
                            MouseInPickerBounds = false 
                        end)

                        ColorPickerBounds.MouseEnter:connect(function()
                            MouseInPickerBounds = true
                        end)

                        task.spawn(function()
                            UIS.InputBegan:Connect(function(Input, Processed)
                                if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    ColorPickerBox.Visible = false
                                end
                            end)
                        end)

                        -- // Gradient Box Function / Sat and Val Updaters \\ --
                        local GHeld = false

                        GradientBox.MouseButton1Down:Connect(function()
                            GHeld = true
                        end)

                        UIS.InputEnded:Connect(function(Input, Processed)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                GHeld = false
                            end
                        end)

                        local Value1
                        
                        RenderStepped:Connect(function(Delta)
                            if GHeld then
                                local MousePos = UIS:GetMouseLocation()
                                local GradientPos = GradientBox.AbsolutePosition
                                local GradientSize = GradientBox.AbsoluteSize
                                
                                local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                                Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                                local Value2 = -(Value1 - 1)

                                Sat = math.clamp(Saturation, 0, 1)
                                Val = math.clamp(Value2, 0, 1)

                                Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                                RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))

                                GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1) ,0)
                            end
                            GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
                        end)

                        GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

                        -- // HueSlider Functions / Hue Updater \\ --

                        local SHeld = false

                        HueSlider.MouseButton1Down:Connect(function()
                            SHeld = true
                        end)

                        UIS.InputEnded:Connect(function(Input, Processed)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                SHeld = false
                            end
                        end)


                        RenderStepped:Connect(function(Delta)
                            if SHeld then
                                local MousePos = UIS:GetMouseLocation().Y
                                local SliderPos = HueSlider.AbsolutePosition.Y - 52
                                local SliderSize = HueSlider.AbsoluteSize.X
                                
                                local Pos = (MousePos - SliderPos) / SliderSize

                                Hue = math.clamp(Pos, 0, 1)

                                Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                                RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                            else

                            end

                            Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                                
                            if Hue == 1 then
                                Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                            end
                        end)

                        -- // Color Updater for CallBack and Color Picker Button \\ --
                        task.spawn(function()
                            while RenderStepped:wait() do
                                ColorPicker.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                                ColorPicker.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                                CallBack(Hue, Sat, Val)
                            end
                        end)



                        -- // Code to Integer Converter \\ --

                        function ToInteger (Color)
                            return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
                        end
                        
                        -- // From RGB to Hex Code Converter \\ --
                        function ToHex (Color)
                            local Red, Green, Blue = ToInteger(Color)
                            local HexChar = {
                                'A', 'B', 'C', 'D', 'E', 'F'
                            }
                            local ColorTable = {Red, Green, Blue}
                            local Result = ' #'
                        
                            for i,Code in pairs (ColorTable) do
                                local Divide = Code / 16
                                local FirstNumber = math.floor(Divide)
                                local Remainder = (Divide - FirstNumber) * 16
                                local Char
                        
                                if FirstNumber >= 10 then
                                    Char = HexChar[FirstNumber - 9]
                                else
                                    Char = FirstNumber
                                end
                        
                                if Remainder >= 10 then
                                    Char = Char..HexChar[Remainder - 9]
                                else 
                                    Char = Char..tonumber(Remainder)
                                end
                        
                                Result = Result..Char
                            end
                        
                            return tostring(Result)
                        end

                        -- // RGB to String Converter \\ --
                        function ToRGB(Color)
                            local Red, Green, Blue = ToInteger(Color)
                            local RGB = ' '..Red..', '..Green..', '..Blue
                            return tostring(RGB)
                        end

                        Hex.Text = ToHex(Org)
                        RGB.Text = ToRGB(Org)

                    end
                    return Extras
                end

                function BoxComps:AddSlider(Info, BoxOption , CallBack)

 
                    local SliderFrame = Instance.new("Frame")
                    local OuterSlider = Instance.new("TextButton")
                    local InnerSlider = Instance.new("TextButton")
                    local SliderInfo = Instance.new("TextLabel")
                    local Name = Instance.new("TextLabel")
                    local SliderBorder = Instance.new('Frame')

                    SliderFrame.Name = "SliderFrame"
                    if BoxOption == 'Box1' then
                        SliderFrame.Parent = Box1
                    elseif BoxOption == 'Box2' then
                        SliderFrame.Parent = Box2
                    end
                    SliderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderFrame.BackgroundTransparency = 1.000
                    SliderFrame.BorderSizePixel = 0
                    SliderFrame.Size = UDim2.new(0, 226, 0, 29)
                    SliderFrame.ZIndex = 2
                    SliderBorder.Parent = SliderFrame
                    SliderBorder.BackgroundColor3 = Library.MainColor
                    SliderBorder.BackgroundTransparency = 0
                    SliderBorder.BorderColor3 = Library.Black
                    SliderBorder.BorderSizePixel = 1
                    SliderBorder.Position = UDim2.new(0, 5, 0, 13)
                    SliderBorder.Size = UDim2.new(0, 216, 0, 14)

                    OuterSlider.Name = "OuterSlider"
                    OuterSlider.Parent = SliderBorder
                    RenderStepped:connect(function()
                        OuterSlider.BackgroundColor3 = Library.MainColor
                        OuterSlider.BorderColor3 = Library.OutLineColor
                    end)
                    OuterSlider.BorderMode = Enum.BorderMode.Inset
                    OuterSlider.Position = UDim2.new(0, 0, 0, 0)
                    OuterSlider.Size = UDim2.new(1, 0, 1, 0)
                    OuterSlider.Font = Enum.Font.SourceSans
                    OuterSlider.Text = ""
                    OuterSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    OuterSlider.TextSize = 14.000
                    OuterSlider.TextStrokeTransparency = 0.000
                    OuterSlider.AutoButtonColor = false

                    InnerSlider.Name = "InnerSlider"
                    InnerSlider.Parent = OuterSlider
                    task.spawn(function()
                        while wait() do
                            if Library.RainbowAccent == true then
                                InnerSlider.BackgroundColor3 = Library.RainbowAccentColor
                                InnerSlider.BorderColor3 = GetDarkerColor(Library.RainbowAccentColor)
                            else
                                InnerSlider.BackgroundColor3 = Library.AccentColor
                                InnerSlider.BorderColor3 = GetDarkerColor(Library.AccentColor)
                            end
                        end
                    end)
                    InnerSlider.BackgroundTransparency = 0
                    InnerSlider.BorderSizePixel = 1
                    InnerSlider.Position = UDim2.new(0, 0, 0, 0)
                    InnerSlider.Size = UDim2.new(0, 1, 0, 12)
                    InnerSlider.Visible = true
                    InnerSlider.Font = Enum.Font.SourceSans
                    InnerSlider.Text = ""
                    InnerSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    InnerSlider.TextSize = 14.000
                    InnerSlider.AutoButtonColor = false

                    SliderInfo.Name = "SliderInfo"
                    SliderInfo.Parent = OuterSlider
                    SliderInfo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderInfo.BackgroundTransparency = 1.000
                    SliderInfo.Position = UDim2.new(0, 73, 0, -1)
                    SliderInfo.Size = UDim2.new(0, 70, 0, 12)
                    SliderInfo.Font = Enum.Font.Code
                    SliderInfo.LineHeight = 0.950
                    SliderInfo.Text = Info.SliderName..': '..Info.SliderStartingValue..'m'
                    RenderStepped:connect(function()
                        SliderInfo.TextColor3 = Library.TextColor
                    end)
                    SliderInfo.TextSize = 13.000
                    SliderInfo.TextStrokeTransparency = 0.000

                    Name.Name = "Name"
                    Name.Parent = SliderFrame
                    Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Name.BackgroundTransparency = 1.000
                    Name.Position = UDim2.new(0, 6, 0, -4)
                    Name.Size = UDim2.new(0, 180, 0, 16)
                    Name.Font = Enum.Font.Code
                    Name.Text = Info.Name
                    RenderStepped:connect(function()
                        Name.TextColor3 = Library.TextColor
                    end)
                    Name.TextSize = 14.000
                    Name.TextStrokeTransparency = 0.000
                    Name.TextXAlignment = Enum.TextXAlignment.Left

                    local MouseInSlider = false

                    SliderBorder.MouseEnter:Connect(function()
                        MouseInSlider = true
                        while MouseInSlider == true do
                            if Library.RainbowAccent == true then
                                SliderBorder.BorderColor3 = Library.RainbowAccentColor 
                            else
                                SliderBorder.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    SliderBorder.MouseLeave:Connect(function()
                        MouseInSlider = false
                        SliderBorder.BorderColor3 = Library.Black
                    end)

                    -- Sliding Funco --

                    --Variables-------------------------------------------------
                    local UIS = game:GetService('UserInputService')
                    local OuterSlider = OuterSlider
                    local InnerSlider = InnerSlider
                    local SliderInfo = SliderInfo
                    local player = game.Players.LocalPlayer
                    local RUS = game:GetService('RunService')
                    local Value
                    SliderInfo.Text = Info.SliderName..': '..Info.SliderStartingValue..Info.Unit
                    --Properties------------------------------------------
                    local Held = false                                                    -- Variable for if you are holding down the slider, holds information that the script would need.
                    local factor = Info.Factor                                                 --Step is the factor
                    
                    --Default Settings--------------------------------------------
                    if Info.SliderStartingValue == 0 then
                        InnerSlider.Size = UDim2.new(Info.SliderStartingValue * factor, 1, InnerSlider.Size.Y.Scale, InnerSlider.Size.Y.Offset)
                    else
                        InnerSlider.Size = UDim2.new(Info.SliderStartingValue * factor, 0, InnerSlider.Size.Y.Scale, InnerSlider.Size.Y.Offset)
                    end
                    --Script------------------------------------------------------
                    local function Round(number, factor)                            
                        if factor == 0 then                                               -- IF there is no factor then it just returns the % that the innerslider covers              
                            return number        
                        end
                        return math.floor(number/factor+0.5) * factor                     -- Returns the sum of this to be the value of Pos, would now be an increment of 'factor'  e.g. only goes up in 0.01 by rounding down anything that isnt an increment/factor of 0.01 to an increment/factor of 0.01.  
                    end
                    
                    local function rounding(Num)
                        return math.floor(Num * 10 ^ Info.Round) / 10 ^ Info.Round                 -- Round's number is the amount of decimal place it rounds to, so if Round = 1 then it would round it down to 1 decimal place.
                    end
                    
                    OuterSlider.MouseButton1Down:Connect(function()                       -- When you click and are holding down the slider with LMB
                        Held = true                                                       -- Makes held variable true
                    end)
                    InnerSlider.MouseButton1Down:Connect(function()
                        Held = true
                    end)
                    UIS.InputEnded:Connect(function(Input, Processed)                     -- When you stop holding down the slider with LMB
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Held = false                                                  -- Makes held variable false
                        end
                    end)
                    
                    RUS.RenderStepped:Connect(function(delta)                            				  -- An event that fires prior to the frame being rendered
                        if Held then                                                     				  -- If the slider is being held then
                            local MousePos = UIS:GetMouseLocation().X                  				      -- gets the X value of where the Mouse is at on the screen
                            local ISPos = InnerSlider.Position                              		      -- ISPos is the InnerSlider's Position
                            local ISSize = InnerSlider.Size                                               -- ISSize is the InnerSlider's Size
                            local SliderPos = OuterSlider.AbsolutePosition.X                  				  -- Gets the X value of the Slider's Position
                            local SliderSize = OuterSlider.AbsoluteSize.X                                      -- Gets the X value of the Slider's Size
                            local Pos = Round((MousePos-SliderPos)/SliderSize, factor)                    -- '(MousePos-SliderPos)/SliderSize is the % of the slider that the inner slider covers. 1 is 100%, 0 is 0%. (With mouse it'd be the % of the way to the end of the slider),
                                                                                                        -- 'Round' sends the values to be rounded in a function, where Pos would be the value that the function returns
                            local Percentage = math.clamp(Pos,0,1)                                        -- For math.clamp, The first argument is the value you want to clamp, the 2nd is the minimum(smallest) value that the clamped value can be, 3rd is the maximum(biggest) value it can be
                    
                            if Percentage <= 0 then
                                InnerSlider.Size = UDim2.new(Percentage, 1, ISSize.Y.Scale, ISSize.Y.Offset)
                            elseif Percentage == 1 then
                                InnerSlider.Size = UDim2.new(Percentage, 2, ISSize.Y.Scale, ISSize.Y.Offset)
                            else
                                InnerSlider.Size = UDim2.new(Percentage, 0, ISSize.Y.Scale, ISSize.Y.Offset)  -- Makes the InnerSlider's X Scale according to the % it should cover
                            end

                            SliderInfo.Text = Info.SliderName..': '..rounding(Percentage * Info.SliderSize)..Info.Unit                                    -- Makes SliderInfo the % that the innerslider covers
                            Value =  math.floor(Percentage * Info.ValueSize)
                            CallBack(Value)
                        end 
                    end)
                end

                function BoxComps:AddDropDown (Info,BoxOption, Drops, CallBack)

                    local DropDown = Instance.new("Frame")
                    local DropDownBounds = Instance.new('Frame')
                    local DropDownMain = Instance.new("TextButton")
                    local Arrow = Instance.new("ImageLabel")
                    local DDHolder = Instance.new("Frame")
                    local UIListLayout = Instance.new("UIListLayout")
                    local DropDownName = Instance.new("TextLabel")
                    local DropDownBorder = Instance.new('Frame')

                    local Selected = Info.Org
                    local Dropped = false
                    local MouseInDropDown = false
                    local BoxParent 
                    if BoxOption == 'Box1' then
                        BoxParent = Box1
                    elseif BoxOption == 'Box2' then
                        BoxParent = Box2
                    end

                    DropDown.Name = "DropDown"
                    DropDown.Parent = BoxParent
                    DropDown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDown.BackgroundTransparency = 1.000
                    DropDown.BorderSizePixel = 0
                    DropDown.Size = UDim2.new(0, 226, 0, 36)
                    DropDown.ZIndex = 5

                    DropDownName.Name = "DropDownName"
                    DropDownName.Parent = DropDown
                    DropDownName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDownName.BackgroundTransparency = 1.000
                    DropDownName.Position = UDim2.new(0, 6, 0, -4)
                    DropDownName.Size = UDim2.new(0, 180, 0, 16)
                    DropDownName.Font = Enum.Font.Code
                    DropDownName.Text = Info.Name
                    RenderStepped:connect(function()
                        DropDownName.TextColor3 = Library.TextColor
                    end)
                    DropDownName.TextSize = 14.000
                    DropDownName.TextStrokeTransparency = 0.000
                    DropDownName.TextXAlignment = Enum.TextXAlignment.Left

                    DropDownBounds.Name = "DropDownBounds"
                    DropDownBounds.Parent = DropDown
                    DropDownBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    DropDownBounds.BorderColor3 = Library.Black
                    DropDownBounds.BorderSizePixel = 1
                    DropDownBounds.Position = UDim2.new(0, 5, 0, 13)
                    DropDownBounds.Size = UDim2.new(0, 216, 0, 20)

                    DropDownMain.Name = "DropDownMain"
                    DropDownMain.Parent = DropDownBounds
                    RenderStepped:connect(function()
                        DropDownMain.BackgroundColor3 = Library.MainColor
                        DropDownMain.BorderColor3 = Library.OutLineColor
                    end)
                    DropDownMain.BorderMode = Enum.BorderMode.Inset
                    DropDownMain.Position = UDim2.new(0, 0, 0, 0)
                    DropDownMain.Size = UDim2.new(1, 0, 1, 0)
                    DropDownMain.Font = Enum.Font.Code
                    DropDownMain.Text = tostring(Info.Org)
                    RenderStepped:connect(function()
                        DropDownMain.TextColor3 = Library.TextColor
                    end)
                    DropDownMain.TextSize = 14.000
                    DropDownMain.TextStrokeTransparency = 0.000
                    DropDownMain.TextXAlignment = Enum.TextXAlignment.Left
                    DropDownMain.AutoButtonColor = false

                    Arrow.Name = "Arrow"
                    Arrow.Parent = DropDownMain
                    Arrow.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    Arrow.BackgroundTransparency = 1.000
                    Arrow.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    Arrow.Position = UDim2.new(0, 197, 0, 2)
                    Arrow.Size = UDim2.new(0, 15, 0, 15)
                    Arrow.Image = "http://www.roblox.com/asset/?id=9482956116"

                    local DDMPosX = DropDownMain.AbsolutePosition.X - Box.AbsolutePosition.X
                    local DDMPosY = DropDownMain.AbsolutePosition.Y - Box.AbsolutePosition.Y

                    DropDownBorder.Parent = DDFolder
                    DropDownBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDownBorder.BackgroundTransparency = 1.000
                    DropDownBorder.BorderSizePixel = 0
                    DropDownBorder.Size = UDim2.new(0, 216, 0, 20)
                    DropDownBorder.Position = UDim2.new(0, DDMPosX, 0, DDMPosY)
                    DropDownBorder.AutomaticSize = Enum.AutomaticSize.XY

                    DDHolder.Name = "DDHolder"
                    DDHolder.Parent = DropDownBorder
                    RenderStepped:connect(function()
                        DDHolder.BackgroundColor3 = Library.MainColor
                    end)
                    DDHolder.BorderColor3 = Library.Black

                    DDHolder.Position = UDim2.new(0, 1, 0, 22)
                    DDHolder.Size = UDim2.new(0, 0, 0, 0)
                    DDHolder.Visible = false
                    DDHolder.AutomaticSize = Enum.AutomaticSize.XY

                    UIListLayout.Parent = DDHolder
                    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    UIListLayout.Padding = UDim.new(0, 1)

                    for i,v in pairs (Drops) do
                        local Drop = Instance.new("TextButton")
                        local MouseInDrop = false
                        Drop.Name = "Drop"
                        Drop.Parent = DDHolder
                        RenderStepped:connect(function()
                            Drop.BackgroundColor3 = Library.MainColor
                        end)
                        Drop.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        Drop.Position = UDim2.new(0, 0, 0, -1)
                        Drop.Size = UDim2.new(0, 214, 0, 19)
                        Drop.Selected = true
                        Drop.Font = Enum.Font.Code
                        Drop.Text = ' '..tostring(v)
                        Drop.TextColor3 = Library.TextColor
                        Drop.TextSize = 14.000
                        Drop.TextStrokeTransparency = 0.000
                        Drop.TextXAlignment = Enum.TextXAlignment.Left
                        Drop.AutoButtonColor = false

                        Drop.MouseButton1Click:connect(function()
                            Selected = tostring(v)
                            CallBack(Selected)
                        end)

                        task.spawn(function()
                            while RenderStepped:wait() do
                                if Selected == tostring(v) and Library.RainbowAccent then
                                    Drop.TextColor3 = Library.RainbowAccentColor
                                elseif Selected == tostring(v) and not Library.RainbowAccent then
                                    Drop.TextColor3 = Library.AccentColor
                                elseif Selected ~= tostring(v) then
                                    Drop.TextColor3 = Library.TextColor
                                end
                            end
                        end)

                        Drop.MouseEnter:connect(function()
                            MouseInDrop = true
                            while MouseInDrop do
                                if Library.RainbowAccent then
                                    Drop.BorderColor3 = Library.RainbowAccentColor
                                elseif not Library.RainbowAccent then
                                    Drop.BorderColor3 = Library.AccentColor
                                end
                                wait()
                            end
                        end)

                        Drop.MouseLeave:connect(function()
                            MouseInDrop = false
                        end)

                        RenderStepped:connect(function()
                            if MouseInDrop == false then
                                Drop.BorderColor3 = Library.OutLineColor
                            end
                        end)
                    end

                    DropDownBounds.MouseEnter:connect(function()
                        MouseInDropDown = true
                        while MouseInDropDown do
                            if Library.RainbowAccent then
                                DropDownBounds.BorderColor3 = Library.RainbowAccentColor
                            elseif not Library.RainbowAccent then
                                DropDownBounds.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    DropDownBounds.MouseLeave:connect(function()
                        MouseInDropDown = false
                        DropDownBounds.BorderColor3 = Library.Black
                    end)

                    for i,v in pairs (DDHolder:GetChildren()) do
                        if v.Name == "Drop" then
                        v.Visible = true
                        end
                    end

                    DropDownMain.MouseButton1Click:Connect(function()
                        
                        if Dropped == false then
                            for i,v in pairs (DDFolder:GetChildren()) do
                                v.Visible = false
                            end
                            for i,v in pairs (PickerFolder:GetChildren()) do
                                v.Visible = false
                            end
                            DDHolder.Visible = true
                            DropDownBorder.Visible = true
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9489839300'
                            Arrow.Position = UDim2.new(0, 197, 0, 4)
                            Dropped = true
                            DDHolder.ZIndex = 8
                            DropDownBorder.ZIndex = 8

                        elseif Dropped == true then
                            DDHolder.Visible = false
                            DropDownBorder.Visible = false
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9482956116'
                            Arrow.Position = UDim2.new(0, 197, 0, 2)
                            Dropped = false
                            DDHolder.ZIndex = 1
                            DropDownBorder.ZIndex = 1
                        end
                        
                    end)

                    local MouseInDropBounds = false
                    DropDownBorder.MouseLeave:connect(function()
                        MouseInDropBounds = false 
                    end)
        
                    DropDownBorder.MouseEnter:connect(function()
                        MouseInDropBounds = true
                    end)
        
                    task.spawn(function()
                        UIS.InputBegan:Connect(function(Input, Processed)
                            if not MouseInDropBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 and Dropped then
                                if DropDownBorder.Visible and not MouseInDropDown then 
                                    DropDownBorder.Visible = false
                                end
                            end
                        end)
                    end)

                    RenderStepped:connect(function()
                        if DropDownBorder.Visible == true then 
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9489839300'
                            Arrow.Position = UDim2.new(0, 197, 0, 4)
                            Dropped = true
                        else
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9482956116'
                            Arrow.Position = UDim2.new(0, 197, 0, 2)
                            Dropped = false
                        end
                    end)

                    task.spawn(function() 
                        while RenderStepped:wait() do
                            DropDownMain.Text = ' '..tostring(Selected)
                            CallBack(tostring(Selected))
                        end
                    end)

                end

                function BoxComps:AddNamewColorPicker (Info,BoxOption, Org, CallBack)
                    local CCBG = Instance.new("Frame")
                    local CPN = Instance.new("TextLabel")
                    local CPB = Instance.new("TextButton")

                    local ColorPickerBox = Instance.new("Frame")
                    local ColorPickerBounds = Instance.new('Frame')
                    local Led = Instance.new("Frame")
                    local RGB = Instance.new("TextBox")
                    local Hex = Instance.new("TextBox")
                    local HueSliderBorder = Instance.new("Frame")
                    local HueSlider = Instance.new("TextButton")
                    local UIGradient = Instance.new("UIGradient")
                    local Indicator = Instance.new("Frame")
                    local GradientBox = Instance.new("ImageButton")
                    local GradientIndicator = Instance.new("ImageLabel")
                    -- // Conversion from Object to usable HSV code \\ --

                    local OrgHSV = Org:ToHSV()
                    local Hue, Sat, Val = Org:ToHSV()

                    --Properties:

                    CCBG.Name = "CCBG"
                    if BoxOption == 'Box1' then
                        CCBG.Parent = Box1
                    elseif BoxOption == 'Box2' then
                        CCBG.Parent = Box2
                    end
                    CCBG.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    CCBG.BackgroundTransparency = 1.000
                    CCBG.Position = UDim2.new(0, 0, 0, 0)
                    CCBG.Size = UDim2.new(0, 226, 0, 17)

                    CPN.Name = "CPN"
                    CPN.Parent = CCBG
                    CPN.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
                    CPN.BackgroundTransparency = 1.000
                    CPN.BorderSizePixel = 0
                    CPN.Position = UDim2.new(0, 6, 0, -1)
                    CPN.Size = UDim2.new(0, 87, 0, 16)
                    CPN.Font = Enum.Font.Code
                    CPN.Text = Info.Name
                    RenderStepped:connect(function()
                        CPN.TextColor3 = Library.TextColor
                    end)
                    CPN.TextSize = 14.000
                    CPN.TextStrokeTransparency = 0.000
                    CPN.TextXAlignment = Enum.TextXAlignment.Left

                    CPB.Name = "CPB"
                    CPB.Parent = CCBG
                    CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                    CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                    CPB.Position = UDim2.new(0, 192, 0, 1)
                    CPB.Size = UDim2.new(0, 28, 0, 13)
                    CPB.Font = Enum.Font.SourceSans
                    CPB.Text = ""
                    CPB.TextColor3 = Color3.fromRGB(0, 0, 0)
                    CPB.TextSize = 14.000
                    CPB.AutoButtonColor = false

                    ColorPickerBox.Name = "ColorPickerBox"
                    ColorPickerBox.Parent = PickerFolder
                    ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

                    local CPosX = CPB.AbsolutePosition.X - Box.AbsolutePosition.X
                    local CPosY = CPB.AbsolutePosition.Y - Box.AbsolutePosition.Y

                    ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
                    ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
                    ColorPickerBox.ZIndex = 6

                    ColorPickerBounds.Name = "ColorPickerBounds"
                    ColorPickerBounds.Parent = CCBG
                    ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    ColorPickerBounds.Transparency = 1
                    ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
                    ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
                    ColorPickerBounds.ZIndex = 6

                    Led.Name = "Led"
                    Led.Parent = ColorPickerBox
                    task.spawn(function()
                        while wait() do
                            if Library.RainbowAccent == true then
                                Led.BackgroundColor3 = Library.RainbowAccentColor 
                            else
                            Led.BackgroundColor3 = Library.AccentColor
                            end
                        end
                    end)
                    Led.BorderSizePixel = 0
                    Led.Size = UDim2.new(0, 220, 0, 2)

                    RGB.Name = "RGB"
                    RGB.Parent = ColorPickerBox
                    RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    RGB.BorderColor3 = Color3.fromRGB(50,50,50)
                    RGB.TextColor3 = Color3.fromRGB(255,255,255)        
                    RGB.Position = UDim2.new(0, 113, 0, 199)
                    RGB.Size = UDim2.new(0, 102, 0, 20)
                    RGB.Font = Enum.Font.Code
                    RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                    RGB.PlaceholderText = " RGB Color"
                    RGB.Text = " 255, 0, 0"
                    RGB.TextSize = 13.000
                    RGB.TextStrokeTransparency = 0.000
                    RGB.TextWrapped = true
                    RGB.TextXAlignment = Enum.TextXAlignment.Left

                    Hex.Name = "Hex"
                    Hex.Parent = ColorPickerBox
                    Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    Hex.BorderColor3 = Color3.fromRGB(50,50,50)
                    Hex.TextColor3 = Color3.fromRGB(255,255,255)
                    Hex.Position = UDim2.new(0, 5, 0, 199)
                    Hex.Size = UDim2.new(0, 102, 0, 20)
                    Hex.Font = Enum.Font.Code
                    Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                    Hex.PlaceholderText = " Hex Color"
                    Hex.Text = " #FF0000"
                    Hex.TextSize = 14.000
                    Hex.TextStrokeTransparency = 0.000
                    Hex.TextWrapped = true
                    Hex.TextXAlignment = Enum.TextXAlignment.Left

                    HueSliderBorder.Parent = ColorPickerBox
                    HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
                    HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    HueSliderBorder.BorderSizePixel = 1
                    HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
                    HueSliderBorder.Rotation = 90.000
                    HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

                    HueSlider.Name = "HueSlider"
                    HueSlider.Parent = ColorPickerBox
                    HueSlider.AnchorPoint = Vector2.new(0, 1)
                    HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    HueSlider.BorderSizePixel = 0
                    HueSlider.ClipsDescendants = true
                    HueSlider.Position = UDim2.new(0, 112, 0, 107)
                    HueSlider.Rotation = 90.000
                    HueSlider.Size = UDim2.new(0, 185, 0, 15)
                    HueSlider.AutoButtonColor = false
                    HueSlider.Font = Enum.Font.SourceSans
                    HueSlider.Text = ""
                    HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    HueSlider.TextSize = 14.000

                    UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
                    UIGradient.Parent = HueSlider

                    Indicator.Name = "Indicator"
                    Indicator.Parent = HueSlider
                    Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    Indicator.Position = UDim2.new(0, 0, 0, -1)
                    Indicator.Size = UDim2.new(0, 1, 0, 6)

                    GradientBox.Name = "Gradient Box"
                    GradientBox.Parent = ColorPickerBox
                    GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                    GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    GradientBox.Position = UDim2.new(0, 5, 0, 7)
                    GradientBox.Size = UDim2.new(0, 185, 0, 185)
                    GradientBox.AutoButtonColor = false
                    GradientBox.Image = "rbxassetid://4155801252"

                    GradientIndicator.Parent = GradientBox
                    GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
                    GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    GradientIndicator.BackgroundTransparency = 1.000
                    GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
                    GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
                    GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

                    -- // Default Functions \\ --
                    local PickerOn = false

                    CPB.MouseButton1Click:connect(function()
                        if ColorPickerBox.Visible == true then
                            PickerOn = true
                        else
                            PickerOn = false
                        end
                        for i,v in pairs (PickerFolder:GetChildren()) do
                            if v.Name == 'ColorPickerBox' then
                                v.Visible = false
                            end
                        end
                        for i,v in pairs (DDFolder:GetChildren()) do
                            v.Visible = false
                        end
                        if PickerOn == true then
                            ColorPickerBox.Visible = false
                        else
                            ColorPickerBox.Visible = true
                        end
                    end)

                    local MouseInPicker = false

                    ColorPickerBox.MouseLeave:connect(function()
                        MouseInPicker = false 
                    end)

                    ColorPickerBox.MouseEnter:connect(function()
                        MouseInPicker = true
                    end)

                    local MouseInPickerBox = false
                    CPB.MouseLeave:connect(function()
                        MouseInPickerBox = false 
                    end)

                    CPB.MouseEnter:connect(function()
                        MouseInPickerBox = true
                    end)

                    local MouseInPickerBounds = false
                    ColorPickerBounds.MouseLeave:connect(function()
                        MouseInPickerBounds = false 
                    end)

                    ColorPickerBounds.MouseEnter:connect(function()
                        MouseInPickerBounds = true
                    end)

                    task.spawn(function()
                        UIS.InputBegan:Connect(function(Input, Processed)
                            if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                ColorPickerBox.Visible = false
                            end
                        end)
                    end)

                    -- // Gradient Box Function / Sat and Val Updaters \\ --
                    local GHeld = false

                    GradientBox.MouseButton1Down:Connect(function()
                        GHeld = true
                    end)

                    UIS.InputEnded:Connect(function(Input, Processed)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            GHeld = false
                        end
                    end)

                    local Value1
                        
                    RenderStepped:Connect(function(Delta)
                        if GHeld then
                            local MousePos = UIS:GetMouseLocation()
                            local GradientPos = GradientBox.AbsolutePosition
                            local GradientSize = GradientBox.AbsoluteSize
                                
                            local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                            Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                            local Value2 = -(Value1 - 1)

                            Sat = math.clamp(Saturation, 0, 1)
                            Val = math.clamp(Value2, 0, 1)

                            Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                            RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                            GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                        end
                        GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
                    end)

                    GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)
                    -- // HueSlider Functions / Hue Updater \\ --

                    local SHeld = false

                    HueSlider.MouseButton1Down:Connect(function()
                        SHeld = true
                    end)

                    UIS.InputEnded:Connect(function(Input, Processed)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            SHeld = false
                        end
                    end)


                    RenderStepped:Connect(function(Delta)
                        if SHeld then
                            local MousePos = UIS:GetMouseLocation().Y
                            local SliderPos = HueSlider.AbsolutePosition.Y - 52
                            local SliderSize = HueSlider.AbsoluteSize.X
                                
                            local Pos = (MousePos - SliderPos) / SliderSize

                            Hue = math.clamp(Pos, 0, 1)

                            Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                            RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                        else

                        end

                        Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                                
                        if Hue == 1 then
                            Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                        end
                    end)

                    -- // Color Updater for CallBack and Color Picker Button \\ --
                    task.spawn(function()
                        while RenderStepped:wait() do
                            CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                            CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                            CallBack(Hue, Sat, Val)
                        end
                    end)



                    -- // Code to Integer Converter \\ --

                    function ToInteger (Color)
                        return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
                    end
                        
                    -- // From RGB to Hex Code Converter \\ --
                    function ToHex (Color)
                        local Red, Green, Blue = ToInteger(Color)
                        local HexChar = {
                            'A', 'B', 'C', 'D', 'E', 'F'
                        }
                        local ColorTable = {Red, Green, Blue}
                        local Result = ' #'
                        
                        for i,Code in pairs (ColorTable) do
                            local Divide = Code / 16
                            local FirstNumber = math.floor(Divide)
                            local Remainder = (Divide - FirstNumber) * 16
                            local Char
                        
                            if FirstNumber >= 10 then
                                Char = HexChar[FirstNumber - 9]
                            else
                                Char = FirstNumber
                            end
                        
                            if Remainder >= 10 then
                                Char = Char..HexChar[Remainder - 9]
                            else 
                                Char = Char..tonumber(Remainder)
                            end
                        
                            Result = Result..Char
                        end
                        
                        return tostring(Result)
                    end

                    -- // RGB to String Converter \\ --
                    function ToRGB(Color)
                        local Red, Green, Blue = ToInteger(Color)
                        local RGB = ' '..Red..', '..Green..', '..Blue
                        return tostring(RGB)
                    end

                    Hex.Text = ToHex(Org)
                    RGB.Text = ToRGB(Org)
                end
                return BoxComps  
            end
        

            local LeftGroupBox = Instance.new("Frame")
            local UIListLayout = Instance.new("UIListLayout")

            LeftGroupBox.Name = "LeftGroupBox"
            LeftGroupBox.Parent = Box
            LeftGroupBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            LeftGroupBox.BackgroundTransparency = 1.000
            LeftGroupBox.ClipsDescendants = true
            LeftGroupBox.Position = UDim2.new(0, 10, 0, 10)
            LeftGroupBox.Size = UDim2.new(0, 228, 0, 478)

            UIListLayout.Parent = LeftGroupBox
            UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.Padding = UDim.new(0, 11)


            function Boxes:AddLeftBox (Info)

                local LeftBox = Instance.new("Frame")
                local Led = Instance.new("Frame")
                local UIListLayout = Instance.new("UIListLayout")
                local BoxTitle = Instance.new('TextLabel')
                LeftBox.Name = "LeftBox"
                LeftBox.Parent = LeftGroupBox
                RenderStepped:connect(function()
                    LeftBox.BackgroundColor3 = Library.BackGroundColor
                    LeftBox.BorderColor3 = Library.OutLineColor
                end)
                LeftBox.ClipsDescendants = false
                LeftBox.BackgroundTransparency = 0.000
                LeftBox.Visible = true
                LeftBox.Size = UDim2.new(0, 226, 0, Info.CustomSize.Y.Offset)

                Led.Name = "Led"
                Led.Parent = LeftBox
                task.spawn(function()
                    while wait() do
                        if Library.RainbowAccent == true then
                            Led.BackgroundColor3 = Library.RainbowAccentColor 
                        else
                        Led.BackgroundColor3 = Library.AccentColor
                        end
                    end
                end)
                Led.BorderSizePixel = 0
                Led.Position = UDim2.new(0, 0, 0, 0)
                Led.Size = UDim2.new(0, 226, 0, 2)

                UIListLayout.Parent = LeftBox
                UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout.Padding = UDim.new(0, 4)

                BoxTitle.Name = "BoxTitle"
                BoxTitle.Parent = LeftBox
                BoxTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                BoxTitle.BackgroundTransparency = 1.000
                BoxTitle.Position = UDim2.new(0, 0, 0, 0)
                BoxTitle.Size = UDim2.new(0, 190, 0, 16)
                BoxTitle.Font = Enum.Font.Code
                BoxTitle.Text = " "..Info.BoxName
                RenderStepped:connect(function()
                    BoxTitle.TextColor3 = Library.TextColor
                end)
                BoxTitle.TextSize = 14.000
                BoxTitle.TextStrokeTransparency = 0.000
                BoxTitle.TextXAlignment = Enum.TextXAlignment.Left

                local BoxComps = {}

                function BoxComps:AddBasicToggle(Info, CallBack)
          
                    local ToggleFrame = Instance.new("Frame")
                    local OuterToggle = Instance.new("TextButton")
                    local InnerToggle = Instance.new("TextButton")
                    local ToggleName = Instance.new("TextLabel")
                    local ToggleBounds = Instance.new('TextButton')
                    local ToggleCCBounds = Instance.new('Frame') 
                    local UIListLayout = Instance.new("UIListLayout")

                    ToggleFrame.Name = "ToggleFrame"
                    ToggleFrame.Parent = LeftBox
                    ToggleFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleFrame.BackgroundTransparency = 1.000
                    ToggleFrame.Position = UDim2.new(0, 0, 0, 0)
                    ToggleFrame.Size = UDim2.new(0, 226, 0, 15)
                    ToggleFrame.ZIndex = 1

                    ToggleCCBounds.Name = "ToggleCCBounds"
                    ToggleCCBounds.Parent = ToggleFrame
                    ToggleCCBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleCCBounds.BackgroundTransparency = 1.000
                    ToggleCCBounds.Position = UDim2.new(0, 158, 0, 1)
                    ToggleCCBounds.Size = UDim2.new(0, 62, 0, 13)
                    ToggleCCBounds.ZIndex = 1

                    UIListLayout.Parent = ToggleCCBounds
                    UIListLayout.FillDirection = Enum.FillDirection.Horizontal
                    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
                    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
                    UIListLayout.Padding = UDim.new(0, 6)
                    
                    OuterToggle.Name = "OuterToggle"
                    OuterToggle.Parent = ToggleFrame
                    OuterToggle.BackgroundColor3 = Library.BackGroundColor
                    OuterToggle.BorderColor3 = Library.Black
                    OuterToggle.BorderSizePixel = 1
                    OuterToggle.Position = UDim2.new(0, 5, 0, 0)
                    OuterToggle.Size = UDim2.new(0, 13, 0, 13)
                    OuterToggle.Font = Enum.Font.SourceSans
                    OuterToggle.Text = ""
                    OuterToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
                    OuterToggle.TextSize = 14.000
                    OuterToggle.AutoButtonColor = false

                    InnerToggle.Name = "InnerToggle"
                    InnerToggle.Parent = OuterToggle
                    InnerToggle.BackgroundColor3 = Library.MainColor
                    InnerToggle.BorderColor3 = Library.OutLineColor
                    InnerToggle.BorderSizePixel = 1
                    InnerToggle.BorderMode = Enum.BorderMode.Inset
                    InnerToggle.Size = UDim2.new(1, 0, 1, 0)
                    InnerToggle.Position = UDim2.new(0, 0, 0, 0)
                    InnerToggle.Font = Enum.Font.SourceSans
                    InnerToggle.Text = ""
                    InnerToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
                    InnerToggle.TextSize = 14.000
                    InnerToggle.AutoButtonColor = false

                    ToggleName.Name = "ToggleName"
                    ToggleName.Parent = ToggleFrame
                    ToggleName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    ToggleName.BackgroundTransparency = 1.000
                    ToggleName.Position = UDim2.new(0, 16, 0, -1)
                    ToggleName.Size = UDim2.new(0, 130, 0, 15)
                    ToggleName.Font = Enum.Font.Code
                    ToggleName.Text = " "..Info.Name
                    RenderStepped:connect(function()
                        ToggleName.TextColor3 = Library.TextColor
                    end)
                    ToggleName.TextSize = 14.000
                    ToggleName.TextStrokeTransparency = 0.000
                    ToggleName.TextXAlignment = Enum.TextXAlignment.Left

                    ToggleBounds.Name = 'ToggleBounds'
                    ToggleBounds.Parent = ToggleName
                    ToggleBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleBounds.BackgroundTransparency = 1
                    ToggleBounds.BorderSizePixel = 0
                    ToggleBounds.Size = UDim2.new(0, 130, 0, 16)
                    ToggleBounds.Position = UDim2.new(0, 12, 0, -1)
                    ToggleBounds.Text = ''

                    local MouseInToggle = false

                    OuterToggle.MouseEnter:Connect(function()
                        MouseInToggle = true
                        while MouseInToggle == true do
                            if Library.RainbowAccent == true then
                                OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                            else
                                OuterToggle.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)
                    ToggleBounds.MouseEnter:Connect(function()
                        MouseInToggle = true
                        while MouseInToggle == true do
                            if Library.RainbowAccent == true then
                                OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                            else
                                OuterToggle.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    OuterToggle.MouseLeave:Connect(function()
                        MouseInToggle = false
                        OuterToggle.BorderColor3 = Library.Black
                    end)
                    ToggleBounds.MouseLeave:Connect(function()
                        MouseInToggle = false
                        OuterToggle.BorderColor3 = Library.Black
                    end)

                    local Toggle = false

                    ToggleBounds.MouseButton1Click:Connect(function()
                        Toggle = not Toggle
                        CallBack(Toggle)
                    end)

                    InnerToggle.MouseButton1Click:Connect(function()
                        Toggle = not Toggle
                        CallBack(Toggle)
                    end)

                    task.spawn(function()
                        while RenderStepped:wait() do
                            if Library.RainbowAccent == true and Toggle == true then
                                InnerToggle.BackgroundColor3 = Library.RainbowAccentColor
                                InnerToggle.BorderColor3 = GetDarkerColor(Library.RainbowAccentColor) 
                            elseif Library.RainbowAccent == false and Toggle == true then
                                InnerToggle.BackgroundColor3 = Library.AccentColor
                                InnerToggle.BorderColor3 = GetDarkerColor(Library.AccentColor) 
                            elseif Toggle == false then
                                InnerToggle.BackgroundColor3 = Library.MainColor
                                InnerToggle.BorderColor3 = Library.OutLineColor
                            end
                        end
                    end)

                    local Extras = {}
                    function Extras:AddKeyBind (Org, Type, CallBack)
                        local KeyBind = Instance.new("TextButton")
                        local KeyDisplay = Instance.new('TextLabel')

                        KeyBind.Name = "KeyBind"
                        KeyBind.Parent = ToggleFrame
                        RenderStepped:connect(function()
                            KeyBind.BackgroundColor3 = Library.MainColor
                        end)
                        KeyBind.BorderColor3 = Library.Black
                        KeyBind.Position = UDim2.new(0, 196, 0, 1)
                        KeyBind.Size = UDim2.new(0, 24, 0, 12)
                        KeyBind.Text = ' '
                        KeyBind.AutoButtonColor = false

                        KeyDisplay.Parent = KeyBind
                        KeyDisplay.BackgroundTransparency = 1
                        KeyDisplay.BorderSizePixel = 0
                        KeyDisplay.Font = Enum.Font.Roboto
                        local OrgResult 
                        local OrgInput
                        if Type == 'MouseButton1' or Type == 'MouseButton2' then 

                            local OrgInput = tostring(Org)
                            OrgResult = string.gsub(OrgInput, 'Enum.UserInputType.', '')
                                            
                            if OrgResult == 'MouseButton1' then
                                OrgResult = 'LMB'
                            elseif OrgResult == 'MouseButton2'then
                                OrgResult = 'RMB'
                            end
                        elseif Type == 'Keyboard' then
                            local OrgInput = tostring(Org)
                            OrgResult = string.gsub(OrgInput, 'Enum.KeyCode.', '')
                        end

                        KeyDisplay.Text = OrgResult
                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                        KeyDisplay.Size = UDim2.new(0, 28, 0, 12)
                        RenderStepped:connect(function()
                            KeyDisplay.TextColor3 = Library.TextColor
                        end)
                        KeyDisplay.TextSize = 11.000
                        KeyDisplay.TextStrokeTransparency = 0.000
                        KeyDisplay.TextWrapped = true
                        KeyDisplay.TextXAlignment = Enum.TextXAlignment.Center

                        -- // KeyBindSetter Function \\ --
                        local UserInputService = game:GetService('UserInputService')
                        
                        local debounce = false
                        local Wait = false
                        --Default KeyBind--

                        task.spawn(function()
                            while wait() do
                                while Wait == true do
                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '.'

                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break
                                    end

                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '. .'

                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break
                                    end

                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '. . .'
                                    
                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break

                                    end
                                end
                            end
                        end)

                        CallBack(Org)
                        
                        KeyBind.MouseButton1Click:Connect(function()
                            debounce = true
                            Wait = true
                                UserInputService.InputBegan:Connect(function(Input, Processed)
                                if debounce then
                                    if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.MouseButton2 then 
                                        Wait = false
                                        local Inputted = tostring(Input.UserInputType)
                                        local Result = string.gsub(Inputted, 'Enum.UserInputType.', '')
                                        
                                        if Result == 'MouseButton1' then
                                            Result = 'LMB'
                                        elseif Result == 'MouseButton2'then
                                            Result = 'RMB'
                                        end

                                        CallBack(Input.UserInputType)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    elseif Input.UserInputType == Enum.UserInputType.Keyboard then
                                        Wait = false
                                        local Inputted = tostring(Input.KeyCode)
                                        local Result = string.gsub(Inputted, 'Enum.KeyCode.', '')

                                        CallBack(Input.KeyCode)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    end
                                end
                            end)
                        end)
                    end


                    function Extras:AddColorPicker ( Org, CallBack)

                         -- // Instance Creator \\ --
                        local ColorPicker = Instance.new("TextButton")
                        local ColorPickerBox = Instance.new("Frame")
                        local ColorPickerBounds = Instance.new('Frame')
                        local Led = Instance.new("Frame")
                        local RGB = Instance.new("TextBox")
                        local Hex = Instance.new("TextBox")
                        local HueSliderBorder = Instance.new("Frame")
                        local HueSlider = Instance.new("TextButton")
                        local UIGradient = Instance.new("UIGradient")
                        local Indicator = Instance.new("Frame")
                        local GradientBox = Instance.new("ImageButton")
                        local GradientIndicator = Instance.new("ImageLabel")
                        -- // Conversion from Object to usable HSV code \\ --
                        local OrgHSV = Org:ToHSV()
                        local Hue, Sat, Val = Org:ToHSV()

                        -- // Instance Properties \\ --

                        ColorPicker.Name = "ColorPicker"
                        ColorPicker.Parent = ToggleCCBounds
                        ColorPicker.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                        ColorPicker.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                        ColorPicker.Position = UDim2.new(0, 192, 0, 1)
                        ColorPicker.Size = UDim2.new(0, 28, 0, 13)
                        ColorPicker.Font = Enum.Font.SourceSans
                        ColorPicker.Text = ""
                        ColorPicker.TextColor3 = Color3.fromRGB(0, 0, 0)
                        ColorPicker.TextSize = 14.000
                        ColorPicker.AutoButtonColor = false

                        ColorPickerBox.Name = "ColorPickerBox"
                        ColorPickerBox.Parent = PickerFolder
                        ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

                        local CPosX = ColorPicker.AbsolutePosition.X - Box.AbsolutePosition.X
                        local CPosY = ColorPicker.AbsolutePosition.Y - Box.AbsolutePosition.Y

                        ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
                        ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
                        ColorPickerBox.ZIndex = 6

                        ColorPickerBounds.Name = "ColorPickerBounds"
                        ColorPickerBounds.Parent = ToggleFrame
                        ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                        ColorPickerBounds.Transparency = 1
                        ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
                        ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
                        ColorPickerBounds.ZIndex = 6

                        Led.Name = "Led"
                        Led.Parent = ColorPickerBox
                        task.spawn(function()
                            while wait() do
                                if Library.RainbowAccent == true then
                                    Led.BackgroundColor3 = Library.RainbowAccentColor 
                                else
                                Led.BackgroundColor3 = Library.AccentColor
                                end
                            end
                        end)
                        Led.BorderSizePixel = 0
                        Led.Size = UDim2.new(0, 220, 0, 2)

                        RGB.Name = "RGB"
                        RGB.Parent = ColorPickerBox
                        RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        RGB.BorderColor3 = Color3.fromRGB(50,50,50)
                        RGB.TextColor3 = Color3.fromRGB(255,255,255)
                        RGB.Position = UDim2.new(0, 113, 0, 199)
                        RGB.Size = UDim2.new(0, 102, 0, 20)
                        RGB.Font = Enum.Font.Code
                        RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                        RGB.PlaceholderText = " RGB Color"
                        RGB.Text = " 255, 0, 0"
                        RGB.TextSize = 13.000
                        RGB.TextStrokeTransparency = 0.000
                        RGB.TextWrapped = true
                        RGB.TextXAlignment = Enum.TextXAlignment.Left

                        Hex.Name = "Hex"
                        Hex.Parent = ColorPickerBox
                        Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        Hex.BorderColor3 = Color3.fromRGB(50,50,50)
                        Hex.TextColor3 = Color3.fromRGB(255,255,255)
                        Hex.Position = UDim2.new(0, 5, 0, 199)
                        Hex.Size = UDim2.new(0, 102, 0, 20)
                        Hex.Font = Enum.Font.Code
                        Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                        Hex.PlaceholderText = " Hex Color"
                        Hex.Text = " #FF0000"
                        Hex.TextSize = 14.000
                        Hex.TextStrokeTransparency = 0.000
                        Hex.TextWrapped = true
                        Hex.TextXAlignment = Enum.TextXAlignment.Left

                        HueSliderBorder.Parent = ColorPickerBox
                        HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
                        HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        HueSliderBorder.BorderSizePixel = 1
                        HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
                        HueSliderBorder.Rotation = 90.000
                        HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

                        HueSlider.Name = "HueSlider"
                        HueSlider.Parent = ColorPickerBox
                        HueSlider.AnchorPoint = Vector2.new(0, 1)
                        HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        HueSlider.BorderSizePixel = 0
                        HueSlider.ClipsDescendants = true
                        HueSlider.Position = UDim2.new(0, 112, 0, 107)
                        HueSlider.Rotation = 90.000
                        HueSlider.Size = UDim2.new(0, 185, 0, 15)
                        HueSlider.AutoButtonColor = false
                        HueSlider.Font = Enum.Font.SourceSans
                        HueSlider.Text = ""
                        HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                        HueSlider.TextSize = 14.000

                        UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
                        UIGradient.Parent = HueSlider

                        Indicator.Name = "Indicator"
                        Indicator.Parent = HueSlider
                        Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Indicator.Position = UDim2.new(0, 0, 0, -1)
                        Indicator.Size = UDim2.new(0, 1, 0, 6)

                        GradientBox.Name = "Gradient Box"
                        GradientBox.Parent = ColorPickerBox
                        GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                        GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        GradientBox.Position = UDim2.new(0, 5, 0, 7)
                        GradientBox.Size = UDim2.new(0, 185, 0, 185)
                        GradientBox.AutoButtonColor = false
                        GradientBox.Image = "rbxassetid://4155801252"

                        GradientIndicator.Parent = GradientBox
                        GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
                        GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        GradientIndicator.BackgroundTransparency = 1.000
                        GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
                        GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
                        GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

                        -- // Default Functions \\ --
                        local PickerOn = false

                        ColorPicker.MouseButton1Click:connect(function()
                            if ColorPickerBox.Visible == true then
                                PickerOn = true
                            else
                                PickerOn = false
                            end
                            for i,v in pairs (PickerFolder:GetChildren()) do
                                if v.Name == 'ColorPickerBox' then
                                    v.Visible = false
                                end
                            end
                            for i,v in pairs (DDFolder:GetChildren()) do
                                v.Visible = false
                            end
                            if PickerOn == true then
                                ColorPickerBox.Visible = false
                            else
                                ColorPickerBox.Visible = true
                            end
                        end)

                        local MouseInPicker = false

                        ColorPickerBox.MouseLeave:connect(function()
                            MouseInPicker = false 
                        end)

                        ColorPickerBox.MouseEnter:connect(function()
                            MouseInPicker = true
                        end)

                        local MouseInPickerBox = false
                        ColorPicker.MouseLeave:connect(function()
                            MouseInPickerBox = false 
                        end)

                        ColorPicker.MouseEnter:connect(function()
                            MouseInPickerBox = true
                        end)

                        local MouseInPickerBounds = false
                        ColorPickerBounds.MouseLeave:connect(function()
                            MouseInPickerBounds = false 
                        end)

                        ColorPickerBounds.MouseEnter:connect(function()
                            MouseInPickerBounds = true
                        end)

                        task.spawn(function()
                            UIS.InputBegan:Connect(function(Input, Processed)
                                if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    ColorPickerBox.Visible = false
                                end
                            end)
                        end)

                        -- // Gradient Box Function / Sat and Val Updaters \\ --
                        local GHeld = false

                        GradientBox.MouseButton1Down:Connect(function()
                            GHeld = true
                        end)

                        UIS.InputEnded:Connect(function(Input, Processed)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                GHeld = false
                            end
                        end)

                        local Value1
                        
                        RenderStepped:Connect(function(Delta)
                            if GHeld then
                                local MousePos = UIS:GetMouseLocation()
                                local GradientPos = GradientBox.AbsolutePosition
                                local GradientSize = GradientBox.AbsoluteSize
                                
                                local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                                Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                                local Value2 = -(Value1 - 1)

                                Sat = math.clamp(Saturation, 0, 1)
                                Val = math.clamp(Value2, 0, 1)

                                Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                                RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                                GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1) ,0)
                            end
                            GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
                        end)

                        GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

                        -- // HueSlider Functions / Hue Updater \\ --

                        local SHeld = false

                        HueSlider.MouseButton1Down:Connect(function()
                            SHeld = true
                        end)

                        UIS.InputEnded:Connect(function(Input, Processed)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                SHeld = false
                            end
                        end)


                        RenderStepped:Connect(function(Delta)
                            if SHeld then
                                local MousePos = UIS:GetMouseLocation().Y
                                local SliderPos = HueSlider.AbsolutePosition.Y - 52
                                local SliderSize = HueSlider.AbsoluteSize.X
                                
                                local Pos = (MousePos - SliderPos) / SliderSize

                                Hue = math.clamp(Pos, 0, 1)

                                Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                                RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                            else

                            end

                            Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                                
                            if Hue == 1 then
                                Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                            end
                        end)

                        -- // Color Updater for CallBack and Color Picker Button \\ --
                        task.spawn(function()
                            while RenderStepped:wait() do
                                ColorPicker.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                                ColorPicker.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                                CallBack(Hue, Sat, Val)
                            end
                        end)



                        -- // Code to Integer Converter \\ --

                        function ToInteger (Color)
                            return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
                        end
                        
                        -- // From RGB to Hex Code Converter \\ --
                        function ToHex (Color)
                            local Red, Green, Blue = ToInteger(Color)
                            local HexChar = {
                                'A', 'B', 'C', 'D', 'E', 'F'
                            }
                            local ColorTable = {Red, Green, Blue}
                            local Result = ' #'
                        
                            for i,Code in pairs (ColorTable) do
                                local Divide = Code / 16
                                local FirstNumber = math.floor(Divide)
                                local Remainder = (Divide - FirstNumber) * 16
                                local Char
                        
                                if FirstNumber >= 10 then
                                    Char = HexChar[FirstNumber - 9]
                                else
                                    Char = FirstNumber
                                end
                        
                                if Remainder >= 10 then
                                    Char = Char..HexChar[Remainder - 9]
                                else 
                                    Char = Char..tonumber(Remainder)
                                end
                        
                                Result = Result..Char
                            end
                        
                            return tostring(Result)
                        end

                        -- // RGB to String Converter \\ --
                        function ToRGB(Color)
                            local Red, Green, Blue = ToInteger(Color)
                            local RGB = ' '..Red..', '..Green..', '..Blue
                            return tostring(RGB)
                        end

                        Hex.Text = ToHex(Org)
                        RGB.Text = ToRGB(Org)
                    
                    end
                    return Extras
                end

                function BoxComps:AddSlider(Info, CallBack)

 
                    local SliderFrame = Instance.new("Frame")
                    local OuterSlider = Instance.new("TextButton")
                    local InnerSlider = Instance.new("TextButton")
                    local SliderInfo = Instance.new("TextLabel")
                    local Name = Instance.new("TextLabel")
                    local SliderBorder = Instance.new('Frame')

                    SliderFrame.Name = "SliderFrame"
                    SliderFrame.Parent = LeftBox
                    SliderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderFrame.BackgroundTransparency = 1.000
                    SliderFrame.BorderSizePixel = 0
                    SliderFrame.Size = UDim2.new(0, 226, 0, 29)
                    SliderFrame.ZIndex = 2
                    SliderBorder.Parent = SliderFrame
                    SliderBorder.BackgroundColor3 = Library.MainColor
                    SliderBorder.BackgroundTransparency = 0
                    SliderBorder.BorderColor3 = Library.Black
                    SliderBorder.BorderSizePixel = 1
                    SliderBorder.Position = UDim2.new(0, 5, 0, 13)
                    SliderBorder.Size = UDim2.new(0, 216, 0, 14)

                    OuterSlider.Name = "OuterSlider"
                    OuterSlider.Parent = SliderBorder
                    RenderStepped:connect(function()
                        OuterSlider.BackgroundColor3 = Library.MainColor
                        OuterSlider.BorderColor3 = Library.OutLineColor
                    end)
                    OuterSlider.BorderMode = Enum.BorderMode.Inset
                    OuterSlider.Position = UDim2.new(0, 0, 0, 0)
                    OuterSlider.Size = UDim2.new(1, 0, 1, 0)
                    OuterSlider.Font = Enum.Font.SourceSans
                    OuterSlider.Text = ""
                    OuterSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    OuterSlider.TextSize = 14.000
                    OuterSlider.TextStrokeTransparency = 0.000
                    OuterSlider.AutoButtonColor = false

                    InnerSlider.Name = "InnerSlider"
                    InnerSlider.Parent = OuterSlider
                    task.spawn(function()
                        while wait() do
                            if Library.RainbowAccent == true then
                                InnerSlider.BackgroundColor3 = Library.RainbowAccentColor
                                InnerSlider.BorderColor3 = GetDarkerColor(Library.RainbowAccentColor)
                            else
                                InnerSlider.BackgroundColor3 = Library.AccentColor
                                InnerSlider.BorderColor3 = GetDarkerColor(Library.AccentColor)
                            end
                        end
                    end)
                    InnerSlider.BackgroundTransparency = 0
                    InnerSlider.BorderSizePixel = 1
                    InnerSlider.Position = UDim2.new(0, 0, 0, 0)
                    InnerSlider.Size = UDim2.new(0, 1, 0, 12)
                    InnerSlider.Visible = true
                    InnerSlider.Font = Enum.Font.SourceSans
                    InnerSlider.Text = ""
                    InnerSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    InnerSlider.TextSize = 14.000
                    InnerSlider.AutoButtonColor = false

                    SliderInfo.Name = "SliderInfo"
                    SliderInfo.Parent = OuterSlider
                    SliderInfo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderInfo.BackgroundTransparency = 1.000
                    SliderInfo.Position = UDim2.new(0, 73, 0, -1)
                    SliderInfo.Size = UDim2.new(0, 70, 0, 12)
                    SliderInfo.Font = Enum.Font.Code
                    SliderInfo.LineHeight = 0.950
                    SliderInfo.Text = Info.SliderName..': '..Info.SliderStartingValue..'m'
                    RenderStepped:connect(function()
                        SliderInfo.TextColor3 = Library.TextColor
                    end)
                    SliderInfo.TextSize = 13.000
                    SliderInfo.TextStrokeTransparency = 0.000

                    Name.Name = "Name"
                    Name.Parent = SliderFrame
                    Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Name.BackgroundTransparency = 1.000
                    Name.Position = UDim2.new(0, 6, 0, -4)
                    Name.Size = UDim2.new(0, 180, 0, 16)
                    Name.Font = Enum.Font.Code
                    Name.Text = Info.Name
                    RenderStepped:connect(function()
                        Name.TextColor3 = Library.TextColor
                    end)
                    Name.TextSize = 14.000
                    Name.TextStrokeTransparency = 0.000
                    Name.TextXAlignment = Enum.TextXAlignment.Left

                    local MouseInSlider = false

                    SliderBorder.MouseEnter:Connect(function()
                        MouseInSlider = true
                        while MouseInSlider == true do
                            if Library.RainbowAccent == true then
                                SliderBorder.BorderColor3 = Library.RainbowAccentColor 
                            else
                                SliderBorder.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    SliderBorder.MouseLeave:Connect(function()
                        MouseInSlider = false
                        SliderBorder.BorderColor3 = Library.Black
                    end)

                    -- Sliding Funco --

                    --Variables-------------------------------------------------
                    local UIS = game:GetService('UserInputService')
                    local OuterSlider = OuterSlider
                    local InnerSlider = InnerSlider
                    local SliderInfo = SliderInfo
                    local player = game.Players.LocalPlayer
                    local RUS = game:GetService('RunService')
                    local Value
                    SliderInfo.Text = Info.SliderName..': '..Info.SliderStartingValue..Info.Unit
                    --Properties------------------------------------------
                    local Held = false                                                    -- Variable for if you are holding down the slider, holds information that the script would need.
                    local factor = Info.Factor                                                 --Step is the factor
                    
                    --Default Settings--------------------------------------------
                    if Info.SliderStartingValue == 0 then
                        InnerSlider.Size = UDim2.new(Info.SliderStartingValue * factor, 1, InnerSlider.Size.Y.Scale, InnerSlider.Size.Y.Offset)
                    else
                        InnerSlider.Size = UDim2.new(Info.SliderStartingValue * factor, 0, InnerSlider.Size.Y.Scale, InnerSlider.Size.Y.Offset)
                    end
                    --Script------------------------------------------------------
                    local function Round(number, factor)                            
                        if factor == 0 then                                               -- IF there is no factor then it just returns the % that the innerslider covers              
                            return number        
                        end
                        return math.floor(number/factor+0.5) * factor                     -- Returns the sum of this to be the value of Pos, would now be an increment of 'factor'  e.g. only goes up in 0.01 by rounding down anything that isnt an increment/factor of 0.01 to an increment/factor of 0.01.  
                    end
                    
                    local function rounding(Num)
                        return math.floor(Num * 10 ^ Info.Round) / 10 ^ Info.Round                 -- Round's number is the amount of decimal place it rounds to, so if Round = 1 then it would round it down to 1 decimal place.
                    end
                    
                    OuterSlider.MouseButton1Down:Connect(function()                       -- When you click and are holding down the slider with LMB
                        Held = true                                                       -- Makes held variable true
                    end)
                    InnerSlider.MouseButton1Down:Connect(function()
                        Held = true
                    end)
                    UIS.InputEnded:Connect(function(Input, Processed)                     -- When you stop holding down the slider with LMB
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Held = false                                                  -- Makes held variable false
                        end
                    end)
                    
                    RUS.RenderStepped:Connect(function(delta)                            				  -- An event that fires prior to the frame being rendered
                        if Held then                                                     				  -- If the slider is being held then
                            local MousePos = UIS:GetMouseLocation().X                  				      -- gets the X value of where the Mouse is at on the screen
                            local ISPos = InnerSlider.Position                              		      -- ISPos is the InnerSlider's Position
                            local ISSize = InnerSlider.Size                                               -- ISSize is the InnerSlider's Size
                            local SliderPos = OuterSlider.AbsolutePosition.X                  				  -- Gets the X value of the Slider's Position
                            local SliderSize = OuterSlider.AbsoluteSize.X                                      -- Gets the X value of the Slider's Size
                            local Pos = Round((MousePos-SliderPos)/SliderSize, factor)                    -- '(MousePos-SliderPos)/SliderSize is the % of the slider that the inner slider covers. 1 is 100%, 0 is 0%. (With mouse it'd be the % of the way to the end of the slider),
                                                                                                        -- 'Round' sends the values to be rounded in a function, where Pos would be the value that the function returns
                            local Percentage = math.clamp(Pos,0,1)                                        -- For math.clamp, The first argument is the value you want to clamp, the 2nd is the minimum(smallest) value that the clamped value can be, 3rd is the maximum(biggest) value it can be
                    
                            if Percentage <= 0 then
                                InnerSlider.Size = UDim2.new(Percentage, 1, ISSize.Y.Scale, ISSize.Y.Offset)
                            elseif Percentage == 1 then
                                InnerSlider.Size = UDim2.new(Percentage, 2, ISSize.Y.Scale, ISSize.Y.Offset)
                            else
                                InnerSlider.Size = UDim2.new(Percentage, 0, ISSize.Y.Scale, ISSize.Y.Offset)  -- Makes the InnerSlider's X Scale according to the % it should cover
                            end

                            SliderInfo.Text = Info.SliderName..': '..rounding(Percentage * Info.SliderSize)..Info.Unit                                    -- Makes SliderInfo the % that the innerslider covers
                            Value =  math.floor(Percentage * Info.ValueSize)
                            CallBack(Value)
                        end 
                    end)
                end

                function BoxComps:AddDropDown (Info, Drops, CallBack)

                    local DropDown = Instance.new("Frame")
                    local DropDownBounds = Instance.new('Frame')
                    local DropDownMain = Instance.new("TextButton")
                    local Arrow = Instance.new("ImageLabel")
                    local DDHolder = Instance.new("Frame")
                    local UIListLayout = Instance.new("UIListLayout")
                    local DropDownName = Instance.new("TextLabel")
                    local DropDownBorder = Instance.new('Frame')

                    local Selected = Info.Org
                    local Dropped = false
                    local MouseInDropDown = false

                    DropDown.Name = "DropDown"
                    DropDown.Parent = LeftBox
                    DropDown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDown.BackgroundTransparency = 1.000
                    DropDown.BorderSizePixel = 0
                    DropDown.Size = UDim2.new(0, 226, 0, 36)
                    DropDown.ZIndex = 5

                    DropDownName.Name = "DropDownName"
                    DropDownName.Parent = DropDown
                    DropDownName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDownName.BackgroundTransparency = 1.000
                    DropDownName.Position = UDim2.new(0, 6, 0, -4)
                    DropDownName.Size = UDim2.new(0, 180, 0, 16)
                    DropDownName.Font = Enum.Font.Code
                    DropDownName.Text = Info.Name
                    RenderStepped:connect(function()
                        DropDownName.TextColor3 = Library.TextColor
                    end)
                    DropDownName.TextSize = 14.000
                    DropDownName.TextStrokeTransparency = 0.000
                    DropDownName.TextXAlignment = Enum.TextXAlignment.Left

                    DropDownBounds.Name = "DropDownBounds"
                    DropDownBounds.Parent = DropDown
                    DropDownBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    DropDownBounds.BorderColor3 = Library.Black
                    DropDownBounds.BorderSizePixel = 1
                    DropDownBounds.Position = UDim2.new(0, 5, 0, 13)
                    DropDownBounds.Size = UDim2.new(0, 216, 0, 20)

                    DropDownMain.Name = "DropDownMain"
                    DropDownMain.Parent = DropDownBounds
                    RenderStepped:connect(function()
                        DropDownMain.BackgroundColor3 = Library.MainColor
                        DropDownMain.BorderColor3 = Library.OutLineColor
                    end)
                    DropDownMain.BorderMode = Enum.BorderMode.Inset
                    DropDownMain.Position = UDim2.new(0, 0, 0, 0)
                    DropDownMain.Size = UDim2.new(1, 0, 1, 0)
                    DropDownMain.Font = Enum.Font.Code
                    DropDownMain.Text = tostring(Info.Org)
                    RenderStepped:connect(function()
                        DropDownMain.TextColor3 = Library.TextColor
                    end)
                    DropDownMain.TextSize = 14.000
                    DropDownMain.TextStrokeTransparency = 0.000
                    DropDownMain.TextXAlignment = Enum.TextXAlignment.Left
                    DropDownMain.AutoButtonColor = false

                    Arrow.Name = "Arrow"
                    Arrow.Parent = DropDownMain
                    Arrow.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    Arrow.BackgroundTransparency = 1.000
                    Arrow.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    Arrow.Position = UDim2.new(0, 197, 0, 2)
                    Arrow.Size = UDim2.new(0, 15, 0, 15)
                    Arrow.Image = "http://www.roblox.com/asset/?id=9482956116"

                    local DDMPosX = DropDownMain.AbsolutePosition.X - Box.AbsolutePosition.X
                    local DDMPosY = DropDownMain.AbsolutePosition.Y - Box.AbsolutePosition.Y

                    DropDownBorder.Parent = DDFolder
                    DropDownBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDownBorder.BackgroundTransparency = 1.000
                    DropDownBorder.BorderSizePixel = 0
                    DropDownBorder.Size = UDim2.new(0, 216, 0, 20)
                    DropDownBorder.Position = UDim2.new(0, DDMPosX, 0, DDMPosY)
                    DropDownBorder.AutomaticSize = Enum.AutomaticSize.XY

                    DDHolder.Name = "DDHolder"
                    DDHolder.Parent = DropDownBorder
                    RenderStepped:connect(function()
                        DDHolder.BackgroundColor3 = Library.MainColor
                    end)
                    DDHolder.BorderColor3 = Library.Black

                    DDHolder.Position = UDim2.new(0, 1, 0, 22)
                    DDHolder.Size = UDim2.new(0, 0, 0, 0)
                    DDHolder.Visible = false
                    DDHolder.AutomaticSize = Enum.AutomaticSize.XY

                    UIListLayout.Parent = DDHolder
                    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    UIListLayout.Padding = UDim.new(0, 1)

                    for i,v in pairs (Drops) do
                        local Drop = Instance.new("TextButton")
                        local MouseInDrop = false
                        Drop.Name = "Drop"
                        Drop.Parent = DDHolder
                        RenderStepped:connect(function()
                            Drop.BackgroundColor3 = Library.MainColor
                        end)
                        Drop.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        Drop.Position = UDim2.new(0, 0, 0, -1)
                        Drop.Size = UDim2.new(0, 214, 0, 19)
                        Drop.Selected = true
                        Drop.Font = Enum.Font.Code
                        Drop.Text = ' '..tostring(v)
                        Drop.TextColor3 = Library.TextColor
                        Drop.TextSize = 14.000
                        Drop.TextStrokeTransparency = 0.000
                        Drop.TextXAlignment = Enum.TextXAlignment.Left
                        Drop.AutoButtonColor = false

                        Drop.MouseButton1Click:connect(function()
                            Selected = tostring(v)
                            CallBack(Selected)
                        end)

                        task.spawn(function()
                            while RenderStepped:wait() do
                                if Selected == tostring(v) and Library.RainbowAccent then
                                    Drop.TextColor3 = Library.RainbowAccentColor
                                elseif Selected == tostring(v) and not Library.RainbowAccent then
                                    Drop.TextColor3 = Library.AccentColor
                                elseif Selected ~= tostring(v) then
                                    Drop.TextColor3 = Library.TextColor
                                end
                            end
                        end)

                        Drop.MouseEnter:connect(function()
                            MouseInDrop = true
                            while MouseInDrop do
                                if Library.RainbowAccent then
                                    Drop.BorderColor3 = Library.RainbowAccentColor
                                elseif not Library.RainbowAccent then
                                    Drop.BorderColor3 = Library.AccentColor
                                end
                                wait()
                            end
                        end)

                        Drop.MouseLeave:connect(function()
                            MouseInDrop = false
                        end)

                        RenderStepped:connect(function()
                            if MouseInDrop == false then
                                Drop.BorderColor3 = Library.OutLineColor
                            end
                        end)
                    end

                    DropDownBounds.MouseEnter:connect(function()
                        MouseInDropDown = true
                        while MouseInDropDown do
                            if Library.RainbowAccent then
                                DropDownBounds.BorderColor3 = Library.RainbowAccentColor
                            elseif not Library.RainbowAccent then
                                DropDownBounds.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    DropDownBounds.MouseLeave:connect(function()
                        MouseInDropDown = false
                        DropDownBounds.BorderColor3 = Library.Black
                    end)


                    for i,v in pairs (DDHolder:GetChildren()) do
                        if v.Name == "Drop" then
                        v.Visible = true
                        end
                    end

                    DropDownMain.MouseButton1Click:Connect(function()
                        
                        if Dropped == false then
                            for i,v in pairs (DDFolder:GetChildren()) do
                                v.Visible = false
                            end
                            for i,v in pairs (PickerFolder:GetChildren()) do
                                v.Visible = false
                            end
                            DDHolder.Visible = true
                            DropDownBorder.Visible = true
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9489839300'
                            Arrow.Position = UDim2.new(0, 197, 0, 4)
                            Dropped = true
                            DDHolder.ZIndex = 8
                            DropDownBorder.ZIndex = 8

                        elseif Dropped == true then
                            DDHolder.Visible = false
                            DropDownBorder.Visible = false
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9482956116'
                            Arrow.Position = UDim2.new(0, 197, 0, 2)
                            Dropped = false
                            DDHolder.ZIndex = 1
                            DropDownBorder.ZIndex = 1
                        end
                        
                    end)

                    local MouseInDropBounds = false
                    DropDownBorder.MouseLeave:connect(function()
                        MouseInDropBounds = false 
                    end)
        
                    DropDownBorder.MouseEnter:connect(function()
                        MouseInDropBounds = true
                    end)
        
                    task.spawn(function()
                        UIS.InputBegan:Connect(function(Input, Processed)
                            if not MouseInDropBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 and Dropped then
                                if DropDownBorder.Visible and not MouseInDropDown then 
                                    DropDownBorder.Visible = false
                                end
                            end
                        end)
                    end)

                    RenderStepped:connect(function()
                        if DropDownBorder.Visible == true then 
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9489839300'
                            Arrow.Position = UDim2.new(0, 197, 0, 4)
                            Dropped = true
                        else
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9482956116'
                            Arrow.Position = UDim2.new(0, 197, 0, 2)
                            Dropped = false
                        end
                    end)

                    task.spawn(function() 
                        while RenderStepped:wait() do
                            DropDownMain.Text = ' '..tostring(Selected)
                            CallBack(tostring(Selected))
                        end
                    end)
                end
                function BoxComps:AddNamewColorPicker (Info, Org, CallBack)
                    local CCBG = Instance.new("Frame")
                    local CPN = Instance.new("TextLabel")
                    local CPB = Instance.new("TextButton")

                    local ColorPickerBox = Instance.new("Frame")
                    local ColorPickerBounds = Instance.new('Frame')
                    local Led = Instance.new("Frame")
                    local RGB = Instance.new("TextBox")
                    local Hex = Instance.new("TextBox")
                    local HueSliderBorder = Instance.new("Frame")
                    local HueSlider = Instance.new("TextButton")
                    local UIGradient = Instance.new("UIGradient")
                    local Indicator = Instance.new("Frame")
                    local GradientBox = Instance.new("ImageButton")
                    local GradientIndicator = Instance.new("ImageLabel")
                    -- // Conversion from Object to usable HSV code \\ --

                    local OrgHSV = Org:ToHSV()
                    local Hue, Sat, Val = Org:ToHSV()

                    --Properties:

                    CCBG.Name = "CCBG"
                    CCBG.Parent = LeftBox
                    CCBG.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    CCBG.BackgroundTransparency = 1.000
                    CCBG.Position = UDim2.new(0, 0, 0, 0)
                    CCBG.Size = UDim2.new(0, 226, 0, 17)

                    CPN.Name = "CPN"
                    CPN.Parent = CCBG
                    CPN.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
                    CPN.BackgroundTransparency = 1.000
                    CPN.BorderSizePixel = 0
                    CPN.Position = UDim2.new(0, 6, 0, -1)
                    CPN.Size = UDim2.new(0, 87, 0, 16)
                    CPN.Font = Enum.Font.Code
                    CPN.Text = Info.Name
                    RenderStepped:connect(function()
                        CPN.TextColor3 = Library.TextColor
                    end)
                    CPN.TextSize = 14.000
                    CPN.TextStrokeTransparency = 0.000
                    CPN.TextXAlignment = Enum.TextXAlignment.Left

                    CPB.Name = "CPB"
                    CPB.Parent = CCBG
                    CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                    CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                    CPB.Position = UDim2.new(0, 192, 0, 1)
                    CPB.Size = UDim2.new(0, 28, 0, 13)
                    CPB.Font = Enum.Font.SourceSans
                    CPB.Text = ""
                    CPB.TextColor3 = Color3.fromRGB(0, 0, 0)
                    CPB.TextSize = 14.000
                    CPB.AutoButtonColor = false

                    ColorPickerBox.Name = "ColorPickerBox"
                    ColorPickerBox.Parent = PickerFolder
                    ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

                    local CPosX = CPB.AbsolutePosition.X - Box.AbsolutePosition.X
                    local CPosY = CPB.AbsolutePosition.Y - Box.AbsolutePosition.Y

                    ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
                    ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
                    ColorPickerBox.ZIndex = 6

                    ColorPickerBounds.Name = "ColorPickerBounds"
                    ColorPickerBounds.Parent = CCBG
                    ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    ColorPickerBounds.Transparency = 1
                    ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
                    ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
                    ColorPickerBounds.ZIndex = 6

                    Led.Name = "Led"
                    Led.Parent = ColorPickerBox
                    task.spawn(function()
                        while wait() do
                            if Library.RainbowAccent == true then
                                Led.BackgroundColor3 = Library.RainbowAccentColor 
                            else
                            Led.BackgroundColor3 = Library.AccentColor
                            end
                        end
                    end)
                    Led.BorderSizePixel = 0
                    Led.Size = UDim2.new(0, 220, 0, 2)

                    RGB.Name = "RGB"
                    RGB.Parent = ColorPickerBox
                    RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    RGB.BorderColor3 = Color3.fromRGB(50,50,50)
                    RGB.TextColor3 = Color3.fromRGB(255,255,255)
                    RGB.Position = UDim2.new(0, 113, 0, 199)
                    RGB.Size = UDim2.new(0, 102, 0, 20)
                    RGB.Font = Enum.Font.Code
                    RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                    RGB.PlaceholderText = " RGB Color"
                    RGB.Text = " 255, 0, 0"
                    RGB.TextSize = 13.000
                    RGB.TextStrokeTransparency = 0.000
                    RGB.TextWrapped = true
                    RGB.TextXAlignment = Enum.TextXAlignment.Left

                    Hex.Name = "Hex"
                    Hex.Parent = ColorPickerBox
                    Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    Hex.BorderColor3 = Color3.fromRGB(50,50,50)
                    Hex.TextColor3 = Color3.fromRGB(255,255,255)
                    Hex.Position = UDim2.new(0, 5, 0, 199)
                    Hex.Size = UDim2.new(0, 102, 0, 20)
                    Hex.Font = Enum.Font.Code
                    Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                    Hex.PlaceholderText = " Hex Color"
                    Hex.Text = " #FF0000"
                    Hex.TextSize = 14.000
                    Hex.TextStrokeTransparency = 0.000
                    Hex.TextWrapped = true
                    Hex.TextXAlignment = Enum.TextXAlignment.Left

                    HueSliderBorder.Parent = ColorPickerBox
                    HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
                    HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    HueSliderBorder.BorderSizePixel = 1
                    HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
                    HueSliderBorder.Rotation = 90.000
                    HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

                    HueSlider.Name = "HueSlider"
                    HueSlider.Parent = ColorPickerBox
                    HueSlider.AnchorPoint = Vector2.new(0, 1)
                    HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    HueSlider.BorderSizePixel = 0
                    HueSlider.ClipsDescendants = true
                    HueSlider.Position = UDim2.new(0, 112, 0, 107)
                    HueSlider.Rotation = 90.000
                    HueSlider.Size = UDim2.new(0, 185, 0, 15)
                    HueSlider.AutoButtonColor = false
                    HueSlider.Font = Enum.Font.SourceSans
                    HueSlider.Text = ""
                    HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    HueSlider.TextSize = 14.000

                    UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
                    UIGradient.Parent = HueSlider

                    Indicator.Name = "Indicator"
                    Indicator.Parent = HueSlider
                    Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    Indicator.Position = UDim2.new(0, 0, 0, -1)
                    Indicator.Size = UDim2.new(0, 1, 0, 6)

                    GradientBox.Name = "Gradient Box"
                    GradientBox.Parent = ColorPickerBox
                    GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                    GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    GradientBox.Position = UDim2.new(0, 5, 0, 7)
                    GradientBox.Size = UDim2.new(0, 185, 0, 185)
                    GradientBox.AutoButtonColor = false
                    GradientBox.Image = "rbxassetid://4155801252"

                    GradientIndicator.Parent = GradientBox
                    GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
                    GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    GradientIndicator.BackgroundTransparency = 1.000
                    GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
                    GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
                    GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

                    -- // Default Functions \\ --
                    local PickerOn = false

                    CPB.MouseButton1Click:connect(function()
                        if ColorPickerBox.Visible == true then
                            PickerOn = true
                        else
                            PickerOn = false
                        end
                        for i,v in pairs (PickerFolder:GetChildren()) do
                            if v.Name == 'ColorPickerBox' then
                                v.Visible = false
                            end
                        end
                        for i,v in pairs (DDFolder:GetChildren()) do
                            v.Visible = false
                        end
                        if PickerOn == true then
                            ColorPickerBox.Visible = false
                        else
                            ColorPickerBox.Visible = true
                        end
                    end)

                    local MouseInPicker = false

                    ColorPickerBox.MouseLeave:connect(function()
                        MouseInPicker = false 
                    end)

                    ColorPickerBox.MouseEnter:connect(function()
                        MouseInPicker = true
                    end)

                    local MouseInPickerBox = false
                    CPB.MouseLeave:connect(function()
                        MouseInPickerBox = false 
                    end)

                    CPB.MouseEnter:connect(function()
                        MouseInPickerBox = true
                    end)

                    local MouseInPickerBounds = false
                    ColorPickerBounds.MouseLeave:connect(function()
                        MouseInPickerBounds = false 
                    end)

                    ColorPickerBounds.MouseEnter:connect(function()
                        MouseInPickerBounds = true
                    end)

                    task.spawn(function()
                        UIS.InputBegan:Connect(function(Input, Processed)
                            if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                ColorPickerBox.Visible = false
                            end
                        end)
                    end)

                    -- // Gradient Box Function / Sat and Val Updaters \\ --
                    local GHeld = false

                    GradientBox.MouseButton1Down:Connect(function()
                        GHeld = true
                    end)

                    UIS.InputEnded:Connect(function(Input, Processed)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            GHeld = false
                        end
                    end)

                    local Value1
                        
                    RenderStepped:Connect(function(Delta)
                        if GHeld then
                            local MousePos = UIS:GetMouseLocation()
                            local GradientPos = GradientBox.AbsolutePosition
                            local GradientSize = GradientBox.AbsoluteSize
                                
                            local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                            Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                            local Value2 = -(Value1 - 1)

                            Sat = math.clamp(Saturation, 0, 1)
                            Val = math.clamp(Value2, 0, 1)

                            Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                            RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                            GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                        end
                        GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
                    end)

                    GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)
                    -- // HueSlider Functions / Hue Updater \\ --

                    local SHeld = false

                    HueSlider.MouseButton1Down:Connect(function()
                        SHeld = true
                    end)

                    UIS.InputEnded:Connect(function(Input, Processed)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            SHeld = false
                        end
                    end)


                    RenderStepped:Connect(function(Delta)
                        if SHeld then
                            local MousePos = UIS:GetMouseLocation().Y
                            local SliderPos = HueSlider.AbsolutePosition.Y - 52
                            local SliderSize = HueSlider.AbsoluteSize.X
                                
                            local Pos = (MousePos - SliderPos) / SliderSize

                            Hue = math.clamp(Pos, 0, 1)

                            Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                            RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                        else

                        end

                        Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                                
                        if Hue == 1 then
                            Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                        end
                    end)

                    -- // Color Updater for CallBack and Color Picker Button \\ --
                    task.spawn(function()
                        while RenderStepped:wait() do
                            CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                            CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                            CallBack(Hue, Sat, Val)
                        end
                    end)


                    -- // Code to Integer Converter \\ --

                    function ToInteger (Color)
                        return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
                    end
                        
                    -- // From RGB to Hex Code Converter \\ --
                    function ToHex (Color)
                        local Red, Green, Blue = ToInteger(Color)
                        local HexChar = {
                            'A', 'B', 'C', 'D', 'E', 'F'
                        }
                        local ColorTable = {Red, Green, Blue}
                        local Result = ' #'
                        
                        for i,Code in pairs (ColorTable) do
                            local Divide = Code / 16
                            local FirstNumber = math.floor(Divide)
                            local Remainder = (Divide - FirstNumber) * 16
                            local Char
                        
                            if FirstNumber >= 10 then
                                Char = HexChar[FirstNumber - 9]
                            else
                                Char = FirstNumber
                            end
                        
                            if Remainder >= 10 then
                                Char = Char..HexChar[Remainder - 9]
                            else 
                                Char = Char..tonumber(Remainder)
                            end
                        
                            Result = Result..Char
                        end
                        
                        return tostring(Result)
                    end

                    -- // RGB to String Converter \\ --
                    function ToRGB(Color)
                        local Red, Green, Blue = ToInteger(Color)
                        local RGB = ' '..Red..', '..Green..', '..Blue
                        return tostring(RGB)
                    end

                    Hex.Text = ToHex(Org)
                    RGB.Text = ToRGB(Org)
                end
                return BoxComps  
            end

            function Boxes:AddLeftDualBox(Properties)
        
                            
                local LeftDualBox = Instance.new("Frame")
                local Box1 = Instance.new("Frame")
                local Box2 = Instance.new("Frame")
                local Tab2 = Instance.new("TextButton")
                local Tab1 = Instance.new("TextButton")
                local Led = Instance.new("Frame")
                local UIListLayout1 = Instance.new('UIListLayout')
                local UIListLayout2 = Instance.new('UIListLayout')
                local TabBound1 = Instance.new("Frame")
                local TabBound2 = Instance.new("Frame")

                LeftDualBox.Name = "LeftDualBox"
                LeftDualBox.Parent = LeftGroupBox
                LeftDualBox.BackgroundColor3 = Library.OutLineColor
                LeftDualBox.BorderColor3 = Library.OutLineColor
                LeftDualBox.ClipsDescendants = false
                LeftDualBox.BackgroundTransparency = 1
                LeftDualBox.Visible = true
                LeftDualBox.Size = UDim2.new(0, 228, 0, Properties.CustomSize.Y.Offset)

                Box1.Name = "Box1"
                Box1.Parent = LeftDualBox
                RenderStepped:connect(function()
                    Box1.BackgroundColor3 = Library.BackGroundColor
                    Box1.BorderColor3 = Library.OutLineColor
                end)
                Box1.BorderSizePixel = 1
                Box1.Position = UDim2.new(0, 1, 0, 3)
                Box1.Size = UDim2.new(0, 226, 0, Properties.CustomSize.Y.Offset)
                Box1.Visible = true

                Box2.Name = "Box2"
                Box2.Parent = LeftDualBox
                RenderStepped:connect(function()
                    Box2.BackgroundColor3 = Library.BackGroundColor
                    Box2.BorderColor3 = Library.OutLineColor
                end)
                Box2.BorderSizePixel = 1
                Box2.Position = UDim2.new(0, 1, 0, 3)
                Box2.Size = UDim2.new(0, 226, 0, Properties.CustomSize.Y.Offset)
                Box2.Visible = false

                Tab2.Name = "Tab2"
                Tab2.Parent = LeftDualBox
                Tab2.BackgroundColor3 = Library.MainColor
                RenderStepped:connect(function()
                    Tab2.BorderColor3 = Library.OutLineColor
                end)
                Tab2.ZIndex = 6
                Tab2.Position = UDim2.new(0, 115, 0, 2)
                Tab2.Size = UDim2.new(0, 112, 0, 16)
                Tab2.Text = tostring(Properties.TabName2)
                Tab2.Font = Enum.Font.Code
                RenderStepped:connect(function()
                    Tab2.TextColor3 = Library.TextColor
                end)
                Tab2.TextSize = 14.000
                Tab2.AutoButtonColor = false

                Tab1.Name = "Tab1"
                Tab1.Parent = LeftDualBox
                Tab1.BackgroundColor3 = Library.BackGroundColor
                RenderStepped:connect(function()
                    Tab1.BorderColor3 = Library.OutLineColor
                end)
                Tab1.Position = UDim2.new(0, 1, 0, 2)
                Tab1.Size = UDim2.new(0, 113, 0, 16)
                Tab1.Text = tostring(Properties.TabName1)
                Tab1.Font = Enum.Font.Code
                RenderStepped:connect(function()
                    Tab1.TextColor3 = Library.TextColor
                end)
                Tab1.TextSize = 14.000
                Tab1.ZIndex = 6
                Tab1.AutoButtonColor = false

                Led.Name = "Led"
                Led.Parent = LeftDualBox
                task.spawn(function()
                    while wait() do
                        if Library.RainbowAccent == true then
                            Led.BackgroundColor3 = Library.RainbowAccentColor 
                        else
                        Led.BackgroundColor3 = Library.AccentColor
                        end
                    end
                end)
                Led.BorderSizePixel = 0
                Led.Position = UDim2.new(0, 1, 0, 0)
                Led.Size = UDim2.new(0, 226, 0, 2)
                Led.ZIndex = 6

                Tab1.MouseButton1Click:connect(function()
                    Box2.Visible = false
                    Box1.Visible = true
                    Tab1.BackgroundColor3 = Library.BackGroundColor
                    Tab2.BackgroundColor3 = Library.MainColor
                    Tab1.BorderSizePixel = 0
                    Tab2.BorderSizePixel = 1
                end)

                Tab2.MouseButton1Click:connect(function()
                    Box2.Visible = true
                    Box1.Visible = false
                    Tab1.BackgroundColor3 = Library.MainColor
                    Tab2.BackgroundColor3 = Library.BackGroundColor
                    Tab1.BorderSizePixel = 1
                    Tab2.BorderSizePixel = 0
                end)

                RenderStepped:connect(function()
                    if Box2.Visible == true and Box1.Visible == false then
                        Tab2.BackgroundColor3 = Library.BackGroundColor
                        Tab1.BackgroundColor3 = Library.MainColor
                        Tab1.BorderSizePixel = 1
                        Tab2.BorderSizePixel = 0
                    else
                        Tab1.BackgroundColor3 = Library.BackGroundColor
                        Tab2.BackgroundColor3 = Library.MainColor
                        Tab1.BorderSizePixel = 0
                        Tab2.BorderSizePixel = 1
                    end
                end)
                UIListLayout1.Parent = Box1
                UIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout1.Padding = UDim.new(0, 4)

                UIListLayout2.Parent = Box2
                UIListLayout2.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout2.Padding = UDim.new(0, 4)

                TabBound1.Name = "TabBound"
                TabBound1.Parent = Box1
                TabBound1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TabBound1.BackgroundTransparency = 1.000
                TabBound1.BorderSizePixel = 0
                TabBound1.Size = UDim2.new(0, 226, 0, 18)

                TabBound2.Name = "TabBound"
                TabBound2.Parent = Box2
                TabBound2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TabBound2.BackgroundTransparency = 1.000
                TabBound2.BorderSizePixel = 0
                TabBound2.Size = UDim2.new(0, 226, 0, 18)

                local BoxComps = {}

                function BoxComps:AddBasicToggle(Info,BoxOption, CallBack)
          
                    local ToggleFrame = Instance.new("Frame")
                    local OuterToggle = Instance.new("TextButton")
                    local InnerToggle = Instance.new("TextButton")
                    local ToggleName = Instance.new("TextLabel")
                    local ToggleBounds = Instance.new('TextButton')
                    local ToggleCCBounds = Instance.new('Frame') 
                    local UIListLayout = Instance.new("UIListLayout")

                    ToggleFrame.Name = "ToggleFrame"
                    if BoxOption == 'Box1' then
                        ToggleFrame.Parent = Box1
                    elseif BoxOption == 'Box2' then
                        ToggleFrame.Parent = Box2
                    end
                    ToggleFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleFrame.BackgroundTransparency = 1.000
                    ToggleFrame.Position = UDim2.new(0, 0, 0, 0)
                    ToggleFrame.Size = UDim2.new(0, 226, 0, 15)
                    ToggleFrame.ZIndex = 1
                    
                    ToggleCCBounds.Name = "ToggleCCBounds"
                    ToggleCCBounds.Parent = ToggleFrame
                    ToggleCCBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleCCBounds.BackgroundTransparency = 1.000
                    ToggleCCBounds.Position = UDim2.new(0, 158, 0, 1)
                    ToggleCCBounds.Size = UDim2.new(0, 62, 0, 13)
                    ToggleCCBounds.ZIndex = 1

                    UIListLayout.Parent = ToggleCCBounds
                    UIListLayout.FillDirection = Enum.FillDirection.Horizontal
                    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
                    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
                    UIListLayout.Padding = UDim.new(0, 6)

                    OuterToggle.Name = "OuterToggle"
                    OuterToggle.Parent = ToggleFrame
                    OuterToggle.BackgroundColor3 = Library.BackGroundColor
                    OuterToggle.BorderColor3 = Library.Black
                    OuterToggle.BorderSizePixel = 1
                    OuterToggle.Position = UDim2.new(0, 5, 0, 0)
                    OuterToggle.Size = UDim2.new(0, 13, 0, 13)
                    OuterToggle.Font = Enum.Font.SourceSans
                    OuterToggle.Text = ""
                    OuterToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
                    OuterToggle.TextSize = 14.000

                    InnerToggle.Name = "InnerToggle"
                    InnerToggle.Parent = OuterToggle
                    InnerToggle.BackgroundColor3 = Library.MainColor
                    InnerToggle.BorderColor3 = Library.OutLineColor
                    InnerToggle.BorderSizePixel = 1
                    InnerToggle.BorderMode = Enum.BorderMode.Inset
                    InnerToggle.Size = UDim2.new(1, 0, 1, 0)
                    InnerToggle.Position = UDim2.new(0, 0, 0, 0)
                    InnerToggle.Font = Enum.Font.SourceSans
                    InnerToggle.Text = ""
                    InnerToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
                    InnerToggle.TextSize = 14.000
                    InnerToggle.AutoButtonColor = false

                    ToggleName.Name = "ToggleName"
                    ToggleName.Parent = ToggleFrame
                    ToggleName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    ToggleName.BackgroundTransparency = 1.000
                    ToggleName.Position = UDim2.new(0, 16, 0, -1)
                    ToggleName.Size = UDim2.new(0, 130, 0, 15)
                    ToggleName.Font = Enum.Font.Code
                    ToggleName.Text = " "..Info.Name
                    RenderStepped:connect(function()
                        ToggleName.TextColor3 = Library.TextColor
                    end)
                    ToggleName.TextSize = 14.000
                    ToggleName.TextStrokeTransparency = 0.000
                    ToggleName.TextXAlignment = Enum.TextXAlignment.Left

                    ToggleBounds.Name = 'ToggleBounds'
                    ToggleBounds.Parent = ToggleName
                    ToggleBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ToggleBounds.BackgroundTransparency = 1
                    ToggleBounds.BorderSizePixel = 0
                    ToggleBounds.Size = UDim2.new(0, 130, 0, 16)
                    ToggleBounds.Position = UDim2.new(0, 12, 0, -1)
                    ToggleBounds.Text = ''

                    local MouseInToggle = false

                    OuterToggle.MouseEnter:Connect(function()
                        MouseInToggle = true
                        while MouseInToggle == true do
                            if Library.RainbowAccent == true then
                                OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                            else
                                OuterToggle.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)
                    ToggleBounds.MouseEnter:Connect(function()
                        MouseInToggle = true
                        while MouseInToggle == true do
                            if Library.RainbowAccent == true then
                                OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                            else
                                OuterToggle.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    OuterToggle.MouseLeave:Connect(function()
                        MouseInToggle = false
                        OuterToggle.BorderColor3 = Library.Black
                    end)
                    ToggleBounds.MouseLeave:Connect(function()
                        MouseInToggle = false
                        OuterToggle.BorderColor3 = Library.Black
                    end)

                    local Toggle = false

                    ToggleBounds.MouseButton1Click:Connect(function()
                        Toggle = not Toggle
                        CallBack(Toggle)
                    end)

                    InnerToggle.MouseButton1Click:Connect(function()
                        Toggle = not Toggle
                        CallBack(Toggle)
                    end)
                    task.spawn(function()
                        while RenderStepped:wait() do
                            if Library.RainbowAccent == true and Toggle == true then
                                InnerToggle.BackgroundColor3 = Library.RainbowAccentColor
                                InnerToggle.BorderColor3 = GetDarkerColor(Library.RainbowAccentColor) 
                            elseif Library.RainbowAccent == false and Toggle == true then
                                InnerToggle.BackgroundColor3 = Library.AccentColor
                                InnerToggle.BorderColor3 = GetDarkerColor(Library.AccentColor) 
                            elseif Toggle == false then
                                InnerToggle.BackgroundColor3 = Library.MainColor
                                InnerToggle.BorderColor3 = Library.OutLineColor
                            end
                        end
                    end)
                    local Extras = {}
                    function Extras:AddKeyBind(Org, Type, CallBack)
                        local KeyBind = Instance.new("TextButton")
                        local KeyDisplay = Instance.new('TextLabel')

                        KeyBind.Name = "KeyBind"
                        KeyBind.Parent = ToggleFrame
                        RenderStepped:connect(function()
                            KeyBind.BackgroundColor3 = Library.MainColor
                        end)
                        KeyBind.BorderColor3 = Library.Black
                        KeyBind.Position = UDim2.new(0, 196, 0, 1)
                        KeyBind.Size = UDim2.new(0, 24, 0, 12)
                        KeyBind.Text = ' '
                        KeyBind.AutoButtonColor = false

                        KeyDisplay.Parent = KeyBind
                        KeyDisplay.BackgroundTransparency = 1
                        KeyDisplay.BorderSizePixel = 0
                        KeyDisplay.Font = Enum.Font.Roboto
                        local OrgResult 
                        local OrgInput
                        if Type == 'MouseButton1' or Type == 'MouseButton2' then 

                            local OrgInput = tostring(Org)
                            OrgResult = string.gsub(OrgInput, 'Enum.UserInputType.', '')
                                            
                            if OrgResult == 'MouseButton1' then
                                OrgResult = 'LMB'
                            elseif OrgResult == 'MouseButton2'then
                                OrgResult = 'RMB'
                            end
                        elseif Type == 'Keyboard' then
                            local OrgInput = tostring(Org)
                            OrgResult = string.gsub(OrgInput, 'Enum.KeyCode.', '')
                        end

                        KeyDisplay.Text = OrgResult
                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                        KeyDisplay.Size = UDim2.new(0, 28, 0, 12)
                        RenderStepped:connect(function()
                            KeyDisplay.TextColor3 = Library.TextColor
                        end)
                        KeyDisplay.TextSize = 11.000
                        KeyDisplay.TextStrokeTransparency = 0.000
                        KeyDisplay.TextWrapped = true
                        KeyDisplay.TextXAlignment = Enum.TextXAlignment.Center

                        -- // KeyBindSetter Function \\ --
                        local UserInputService = game:GetService('UserInputService')
                        
                        local debounce = false
                        local Wait = false
                        --Default KeyBind--

                        task.spawn(function()
                            while wait() do
                                while Wait == true do
                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '.'

                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break
                                    end

                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '. .'

                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break
                                    end

                                    KeyDisplay.Position = UDim2.new(0, -1, 0, 0)
                                    KeyDisplay.TextSize = 13.000
                                    KeyDisplay.Text = '. . .'
                                    
                                    wait(0.5)

                                    if Wait == false then
                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        break

                                    end
                                end
                            end
                        end)

                        CallBack(Org)
                        
                        KeyBind.MouseButton1Click:Connect(function()
                            debounce = true
                            Wait = true
                                UserInputService.InputBegan:Connect(function(Input, Processed)
                                if debounce then
                                    if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.MouseButton2 then 
                                        Wait = false
                                        local Inputted = tostring(Input.UserInputType)
                                        local Result = string.gsub(Inputted, 'Enum.UserInputType.', '')
                                        
                                        if Result == 'MouseButton1' then
                                            Result = 'LMB'
                                        elseif Result == 'MouseButton2'then
                                            Result = 'RMB'
                                        end

                                        CallBack(Input.UserInputType)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    elseif Input.UserInputType == Enum.UserInputType.Keyboard then
                                        Wait = false
                                        local Inputted = tostring(Input.KeyCode)
                                        local Result = string.gsub(Inputted, 'Enum.KeyCode.', '')

                                        CallBack(Input.KeyCode)

                                        KeyDisplay.Position = UDim2.new(-0.075, 0, 0, 0)
                                        KeyDisplay.TextSize = 11.000
                                        KeyDisplay.Text = Result

                                        debounce = false

                                    end
                                end
                            end)
                        end)
                    end

                    function Extras:AddColorPicker ( Org, CallBack)

                         -- // Instance Creator \\ --
                        local ColorPicker = Instance.new("TextButton")
                        local ColorPickerBox = Instance.new("Frame")
                        local ColorPickerBounds = Instance.new('Frame')
                        local Led = Instance.new("Frame")
                        local RGB = Instance.new("TextBox")
                        local Hex = Instance.new("TextBox")
                        local HueSliderBorder = Instance.new("Frame")
                        local HueSlider = Instance.new("TextButton")
                        local UIGradient = Instance.new("UIGradient")
                        local Indicator = Instance.new("Frame")
                        local GradientBox = Instance.new("ImageButton")
                        local GradientIndicator = Instance.new("ImageLabel")
                        -- // Conversion from Object to usable HSV code \\ --
                        local OrgHSV = Org:ToHSV()
                        local Hue, Sat, Val = Org:ToHSV()

                        -- // Instance Properties \\ --

                        ColorPicker.Name = "ColorPicker"
                        ColorPicker.Parent = ToggleCCBounds
                        ColorPicker.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                        ColorPicker.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                        ColorPicker.Position = UDim2.new(0, 192, 0, 1)
                        ColorPicker.Size = UDim2.new(0, 28, 0, 13)
                        ColorPicker.Font = Enum.Font.SourceSans
                        ColorPicker.Text = ""
                        ColorPicker.TextColor3 = Color3.fromRGB(0, 0, 0)
                        ColorPicker.TextSize = 14.000
                        ColorPicker.AutoButtonColor = false

                        ColorPickerBox.Name = "ColorPickerBox"
                        ColorPickerBox.Parent = PickerFolder
                        ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

                        local CPosX = ColorPicker.AbsolutePosition.X - Box.AbsolutePosition.X
                        local CPosY = ColorPicker.AbsolutePosition.Y - Box.AbsolutePosition.Y

                        ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
                        ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
                        ColorPickerBox.ZIndex = 6

                        ColorPickerBounds.Name = "ColorPickerBounds"
                        ColorPickerBounds.Parent = ToggleFrame
                        ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                        ColorPickerBounds.Transparency = 1
                        ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
                        ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
                        ColorPickerBounds.ZIndex = 6

                        Led.Name = "Led"
                        Led.Parent = ColorPickerBox
                        task.spawn(function()
                            while wait() do
                                if Library.RainbowAccent == true then
                                    Led.BackgroundColor3 = Library.RainbowAccentColor 
                                else
                                Led.BackgroundColor3 = Library.AccentColor
                                end
                            end
                        end)
                        Led.BorderSizePixel = 0
                        Led.Size = UDim2.new(0, 220, 0, 2)

                        RGB.Name = "RGB"
                        RGB.Parent = ColorPickerBox
                        RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        RGB.BorderColor3 = Color3.fromRGB(50,50,50)
                        RGB.TextColor3 = Color3.fromRGB(255,255,255)
                        RGB.Position = UDim2.new(0, 113, 0, 199)
                        RGB.Size = UDim2.new(0, 102, 0, 20)
                        RGB.Font = Enum.Font.Code
                        RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                        RGB.PlaceholderText = " RGB Color"
                        RGB.Text = " 255, 0, 0"
                        RGB.TextSize = 13.000
                        RGB.TextStrokeTransparency = 0.000
                        RGB.TextWrapped = true
                        RGB.TextXAlignment = Enum.TextXAlignment.Left

                        Hex.Name = "Hex"
                        Hex.Parent = ColorPickerBox
                        Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
                        Hex.BorderColor3 = Color3.fromRGB(50,50,50)
                        Hex.TextColor3 = Color3.fromRGB(255,255,255)
                        Hex.Position = UDim2.new(0, 5, 0, 199)
                        Hex.Size = UDim2.new(0, 102, 0, 20)
                        Hex.Font = Enum.Font.Code
                        Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                        Hex.PlaceholderText = " Hex Color"
                        Hex.Text = " #FF0000"
                        Hex.TextSize = 14.000
                        Hex.TextStrokeTransparency = 0.000
                        Hex.TextWrapped = true
                        Hex.TextXAlignment = Enum.TextXAlignment.Left

                        HueSliderBorder.Parent = ColorPickerBox
                        HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
                        HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        HueSliderBorder.BorderSizePixel = 1
                        HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
                        HueSliderBorder.Rotation = 90.000
                        HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

                        HueSlider.Name = "HueSlider"
                        HueSlider.Parent = ColorPickerBox
                        HueSlider.AnchorPoint = Vector2.new(0, 1)
                        HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        HueSlider.BorderSizePixel = 0
                        HueSlider.ClipsDescendants = true
                        HueSlider.Position = UDim2.new(0, 112, 0, 107)
                        HueSlider.Rotation = 90.000
                        HueSlider.Size = UDim2.new(0, 185, 0, 15)
                        HueSlider.AutoButtonColor = false
                        HueSlider.Font = Enum.Font.SourceSans
                        HueSlider.Text = ""
                        HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                        HueSlider.TextSize = 14.000

                        UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
                        UIGradient.Parent = HueSlider

                        Indicator.Name = "Indicator"
                        Indicator.Parent = HueSlider
                        Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Indicator.Position = UDim2.new(0, 0, 0, -1)
                        Indicator.Size = UDim2.new(0, 1, 0, 6)

                        GradientBox.Name = "Gradient Box"
                        GradientBox.Parent = ColorPickerBox
                        GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                        GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        GradientBox.Position = UDim2.new(0, 5, 0, 7)
                        GradientBox.Size = UDim2.new(0, 185, 0, 185)
                        GradientBox.AutoButtonColor = false
                        GradientBox.Image = "rbxassetid://4155801252"

                        GradientIndicator.Parent = GradientBox
                        GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
                        GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        GradientIndicator.BackgroundTransparency = 1.000
                        GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
                        GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
                        GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

                        -- // Default Functions \\ --
                        local PickerOn = false

                        ColorPicker.MouseButton1Click:connect(function()
                            if ColorPickerBox.Visible == true then
                                PickerOn = true
                            else
                                PickerOn = false
                            end
                            for i,v in pairs (PickerFolder:GetChildren()) do
                                if v.Name == 'ColorPickerBox' then
                                    v.Visible = false
                                end
                            end
                            for i,v in pairs (DDFolder:GetChildren()) do
                                v.Visible = false
                            end
                            if PickerOn == true then
                                ColorPickerBox.Visible = false
                            else
                                ColorPickerBox.Visible = true
                            end
                        end)

                        local MouseInPicker = false

                        ColorPickerBox.MouseLeave:connect(function()
                            MouseInPicker = false 
                        end)

                        ColorPickerBox.MouseEnter:connect(function()
                            MouseInPicker = true
                        end)

                        local MouseInPickerBox = false
                        ColorPicker.MouseLeave:connect(function()
                            MouseInPickerBox = false 
                        end)

                        ColorPicker.MouseEnter:connect(function()
                            MouseInPickerBox = true
                        end)

                        local MouseInPickerBounds = false
                        ColorPickerBounds.MouseLeave:connect(function()
                            MouseInPickerBounds = false 
                        end)

                        ColorPickerBounds.MouseEnter:connect(function()
                            MouseInPickerBounds = true
                        end)

                        task.spawn(function()
                            UIS.InputBegan:Connect(function(Input, Processed)
                                if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    ColorPickerBox.Visible = false
                                end
                            end)
                        end)

                        -- // Gradient Box Function / Sat and Val Updaters \\ --
                        local GHeld = false

                        GradientBox.MouseButton1Down:Connect(function()
                            GHeld = true
                        end)

                        UIS.InputEnded:Connect(function(Input, Processed)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                GHeld = false
                            end
                        end)

                        local Value1
                        
                        RenderStepped:Connect(function(Delta)
                            if GHeld then
                                local MousePos = UIS:GetMouseLocation()
                                local GradientPos = GradientBox.AbsolutePosition
                                local GradientSize = GradientBox.AbsoluteSize
                                
                                local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                                Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                                local Value2 = -(Value1 - 1)

                                Sat = math.clamp(Saturation, 0, 1)
                                Val = math.clamp(Value2, 0, 1)

                                Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                                RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                                GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1) ,0)
                            end
                            GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
                        end)

                        GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)
                        -- // HueSlider Functions / Hue Updater \\ --

                        local SHeld = false

                        HueSlider.MouseButton1Down:Connect(function()
                            SHeld = true
                        end)

                        UIS.InputEnded:Connect(function(Input, Processed)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                SHeld = false
                            end
                        end)


                        RenderStepped:Connect(function(Delta)
                            if SHeld then
                                local MousePos = UIS:GetMouseLocation().Y
                                local SliderPos = HueSlider.AbsolutePosition.Y - 52
                                local SliderSize = HueSlider.AbsoluteSize.X
                                
                                local Pos = (MousePos - SliderPos) / SliderSize

                                Hue = math.clamp(Pos, 0, 1)

                                Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                                RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                            else

                            end

                            Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                                
                            if Hue == 1 then
                                Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                            end
                        end)

                        -- // Color Updater for CallBack and Color Picker Button \\ --
                        task.spawn(function()
                            while RenderStepped:wait() do
                                ColorPicker.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                                ColorPicker.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                                CallBack(Hue, Sat, Val)
                            end
                        end)


                        -- // Code to Integer Converter \\ --

                        function ToInteger (Color)
                            return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
                        end
                        
                        -- // From RGB to Hex Code Converter \\ --
                        function ToHex (Color)
                            local Red, Green, Blue = ToInteger(Color)
                            local HexChar = {
                                'A', 'B', 'C', 'D', 'E', 'F'
                            }
                            local ColorTable = {Red, Green, Blue}
                            local Result = ' #'
                        
                            for i,Code in pairs (ColorTable) do
                                local Divide = Code / 16
                                local FirstNumber = math.floor(Divide)
                                local Remainder = (Divide - FirstNumber) * 16
                                local Char
                        
                                if FirstNumber >= 10 then
                                    Char = HexChar[FirstNumber - 9]
                                else
                                    Char = FirstNumber
                                end
                        
                                if Remainder >= 10 then
                                    Char = Char..HexChar[Remainder - 9]
                                else 
                                    Char = Char..tonumber(Remainder)
                                end
                        
                                Result = Result..Char
                            end
                        
                            return tostring(Result)
                        end

                        -- // RGB to String Converter \\ --
                        function ToRGB(Color)
                            local Red, Green, Blue = ToInteger(Color)
                            local RGB = ' '..Red..', '..Green..', '..Blue
                            return tostring(RGB)
                        end

                        Hex.Text = ToHex(Org)
                        RGB.Text = ToRGB(Org)

                    end
                    return Extras
                end

                function BoxComps:AddSlider(Info, BoxOption , CallBack)

 
                    local SliderFrame = Instance.new("Frame")
                    local OuterSlider = Instance.new("TextButton")
                    local InnerSlider = Instance.new("TextButton")
                    local SliderInfo = Instance.new("TextLabel")
                    local Name = Instance.new("TextLabel")
                    local SliderBorder = Instance.new('Frame')

                    SliderFrame.Name = "SliderFrame"
                    if BoxOption == 'Box1' then
                        SliderFrame.Parent = Box1
                    elseif BoxOption == 'Box2' then
                        SliderFrame.Parent = Box2
                    end
                    SliderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderFrame.BackgroundTransparency = 1.000
                    SliderFrame.BorderSizePixel = 0
                    SliderFrame.Size = UDim2.new(0, 226, 0, 29)
                    SliderFrame.ZIndex = 2
                    SliderBorder.Parent = SliderFrame
                    SliderBorder.BackgroundColor3 = Library.MainColor
                    SliderBorder.BackgroundTransparency = 0
                    SliderBorder.BorderColor3 = Library.Black
                    SliderBorder.BorderSizePixel = 1
                    SliderBorder.Position = UDim2.new(0, 5, 0, 13)
                    SliderBorder.Size = UDim2.new(0, 216, 0, 14)

                    OuterSlider.Name = "OuterSlider"
                    OuterSlider.Parent = SliderBorder
                    RenderStepped:connect(function()
                        OuterSlider.BackgroundColor3 = Library.MainColor
                        OuterSlider.BorderColor3 = Library.OutLineColor
                    end)
                    OuterSlider.BorderMode = Enum.BorderMode.Inset
                    OuterSlider.Position = UDim2.new(0, 0, 0, 0)
                    OuterSlider.Size = UDim2.new(1, 0, 1, 0)
                    OuterSlider.Font = Enum.Font.SourceSans
                    OuterSlider.Text = ""
                    OuterSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    OuterSlider.TextSize = 14.000
                    OuterSlider.TextStrokeTransparency = 0.000
                    OuterSlider.AutoButtonColor = false

                    InnerSlider.Name = "InnerSlider"
                    InnerSlider.Parent = OuterSlider
                    task.spawn(function()
                        while wait() do
                            if Library.RainbowAccent == true then
                                InnerSlider.BackgroundColor3 = Library.RainbowAccentColor
                                InnerSlider.BorderColor3 = GetDarkerColor(Library.RainbowAccentColor)
                            else
                                InnerSlider.BackgroundColor3 = Library.AccentColor
                                InnerSlider.BorderColor3 = GetDarkerColor(Library.AccentColor)
                            end
                        end
                    end)
                    InnerSlider.BackgroundTransparency = 0
                    InnerSlider.BorderSizePixel = 1
                    InnerSlider.Position = UDim2.new(0, 0, 0, 0)
                    InnerSlider.Size = UDim2.new(0, 1, 0, 12)
                    InnerSlider.Visible = true
                    InnerSlider.Font = Enum.Font.SourceSans
                    InnerSlider.Text = ""
                    InnerSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    InnerSlider.TextSize = 14.000
                    InnerSlider.AutoButtonColor = false

                    SliderInfo.Name = "SliderInfo"
                    SliderInfo.Parent = OuterSlider
                    SliderInfo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderInfo.BackgroundTransparency = 1.000
                    SliderInfo.Position = UDim2.new(0, 73, 0, -1)
                    SliderInfo.Size = UDim2.new(0, 70, 0, 12)
                    SliderInfo.Font = Enum.Font.Code
                    SliderInfo.LineHeight = 0.950
                    SliderInfo.Text = Info.SliderName..': '..Info.SliderStartingValue..'m'
                    RenderStepped:connect(function()
                        SliderInfo.TextColor3 = Library.TextColor
                    end)
                    SliderInfo.TextSize = 13.000
                    SliderInfo.TextStrokeTransparency = 0.000

                    Name.Name = "Name"
                    Name.Parent = SliderFrame
                    Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Name.BackgroundTransparency = 1.000
                    Name.Position = UDim2.new(0, 6, 0, -4)
                    Name.Size = UDim2.new(0, 180, 0, 16)
                    Name.Font = Enum.Font.Code
                    Name.Text = Info.Name
                    RenderStepped:connect(function()
                        Name.TextColor3 = Library.TextColor
                    end)
                    Name.TextSize = 14.000
                    Name.TextStrokeTransparency = 0.000
                    Name.TextXAlignment = Enum.TextXAlignment.Left

                    local MouseInSlider = false

                    SliderBorder.MouseEnter:Connect(function()
                        MouseInSlider = true
                        while MouseInSlider == true do
                            if Library.RainbowAccent == true then
                                SliderBorder.BorderColor3 = Library.RainbowAccentColor 
                            else
                                SliderBorder.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    SliderBorder.MouseLeave:Connect(function()
                        MouseInSlider = false
                        SliderBorder.BorderColor3 = Library.Black
                    end)

                    -- Sliding Funco --

                    --Variables-------------------------------------------------
                    local UIS = game:GetService('UserInputService')
                    local OuterSlider = OuterSlider
                    local InnerSlider = InnerSlider
                    local SliderInfo = SliderInfo
                    local player = game.Players.LocalPlayer
                    local RUS = game:GetService('RunService')
                    local Value
                    SliderInfo.Text = Info.SliderName..': '..Info.SliderStartingValue..Info.Unit
                    --Properties------------------------------------------
                    local Held = false                                                    -- Variable for if you are holding down the slider, holds information that the script would need.
                    local factor = Info.Factor                                                 --Step is the factor
                    
                    --Default Settings--------------------------------------------
                    if Info.SliderStartingValue == 0 then
                        InnerSlider.Size = UDim2.new(Info.SliderStartingValue * factor, 1, InnerSlider.Size.Y.Scale, InnerSlider.Size.Y.Offset)
                    else
                        InnerSlider.Size = UDim2.new(Info.SliderStartingValue * factor, 0, InnerSlider.Size.Y.Scale, InnerSlider.Size.Y.Offset)
                    end
                    --Script------------------------------------------------------
                    local function Round(number, factor)                            
                        if factor == 0 then                                               -- IF there is no factor then it just returns the % that the innerslider covers              
                            return number        
                        end
                        return math.floor(number/factor+0.5) * factor                     -- Returns the sum of this to be the value of Pos, would now be an increment of 'factor'  e.g. only goes up in 0.01 by rounding down anything that isnt an increment/factor of 0.01 to an increment/factor of 0.01.  
                    end
                    
                    local function rounding(Num)
                        return math.floor(Num * 10 ^ Info.Round) / 10 ^ Info.Round                 -- Round's number is the amount of decimal place it rounds to, so if Round = 1 then it would round it down to 1 decimal place.
                    end
                    
                    OuterSlider.MouseButton1Down:Connect(function()                       -- When you click and are holding down the slider with LMB
                        Held = true                                                       -- Makes held variable true
                    end)
                    InnerSlider.MouseButton1Down:Connect(function()
                        Held = true
                    end)
                    UIS.InputEnded:Connect(function(Input, Processed)                     -- When you stop holding down the slider with LMB
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Held = false                                                  -- Makes held variable false
                        end
                    end)
                    
                    RUS.RenderStepped:Connect(function(delta)                            				  -- An event that fires prior to the frame being rendered
                        if Held then                                                     				  -- If the slider is being held then
                            local MousePos = UIS:GetMouseLocation().X                  				      -- gets the X value of where the Mouse is at on the screen
                            local ISPos = InnerSlider.Position                              		      -- ISPos is the InnerSlider's Position
                            local ISSize = InnerSlider.Size                                               -- ISSize is the InnerSlider's Size
                            local SliderPos = OuterSlider.AbsolutePosition.X                  				  -- Gets the X value of the Slider's Position
                            local SliderSize = OuterSlider.AbsoluteSize.X                                      -- Gets the X value of the Slider's Size
                            local Pos = Round((MousePos-SliderPos)/SliderSize, factor)                    -- '(MousePos-SliderPos)/SliderSize is the % of the slider that the inner slider covers. 1 is 100%, 0 is 0%. (With mouse it'd be the % of the way to the end of the slider),
                                                                                                        -- 'Round' sends the values to be rounded in a function, where Pos would be the value that the function returns
                            local Percentage = math.clamp(Pos,0,1)                                        -- For math.clamp, The first argument is the value you want to clamp, the 2nd is the minimum(smallest) value that the clamped value can be, 3rd is the maximum(biggest) value it can be
                    
                            if Percentage <= 0 then
                                InnerSlider.Size = UDim2.new(Percentage, 1, ISSize.Y.Scale, ISSize.Y.Offset)
                            elseif Percentage == 1 then
                                InnerSlider.Size = UDim2.new(Percentage, 2, ISSize.Y.Scale, ISSize.Y.Offset)
                            else
                                InnerSlider.Size = UDim2.new(Percentage, 0, ISSize.Y.Scale, ISSize.Y.Offset)  -- Makes the InnerSlider's X Scale according to the % it should cover
                            end

                            SliderInfo.Text = Info.SliderName..': '..rounding(Percentage * Info.SliderSize)..Info.Unit                                    -- Makes SliderInfo the % that the innerslider covers
                            Value =  math.floor(Percentage * Info.ValueSize)
                            CallBack(Value)
                        end 
                    end)
                end

                function BoxComps:AddDropDown (Info,BoxOption, Drops, CallBack)

                   
                    local DropDown = Instance.new("Frame")
                    local DropDownBounds = Instance.new('Frame')
                    local DropDownMain = Instance.new("TextButton")
                    local Arrow = Instance.new("ImageLabel")
                    local DDHolder = Instance.new("Frame")
                    local UIListLayout = Instance.new("UIListLayout")
                    local DropDownName = Instance.new("TextLabel")
                    local DropDownBorder = Instance.new('Frame')

                    local Selected = Info.Org
                    local Dropped = false
                    local MouseInDropDown = false
                    local BoxParent 

                    if BoxOption == 'Box1' then
                        BoxParent = Box1
                    elseif BoxOption == 'Box2' then
                        BoxParent = Box2
                    end
                    DropDown.Name = "DropDown"
                    DropDown.Parent = BoxParent
                    DropDown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDown.BackgroundTransparency = 1.000
                    DropDown.BorderSizePixel = 0
                    DropDown.Size = UDim2.new(0, 226, 0, 36)
                    DropDown.ZIndex = 5

                    DropDownName.Name = "DropDownName"
                    DropDownName.Parent = DropDown
                    DropDownName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDownName.BackgroundTransparency = 1.000
                    DropDownName.Position = UDim2.new(0, 6, 0, -4)
                    DropDownName.Size = UDim2.new(0, 180, 0, 16)
                    DropDownName.Font = Enum.Font.Code
                    DropDownName.Text = Info.Name
                    RenderStepped:connect(function()
                        DropDownName.TextColor3 = Library.TextColor
                    end)
                    DropDownName.TextSize = 14.000
                    DropDownName.TextStrokeTransparency = 0.000
                    DropDownName.TextXAlignment = Enum.TextXAlignment.Left

                    DropDownBounds.Name = "DropDownBounds"
                    DropDownBounds.Parent = DropDown
                    DropDownBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    DropDownBounds.BorderColor3 = Library.Black
                    DropDownBounds.BorderSizePixel = 1
                    DropDownBounds.Position = UDim2.new(0, 5, 0, 13)
                    DropDownBounds.Size = UDim2.new(0, 216, 0, 20)

                    DropDownMain.Name = "DropDownMain"
                    DropDownMain.Parent = DropDownBounds
                    RenderStepped:connect(function()
                        DropDownMain.BackgroundColor3 = Library.MainColor
                        DropDownMain.BorderColor3 = Library.OutLineColor
                    end)
                    DropDownMain.BorderMode = Enum.BorderMode.Inset
                    DropDownMain.Position = UDim2.new(0, 0, 0, 0)
                    DropDownMain.Size = UDim2.new(1, 0, 1, 0)
                    DropDownMain.Font = Enum.Font.Code
                    DropDownMain.Text = tostring(Info.Org)
                    RenderStepped:connect(function()
                        DropDownMain.TextColor3 = Library.TextColor
                    end)
                    DropDownMain.TextSize = 14.000
                    DropDownMain.TextStrokeTransparency = 0.000
                    DropDownMain.TextXAlignment = Enum.TextXAlignment.Left
                    DropDownMain.AutoButtonColor = false

                    Arrow.Name = "Arrow"
                    Arrow.Parent = DropDownMain
                    Arrow.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    Arrow.BackgroundTransparency = 1.000
                    Arrow.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    Arrow.Position = UDim2.new(0, 197, 0, 2)
                    Arrow.Size = UDim2.new(0, 15, 0, 15)
                    Arrow.Image = "http://www.roblox.com/asset/?id=9482956116"

                    local DDMPosX = DropDownMain.AbsolutePosition.X - Box.AbsolutePosition.X
                    local DDMPosY = DropDownMain.AbsolutePosition.Y - Box.AbsolutePosition.Y

                    DropDownBorder.Parent = DDFolder
                    DropDownBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropDownBorder.BackgroundTransparency = 1.000
                    DropDownBorder.BorderSizePixel = 0
                    DropDownBorder.Size = UDim2.new(0, 216, 0, 20)
                    DropDownBorder.Position = UDim2.new(0, DDMPosX, 0, DDMPosY)
                    DropDownBorder.AutomaticSize = Enum.AutomaticSize.XY

                    DDHolder.Name = "DDHolder"
                    DDHolder.Parent = DropDownBorder
                    RenderStepped:connect(function()
                        DDHolder.BackgroundColor3 = Library.MainColor
                    end)
                    DDHolder.BorderColor3 = Library.Black

                    DDHolder.Position = UDim2.new(0, 1, 0, 22)
                    DDHolder.Size = UDim2.new(0, 0, 0, 0)
                    DDHolder.Visible = false
                    DDHolder.AutomaticSize = Enum.AutomaticSize.XY

                    UIListLayout.Parent = DDHolder
                    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    UIListLayout.Padding = UDim.new(0, 1)

                    for i,v in pairs (Drops) do
                        local Drop = Instance.new("TextButton")
                        local MouseInDrop = false
                        Drop.Name = "Drop"
                        Drop.Parent = DDHolder
                        RenderStepped:connect(function()
                            Drop.BackgroundColor3 = Library.MainColor
                        end)
                        Drop.BorderColor3 = Color3.fromRGB(50, 50, 50)
                        Drop.Position = UDim2.new(0, 0, 0, -1)
                        Drop.Size = UDim2.new(0, 214, 0, 19)
                        Drop.Selected = true
                        Drop.Font = Enum.Font.Code
                        Drop.Text = ' '..tostring(v)
                        Drop.TextColor3 = Library.TextColor
                        Drop.TextSize = 14.000
                        Drop.TextStrokeTransparency = 0.000
                        Drop.TextXAlignment = Enum.TextXAlignment.Left
                        Drop.AutoButtonColor = false

                        Drop.MouseButton1Click:connect(function()
                            Selected = tostring(v)
                            CallBack(Selected)
                        end)

                        task.spawn(function()
                            while RenderStepped:wait() do
                                if Selected == tostring(v) and Library.RainbowAccent then
                                    Drop.TextColor3 = Library.RainbowAccentColor
                                elseif Selected == tostring(v) and not Library.RainbowAccent then
                                    Drop.TextColor3 = Library.AccentColor
                                elseif Selected ~= tostring(v) then
                                    Drop.TextColor3 = Library.TextColor
                                end
                            end
                        end)

                        Drop.MouseEnter:connect(function()
                            MouseInDrop = true
                            while MouseInDrop do
                                if Library.RainbowAccent then
                                    Drop.BorderColor3 = Library.RainbowAccentColor
                                elseif not Library.RainbowAccent then
                                    Drop.BorderColor3 = Library.AccentColor
                                end
                                wait()
                            end
                        end)

                        Drop.MouseLeave:connect(function()
                            MouseInDrop = false
                        end)

                        RenderStepped:connect(function()
                            if MouseInDrop == false then
                                Drop.BorderColor3 = Library.OutLineColor
                            end
                        end)
                    end

                    DropDownBounds.MouseEnter:connect(function()
                        MouseInDropDown = true
                        while MouseInDropDown do
                            if Library.RainbowAccent then
                                DropDownBounds.BorderColor3 = Library.RainbowAccentColor
                            elseif not Library.RainbowAccent then
                                DropDownBounds.BorderColor3 = Library.AccentColor
                            end
                            wait()
                        end
                    end)

                    DropDownBounds.MouseLeave:connect(function()
                        MouseInDropDown = false
                        DropDownBounds.BorderColor3 = Library.Black
                    end)


                   for i,v in pairs (DDHolder:GetChildren()) do
                        if v.Name == "Drop" then
                        v.Visible = true
                        end
                    end

                    DropDownMain.MouseButton1Click:Connect(function()
                        
                        if Dropped == false then
                            for i,v in pairs (DDFolder:GetChildren()) do
                                v.Visible = false
                            end
                            for i,v in pairs (PickerFolder:GetChildren()) do
                                v.Visible = false
                            end
                            DDHolder.Visible = true
                            DropDownBorder.Visible = true
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9489839300'
                            Arrow.Position = UDim2.new(0, 197, 0, 4)
                            Dropped = true
                            DDHolder.ZIndex = 8
                            DropDownBorder.ZIndex = 8

                        elseif Dropped == true then
                            DDHolder.Visible = false
                            DropDownBorder.Visible = false
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9482956116'
                            Arrow.Position = UDim2.new(0, 197, 0, 2)
                            Dropped = false
                            DDHolder.ZIndex = 1
                            DropDownBorder.ZIndex = 1
                        end
                        
                    end)

                    local MouseInDropBounds = false
                    DropDownBorder.MouseLeave:connect(function()
                        MouseInDropBounds = false 
                    end)
        
                    DropDownBorder.MouseEnter:connect(function()
                        MouseInDropBounds = true
                    end)
        
                    task.spawn(function()
                        UIS.InputBegan:Connect(function(Input, Processed)
                            if not MouseInDropBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 and Dropped then
                                if DropDownBorder.Visible and not MouseInDropDown then 
                                    DropDownBorder.Visible = false
                                end
                            end
                        end)
                    end)

                    RenderStepped:connect(function()
                        if DropDownBorder.Visible == true then 
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9489839300'
                            Arrow.Position = UDim2.new(0, 197, 0, 4)
                            Dropped = true
                        else
                            Arrow.Image = 'http://www.roblox.com/asset/?id=9482956116'
                            Arrow.Position = UDim2.new(0, 197, 0, 2)
                            Dropped = false
                        end
                    end)

                    task.spawn(function() 
                        while RenderStepped:wait() do
                            DropDownMain.Text = ' '..tostring(Selected)
                            CallBack(tostring(Selected))
                        end
                    end)
                end
                function BoxComps:AddNamewColorPicker (Info,BoxOption, Org, CallBack)
                    local CCBG = Instance.new("Frame")
                    local CPN = Instance.new("TextLabel")
                    local CPB = Instance.new("TextButton")

                    local ColorPickerBox = Instance.new("Frame")
                    local ColorPickerBounds = Instance.new('Frame')
                    local Led = Instance.new("Frame")
                    local RGB = Instance.new("TextBox")
                    local Hex = Instance.new("TextBox")
                    local HueSliderBorder = Instance.new("Frame")
                    local HueSlider = Instance.new("TextButton")
                    local UIGradient = Instance.new("UIGradient")
                    local Indicator = Instance.new("Frame")
                    local GradientBox = Instance.new("ImageButton")
                    local GradientIndicator = Instance.new("ImageLabel")
                    -- // Conversion from Object to usable HSV code \\ --

                    local OrgHSV = Org:ToHSV()
                    local Hue, Sat, Val = Org:ToHSV()

                    --Properties:

                    CCBG.Name = "CCBG"
                    if BoxOption == 'Box1' then
                        CCBG.Parent = Box1
                    elseif BoxOption == 'Box2' then
                        CCBG.Parent = Box2
                    end
                    CCBG.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    CCBG.BackgroundTransparency = 1.000
                    CCBG.Position = UDim2.new(0, 0, 0, 0)
                    CCBG.Size = UDim2.new(0, 226, 0, 17)

                    CPN.Name = "CPN"
                    CPN.Parent = CCBG
                    CPN.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
                    CPN.BackgroundTransparency = 1.000
                    CPN.BorderSizePixel = 0
                    CPN.Position = UDim2.new(0, 6, 0, -1)
                    CPN.Size = UDim2.new(0, 87, 0, 16)
                    CPN.Font = Enum.Font.Code
                    CPN.Text = Info.Name
                    RenderStepped:connect(function()
                        CPN.TextColor3 = Library.TextColor
                    end)
                    CPN.TextSize = 14.000
                    CPN.TextStrokeTransparency = 0.000
                    CPN.TextXAlignment = Enum.TextXAlignment.Left

                    CPB.Name = "CPB"
                    CPB.Parent = CCBG
                    CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                    CPB.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    CPB.Position = UDim2.new(0, 192, 0, 1)
                    CPB.Size = UDim2.new(0, 28, 0, 13)
                    CPB.Font = Enum.Font.SourceSans
                    CPB.Text = ""
                    CPB.TextColor3 = Color3.fromRGB(0, 0, 0)
                    CPB.TextSize = 14.000
                    CPB.AutoButtonColor = false

                    ColorPickerBox.Name = "ColorPickerBox"
                    ColorPickerBox.Parent = PickerFolder
                    ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

                    local CPosX = CPB.AbsolutePosition.X - Box.AbsolutePosition.X
                    local CPosY = CPB.AbsolutePosition.Y - Box.AbsolutePosition.Y

                    ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
                    ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
                    ColorPickerBox.ZIndex = 6

                    ColorPickerBounds.Name = "ColorPickerBounds"
                    ColorPickerBounds.Parent = CCBG
                    ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
                    ColorPickerBounds.Transparency = 1
                    ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
                    ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
                    ColorPickerBounds.ZIndex = 6

                    Led.Name = "Led"
                    Led.Parent = ColorPickerBox
                    task.spawn(function()
                        while wait() do
                            if Library.RainbowAccent == true then
                                Led.BackgroundColor3 = Library.RainbowAccentColor 
                            else
                            Led.BackgroundColor3 = Library.AccentColor
                            end
                        end
                    end)
                    Led.BorderSizePixel = 0
                    Led.Size = UDim2.new(0, 220, 0, 2)

                    RGB.Name = "RGB"
                    RGB.Parent = ColorPickerBox
                    RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    RGB.BorderColor3 = Color3.fromRGB(50,50,50)
                    RGB.TextColor3 = Color3.fromRGB(255,255,255)
                    RGB.Position = UDim2.new(0, 113, 0, 199)
                    RGB.Size = UDim2.new(0, 102, 0, 20)
                    RGB.Font = Enum.Font.Code
                    RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                    RGB.PlaceholderText = " RGB Color"
                    RGB.Text = " 255, 0, 0"
                    RGB.TextSize = 13.000
                    RGB.TextStrokeTransparency = 0.000
                    RGB.TextWrapped = true
                    RGB.TextXAlignment = Enum.TextXAlignment.Left

                    Hex.Name = "Hex"
                    Hex.Parent = ColorPickerBox
                    Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
                    Hex.BorderColor3 = Color3.fromRGB(50,50,50)
                    Hex.TextColor3 = Color3.fromRGB(255,255,255)
                    Hex.Position = UDim2.new(0, 5, 0, 199)
                    Hex.Size = UDim2.new(0, 102, 0, 20)
                    Hex.Font = Enum.Font.Code
                    Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                    Hex.PlaceholderText = " Hex Color"
                    Hex.Text = " #FF0000"
                    Hex.TextSize = 14.000
                    Hex.TextStrokeTransparency = 0.000
                    Hex.TextWrapped = true
                    Hex.TextXAlignment = Enum.TextXAlignment.Left

                    HueSliderBorder.Parent = ColorPickerBox
                    HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
                    HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    HueSliderBorder.BorderSizePixel = 1
                    HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
                    HueSliderBorder.Rotation = 90.000
                    HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

                    HueSlider.Name = "HueSlider"
                    HueSlider.Parent = ColorPickerBox
                    HueSlider.AnchorPoint = Vector2.new(0, 1)
                    HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    HueSlider.BorderSizePixel = 0
                    HueSlider.ClipsDescendants = true
                    HueSlider.Position = UDim2.new(0, 112, 0, 107)
                    HueSlider.Rotation = 90.000
                    HueSlider.Size = UDim2.new(0, 185, 0, 15)
                    HueSlider.AutoButtonColor = false
                    HueSlider.Font = Enum.Font.SourceSans
                    HueSlider.Text = ""
                    HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
                    HueSlider.TextSize = 14.000

                    UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
                    UIGradient.Parent = HueSlider

                    Indicator.Name = "Indicator"
                    Indicator.Parent = HueSlider
                    Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    Indicator.Position = UDim2.new(0, 0, 0, -1)
                    Indicator.Size = UDim2.new(0, 1, 0, 6)

                    GradientBox.Name = "Gradient Box"
                    GradientBox.Parent = ColorPickerBox
                    GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                    GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
                    GradientBox.Position = UDim2.new(0, 5, 0, 7)
                    GradientBox.Size = UDim2.new(0, 185, 0, 185)
                    GradientBox.AutoButtonColor = false
                    GradientBox.Image = "rbxassetid://4155801252"

                    GradientIndicator.Parent = GradientBox
                    GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
                    GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    GradientIndicator.BackgroundTransparency = 1.000
                    GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
                    GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
                    GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

                    -- // Default Functions \\ --
                    local PickerOn = false

                    CPB.MouseButton1Click:connect(function()
                        if ColorPickerBox.Visible == true then
                            PickerOn = true
                        else
                            PickerOn = false
                        end
                        for i,v in pairs (PickerFolder:GetChildren()) do
                            if v.Name == 'ColorPickerBox' then
                                v.Visible = false
                            end
                        end
                        for i,v in pairs (DDFolder:GetChildren()) do
                            v.Visible = false
                        end
                        if PickerOn == true then
                            ColorPickerBox.Visible = false
                        else
                            ColorPickerBox.Visible = true
                        end
                    end)

                    local MouseInPicker = false

                    ColorPickerBox.MouseLeave:connect(function()
                        MouseInPicker = false 
                    end)

                    ColorPickerBox.MouseEnter:connect(function()
                        MouseInPicker = true
                    end)

                    local MouseInPickerBox = false
                    CPB.MouseLeave:connect(function()
                        MouseInPickerBox = false 
                    end)

                    CPB.MouseEnter:connect(function()
                        MouseInPickerBox = true
                    end)

                    local MouseInPickerBounds = false
                    ColorPickerBounds.MouseLeave:connect(function()
                        MouseInPickerBounds = false 
                    end)

                    ColorPickerBounds.MouseEnter:connect(function()
                        MouseInPickerBounds = true
                    end)

                    task.spawn(function()
                        UIS.InputBegan:Connect(function(Input, Processed)
                            if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                ColorPickerBox.Visible = false
                            end
                        end)
                    end)

                    -- // Gradient Box Function / Sat and Val Updaters \\ --
                    local GHeld = false

                    GradientBox.MouseButton1Down:Connect(function()
                        GHeld = true
                    end)

                    UIS.InputEnded:Connect(function(Input, Processed)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            GHeld = false
                        end
                    end)

                    local Value1
                        
                    RenderStepped:Connect(function(Delta)
                        if GHeld then
                            local MousePos = UIS:GetMouseLocation()
                            local GradientPos = GradientBox.AbsolutePosition
                            local GradientSize = GradientBox.AbsoluteSize
                                
                            local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                            Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                            local Value2 = -(Value1 - 1)

                            Sat = math.clamp(Saturation, 0, 1)
                            Val = math.clamp(Value2, 0, 1)

                            Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val)
                            RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                            GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                        end
                        GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
                    end)

                    GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

                    -- // HueSlider Functions / Hue Updater \\ --

                    local SHeld = false

                    HueSlider.MouseButton1Down:Connect(function()
                        SHeld = true
                    end)

                    UIS.InputEnded:Connect(function(Input, Processed)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            SHeld = false
                        end
                    end)


                    RenderStepped:Connect(function(Delta)
                        if SHeld then
                            local MousePos = UIS:GetMouseLocation().Y
                            local SliderPos = HueSlider.AbsolutePosition.Y - 52
                            local SliderSize = HueSlider.AbsoluteSize.X
                                
                            local Pos = (MousePos - SliderPos) / SliderSize

                            Hue = math.clamp(Pos, 0, 1)

                            Hex.Text = ToHex(Color3.fromHSV(Hue, Sat, Val))
                            RGB.Text = ToRGB(Color3.fromHSV(Hue, Sat, Val))
                        else

                        end

                        Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                                
                        if Hue == 1 then
                            Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                        end
                    end)

                    -- // Color Updater for CallBack and Color Picker Button \\ --
                    task.spawn(function()
                        while RenderStepped:wait() do
                            CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                            CallBack(Hue, Sat, Val)
                        end
                    end)

                    -- // Code to Integer Converter \\ --

                    function ToInteger (Color)
                        return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
                    end
                        
                    -- // From RGB to Hex Code Converter \\ --
                    function ToHex (Color)
                        local Red, Green, Blue = ToInteger(Color)
                        local HexChar = {
                            'A', 'B', 'C', 'D', 'E', 'F'
                        }
                        local ColorTable = {Red, Green, Blue}
                        local Result = ' #'
                        
                        for i,Code in pairs (ColorTable) do
                            local Divide = Code / 16
                            local FirstNumber = math.floor(Divide)
                            local Remainder = (Divide - FirstNumber) * 16
                            local Char
                        
                            if FirstNumber >= 10 then
                                Char = HexChar[FirstNumber - 9]
                            else
                                Char = FirstNumber
                            end
                        
                            if Remainder >= 10 then
                                Char = Char..HexChar[Remainder - 9]
                            else 
                                Char = Char..tonumber(Remainder)
                            end
                        
                            Result = Result..Char
                        end
                        
                        return tostring(Result)
                    end

                    -- // RGB to String Converter \\ --
                    function ToRGB(Color)
                        local Red, Green, Blue = ToInteger(Color)
                        local RGB = ' '..Red..', '..Green..', '..Blue
                        return tostring(RGB)
                    end

                    Hex.Text = ToHex(Org)
                    RGB.Text = ToRGB(Org)
                end
                return BoxComps  
            end
            return Boxes
    end

    function InnerLibrary:CreateSettingTab()
        local Tab = Instance.new('TextButton')
        local Box = Instance.new('Frame')
        local Border = Instance.new('Frame') 
        local DDFolder = Instance.new('Folder')

        Tab.Parent = TabHolder
        Tab.BackgroundColor3 = Library.BackGroundColor
        Tab.BorderColor3 = Library.OutLineColor
        RenderStepped:connect(function()
        Tab.TextColor3 = Library.TextColor
        Tab.BorderColor3 = Library.OutLineColor
        end)
        Tab.Size = UDim2.new(0, 0, 0, 21)
        Tab.Text = ' Settings '
        Tab.Font = Enum.Font.Code
        Tab.TextStrokeTransparency = 0
        Tab.TextSize = 16
        Tab.AutomaticSize = Enum.AutomaticSize.XY
        Tab.AutoButtonColor = false

        Box.Parent = PageFolder
        RenderStepped:connect(function()
        Box.BackgroundColor3 = Library.MainColor
        Box.BorderColor3 = Library.OutLineColor
        end)
        Box.Position = UDim2.new(0, 11, 0, 32)
        Box.Size = UDim2.new(0, 485, 0, 498)
        Box.Visible = false

        Border.Name = "Border"
        Border.Parent = Box
        RenderStepped:connect(function()
        Border.BackgroundColor3 = Library.MainColor
        end)
        Border.BorderSizePixel = 0
        Border.Position = UDim2.new(0, ((Tab.AbsolutePosition.X - TopBar.AbsolutePosition.X) - 17.5) , 0, -1)  
        Border.Size = UDim2.new(0,Tab.AbsoluteSize.X , 0, 1)
        Border.Visible = true
        Tab.MouseButton1Click:Connect(function()
            for i,v in pairs (PageFolder:GetChildren()) do
                    v.Visible = false
            end
            for i,v in pairs (TabHolder:GetChildren()) do
                if v.ClassName == 'TextButton' then
                v.BackgroundColor3 = Library.BackGroundColor
                end
            end
            Tab.BackgroundColor3 = Library.MainColor
            Box.Visible = true
        end)

        RenderStepped:connect(function()
            if Box.Visible == true then
                Tab.BackgroundColor3 = Library.MainColor
            else
                Tab.BackgroundColor3 = Library.BackGroundColor
            end
        end)

        DDFolder.Parent = Box

        local LeftGroupBox = Instance.new("Frame")
        local UIListLayout = Instance.new("UIListLayout")

        LeftGroupBox.Name = "LeftGroupBox"
        LeftGroupBox.Parent = Box
        LeftGroupBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        LeftGroupBox.BackgroundTransparency = 1.000
        LeftGroupBox.ClipsDescendants = true
        LeftGroupBox.Position = UDim2.new(0, 10, 0, 10)
        LeftGroupBox.Size = UDim2.new(0, 228, 0, 478)

        UIListLayout.Parent = LeftGroupBox
        UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Padding = UDim.new(0, 10)

        local LeftBox = Instance.new("Frame")
        local Led = Instance.new("Frame")
        local UIListLayout = Instance.new("UIListLayout")
        local BoxTitle = Instance.new('TextLabel')
        local PickerFolder = Instance.new('Folder')
        LeftBox.Name = "LeftBox"
        LeftBox.Parent = LeftGroupBox
        RenderStepped:connect(function()
        LeftBox.BackgroundColor3 = Library.BackGroundColor
        LeftBox.BorderColor3 = Library.OutLineColor
        end)
        LeftBox.ClipsDescendants = false
        LeftBox.BackgroundTransparency = 0.000
        LeftBox.Visible = true
        LeftBox.Size = UDim2.new(0, 226, 0,  165)

        PickerFolder.Parent = Box
        Led.Name = "Led"
        Led.Parent = LeftBox
        task.spawn(function()
            while wait() do
                if Library.RainbowAccent == true then
                    Led.BackgroundColor3 = Library.RainbowAccentColor 
                else
                Led.BackgroundColor3 = Library.AccentColor
                end
            end
        end)
        Led.BorderSizePixel = 0
        Led.Position = UDim2.new(0, 0, 0, 0)
        Led.Size = UDim2.new(0, 226, 0, 2)

        UIListLayout.Parent = LeftBox
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Padding = UDim.new(0, 4)

        BoxTitle.Name = "BoxTitle"
        BoxTitle.Parent = LeftBox
        BoxTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        BoxTitle.BackgroundTransparency = 1.000
        BoxTitle.Position = UDim2.new(0, 0, 0, 0)
        BoxTitle.Size = UDim2.new(0, 190, 0, 16)
        BoxTitle.Font = Enum.Font.Code
        BoxTitle.Text = " Theme"
        RenderStepped:connect(function()
            BoxTitle.TextColor3 = Library.TextColor
        end)
        BoxTitle.TextSize = 14.000
        BoxTitle.TextStrokeTransparency = 0.000
        BoxTitle.TextXAlignment = Enum.TextXAlignment.Left

        function AddBackgroundColorPicker (CallBack)
            local CCBG = Instance.new("Frame")
            local CPN = Instance.new("TextLabel")
            local CPB = Instance.new("TextButton")

            local ColorPickerBox = Instance.new("Frame")
            local ColorPickerBounds = Instance.new('Frame')
            local Led = Instance.new("Frame")
            local RGB = Instance.new("TextBox")
            local Hex = Instance.new("TextBox")
            local HueSliderBorder = Instance.new("Frame")
            local HueSlider = Instance.new("TextButton")
            local UIGradient = Instance.new("UIGradient")
            local Indicator = Instance.new("Frame")
            local GradientBox = Instance.new("ImageButton")
            local GradientIndicator = Instance.new("ImageLabel")
            -- // Conversion from Object to usable HSV code \\ --
            local OrgHSV = Library.BackGroundColor:ToHSV()
            local Hue, Sat, Val = Library.BackGroundColor:ToHSV()

            --Properties:

            CCBG.Name = "CCBG"
            CCBG.Parent = LeftBox
            CCBG.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            CCBG.BackgroundTransparency = 1.000
            CCBG.Position = UDim2.new(0, 0, 0, 0)
            CCBG.Size = UDim2.new(0, 226, 0, 17)

            CPN.Name = "CPN"
            CPN.Parent = CCBG
            CPN.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
            CPN.BackgroundTransparency = 1.000
            CPN.BorderSizePixel = 0
            CPN.Position = UDim2.new(0, 6, 0, -1)
            CPN.Size = UDim2.new(0, 87, 0, 16)
            CPN.Font = Enum.Font.Code
            CPN.Text = 'Background Color'
            RenderStepped:connect(function()
                CPN.TextColor3 = Library.TextColor
            end)
            CPN.TextSize = 14.000
            CPN.TextStrokeTransparency = 0.000
            CPN.TextXAlignment = Enum.TextXAlignment.Left

            CPB.Name = "CPB"
            CPB.Parent = CCBG
            CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
            CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
            CPB.Position = UDim2.new(0, 192, 0, 1)
            CPB.Size = UDim2.new(0, 28, 0, 13)
            CPB.Font = Enum.Font.SourceSans
            CPB.Text = ""
            CPB.TextColor3 = Color3.fromRGB(0, 0, 0)
            CPB.TextSize = 14.000
            CPB.AutoButtonColor = false

            ColorPickerBox.Name = "ColorPickerBox"
            ColorPickerBox.Parent = PickerFolder
            ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
            ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

            local CPosX = CPB.AbsolutePosition.X - Box.AbsolutePosition.X
            local CPosY = CPB.AbsolutePosition.Y - Box.AbsolutePosition.Y

            ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
            ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
            ColorPickerBox.ZIndex = 6

            ColorPickerBounds.Name = "ColorPickerBounds"
            ColorPickerBounds.Parent = CCBG
            ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
            ColorPickerBounds.Transparency = 1
            ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
            ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
            ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
            ColorPickerBounds.ZIndex = 6

            Led.Name = "Led"
            Led.Parent = ColorPickerBox
            task.spawn(function()
                while wait() do
                    if Library.RainbowAccent == true then
                        Led.BackgroundColor3 = Library.RainbowAccentColor 
                    else
                    Led.BackgroundColor3 = Library.AccentColor
                    end
                end
            end)
            Led.BorderSizePixel = 0
            Led.Size = UDim2.new(0, 220, 0, 2)

            RGB.Name = "RGB"
            RGB.Parent = ColorPickerBox
            RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
            RGB.BorderColor3 = Color3.fromRGB(50,50,50)
            RGB.TextColor3 = Color3.fromRGB(255,255,255)
            RGB.Position = UDim2.new(0, 113, 0, 199)
            RGB.Size = UDim2.new(0, 102, 0, 20)
            RGB.Font = Enum.Font.Code
            RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            RGB.PlaceholderText = " RGB Color"
            RGB.Text = " 255, 0, 0"
            RGB.TextSize = 13.000
            RGB.TextStrokeTransparency = 0.000
            RGB.TextWrapped = true
            RGB.TextXAlignment = Enum.TextXAlignment.Left

            Hex.Name = "Hex"
            Hex.Parent = ColorPickerBox
            Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
            Hex.BorderColor3 = Color3.fromRGB(50,50,50)
            Hex.TextColor3 = Color3.fromRGB(255,255,255)
            Hex.Position = UDim2.new(0, 5, 0, 199)
            Hex.Size = UDim2.new(0, 102, 0, 20)
            Hex.Font = Enum.Font.Code
            Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            Hex.PlaceholderText = " Hex Color"
            Hex.Text = " #FF0000"
            Hex.TextSize = 14.000
            Hex.TextStrokeTransparency = 0.000
            Hex.TextWrapped = true
            Hex.TextXAlignment = Enum.TextXAlignment.Left

            HueSliderBorder.Parent = ColorPickerBox
            HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
            HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSliderBorder.BorderSizePixel = 1
            HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
            HueSliderBorder.Rotation = 90.000
            HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

            HueSlider.Name = "HueSlider"
            HueSlider.Parent = ColorPickerBox
            HueSlider.AnchorPoint = Vector2.new(0, 1)
            HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSlider.BorderSizePixel = 0
            HueSlider.ClipsDescendants = true
            HueSlider.Position = UDim2.new(0, 112, 0, 107)
            HueSlider.Rotation = 90.000
            HueSlider.Size = UDim2.new(0, 185, 0, 15)
            HueSlider.AutoButtonColor = false
            HueSlider.Font = Enum.Font.SourceSans
            HueSlider.Text = ""
            HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
            HueSlider.TextSize = 14.000

            UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
            UIGradient.Parent = HueSlider

            Indicator.Name = "Indicator"
            Indicator.Parent = HueSlider
            Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Indicator.Position = UDim2.new(0, 0, 0, -1)
            Indicator.Size = UDim2.new(0, 1, 0, 6)

            GradientBox.Name = "Gradient Box"
            GradientBox.Parent = ColorPickerBox
            GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
            GradientBox.Position = UDim2.new(0, 5, 0, 7)
            GradientBox.Size = UDim2.new(0, 185, 0, 185)
            GradientBox.AutoButtonColor = false
            GradientBox.Image = "rbxassetid://4155801252"

            GradientIndicator.Parent = GradientBox
            GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
            GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            GradientIndicator.BackgroundTransparency = 1.000
            GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
            GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
            GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

            -- // Default Functions \\ --
            local PickerOn = false

            CPB.MouseButton1Click:connect(function()
                if ColorPickerBox.Visible == true then
                    PickerOn = true
                else
                    PickerOn = false
                end
                for i,v in pairs (PickerFolder:GetChildren()) do
                    if v.Name == 'ColorPickerBox' then
                        v.Visible = false
                    end
                end
                for i,v in pairs (DDFolder:GetChildren()) do
                    v.Visible = false
                end
                if PickerOn == true then
                    ColorPickerBox.Visible = false
                else
                    ColorPickerBox.Visible = true
                end
            end)
            local MouseInPicker = false

            ColorPickerBox.MouseLeave:connect(function()
                MouseInPicker = false 
            end)

            ColorPickerBox.MouseEnter:connect(function()
                MouseInPicker = true
            end)

            local MouseInPickerBox = false
            CPB.MouseLeave:connect(function()
                MouseInPickerBox = false 
            end)

            CPB.MouseEnter:connect(function()
                MouseInPickerBox = true
            end)

            local MouseInPickerBounds = false
            ColorPickerBounds.MouseLeave:connect(function()
                MouseInPickerBounds = false 
            end)

            ColorPickerBounds.MouseEnter:connect(function()
                MouseInPickerBounds = true
            end)

            task.spawn(function()
                UIS.InputBegan:Connect(function(Input, Processed)
                    if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        ColorPickerBox.Visible = false
                    end
                end)
            end)

            -- // Gradient Box Function / Sat and Val Updaters \\ --
            local GHeld = false

            GradientBox.MouseButton1Down:Connect(function()
                GHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    GHeld = false
                end
            end)

            local Value1
                
            RenderStepped:Connect(function(Delta)
                if GHeld then
                    local MousePos = UIS:GetMouseLocation()
                    local GradientPos = GradientBox.AbsolutePosition
                    local GradientSize = GradientBox.AbsoluteSize
                        
                    local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                    Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                    local Value2 = -(Value1 - 1)

                    Sat = math.clamp(Saturation, 0, 1)
                    Val = math.clamp(Value2, 0, 1)

                    Hex.Text = ToHex(Library.BackGroundColor)
                    RGB.Text = ToRGB(Library.BackGroundColor)
                    GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                end
                GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
            end)
            GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

            -- // HueSlider Functions / Hue Updater \\ --

            local SHeld = false

            HueSlider.MouseButton1Down:Connect(function()
                SHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    SHeld = false
                end
            end)


            RenderStepped:Connect(function(Delta)
                if SHeld then
                    local MousePos = UIS:GetMouseLocation().Y
                    local SliderPos = HueSlider.AbsolutePosition.Y - 52
                    local SliderSize = HueSlider.AbsoluteSize.X
                        
                    local Pos = (MousePos - SliderPos) / SliderSize

                    Hue = math.clamp(Pos, 0, 1)

                    Hex.Text = ToHex(Library.BackGroundColor)
                    RGB.Text = ToRGB(Library.BackGroundColor)
                    
                else

                end
                Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                        
                if Hue == 1 then
                    Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                end
            end)

            -- // Color Updater for CallBack and Color Picker Button \\ --
            task.spawn(function()
                while RenderStepped:wait() do
                    CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                    CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                    CallBack(Hue, Sat, Val)
                end
            end)
            -- // Code to Integer Converter \\ --

            function ToInteger (Color)
                return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
            end
                
            -- // From RGB to Hex Code Converter \\ --
            function ToHex (Color)
                local Red, Green, Blue = ToInteger(Color)
                local HexChar = {
                    'A', 'B', 'C', 'D', 'E', 'F'
                }
                local ColorTable = {Red, Green, Blue}
                local Result = ' #'
                
                for i,Code in pairs (ColorTable) do
                    local Divide = Code / 16
                    local FirstNumber = math.floor(Divide)
                    local Remainder = (Divide - FirstNumber) * 16
                    local Char
                
                    if FirstNumber >= 10 then
                        Char = HexChar[FirstNumber - 9]
                    else
                        Char = FirstNumber
                    end
                
                    if Remainder >= 10 then
                        Char = Char..HexChar[Remainder - 9]
                    else 
                        Char = Char..tonumber(Remainder)
                    end
                
                    Result = Result..Char
                end
                
                return tostring(Result)
            end

            -- // RGB to String Converter \\ --
            function ToRGB(Color)
                local Red, Green, Blue = ToInteger(Color)
                local RGB = ' '..Red..', '..Green..', '..Blue
                return tostring(RGB)
            end

            Hex.Text = ToHex(Library.BackGroundColor)  
            RGB.Text = ToRGB(Library.BackGroundColor)

        end

        function AddMainColorPicker (CallBack)
            local CCBG = Instance.new("Frame")
            local CPN = Instance.new("TextLabel")
            local CPB = Instance.new("TextButton")

            local ColorPickerBox = Instance.new("Frame")
            local ColorPickerBounds = Instance.new('Frame')
            local Led = Instance.new("Frame")
            local RGB = Instance.new("TextBox")
            local Hex = Instance.new("TextBox")
            local HueSliderBorder = Instance.new("Frame")
            local HueSlider = Instance.new("TextButton")
            local UIGradient = Instance.new("UIGradient")
            local Indicator = Instance.new("Frame")
            local GradientBox = Instance.new("ImageButton")
            local GradientIndicator = Instance.new("ImageLabel")
            -- // Conversion from Object to usable HSV code \\ --
            local OrgHSV = Library.MainColor:ToHSV()
            local Hue, Sat, Val = Library.MainColor:ToHSV()

            --Properties:

            CCBG.Name = "CCBG"
            CCBG.Parent = LeftBox
            CCBG.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            CCBG.BackgroundTransparency = 1.000
            CCBG.Position = UDim2.new(0, 0, 0, 0)
            CCBG.Size = UDim2.new(0, 226, 0, 17)

            CPN.Name = "CPN"
            CPN.Parent = CCBG
            CPN.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
            CPN.BackgroundTransparency = 1.000
            CPN.BorderSizePixel = 0
            CPN.Position = UDim2.new(0, 6, 0, -1)
            CPN.Size = UDim2.new(0, 87, 0, 16)
            CPN.Font = Enum.Font.Code
            CPN.Text = 'Main Color'
            RenderStepped:connect(function()
                CPN.TextColor3 = Library.TextColor
            end)
            CPN.TextSize = 14.000
            CPN.TextStrokeTransparency = 0.000
            CPN.TextXAlignment = Enum.TextXAlignment.Left

            CPB.Name = "CPB"
            CPB.Parent = CCBG
            CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
            CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
            CPB.Position = UDim2.new(0, 192, 0, 1)
            CPB.Size = UDim2.new(0, 28, 0, 13)
            CPB.Font = Enum.Font.SourceSans
            CPB.Text = ""
            CPB.TextColor3 = Color3.fromRGB(0, 0, 0)
            CPB.TextSize = 14.000
            CPB.AutoButtonColor = false

            ColorPickerBox.Name = "ColorPickerBox"
            ColorPickerBox.Parent = PickerFolder
            ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
            ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

            local CPosX = CPB.AbsolutePosition.X - Box.AbsolutePosition.X
            local CPosY = CPB.AbsolutePosition.Y - Box.AbsolutePosition.Y

            ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
            ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
            ColorPickerBox.ZIndex = 6

            ColorPickerBounds.Name = "ColorPickerBounds"
            ColorPickerBounds.Parent = CCBG
            ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
            ColorPickerBounds.Transparency = 1
            ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
            ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
            ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
            ColorPickerBounds.ZIndex = 6

            Led.Name = "Led"
            Led.Parent = ColorPickerBox
            task.spawn(function()
                while wait() do
                    if Library.RainbowAccent == true then
                        Led.BackgroundColor3 = Library.RainbowAccentColor 
                    else
                    Led.BackgroundColor3 = Library.AccentColor
                    end
                end
            end)
            Led.BorderSizePixel = 0
            Led.Size = UDim2.new(0, 220, 0, 2)

            RGB.Name = "RGB"
            RGB.Parent = ColorPickerBox           
            RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
            RGB.BorderColor3 = Color3.fromRGB(50,50,50)
            RGB.TextColor3 = Color3.fromRGB(255,255,255)
            RGB.Position = UDim2.new(0, 113, 0, 199)
            RGB.Size = UDim2.new(0, 102, 0, 20)
            RGB.Font = Enum.Font.Code
            RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            RGB.PlaceholderText = " RGB Color"
            RGB.Text = " 255, 0, 0"
            RGB.TextSize = 13.000
            RGB.TextStrokeTransparency = 0.000
            RGB.TextWrapped = true
            RGB.TextXAlignment = Enum.TextXAlignment.Left

            Hex.Name = "Hex"
            Hex.Parent = ColorPickerBox
            Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
            Hex.BorderColor3 = Color3.fromRGB(50,50,50)
            Hex.TextColor3 = Color3.fromRGB(255,255,255)
            Hex.Position = UDim2.new(0, 5, 0, 199)
            Hex.Size = UDim2.new(0, 102, 0, 20)
            Hex.Font = Enum.Font.Code
            Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            Hex.PlaceholderText = " Hex Color"
            Hex.Text = " #FF0000"
            Hex.TextSize = 14.000
            Hex.TextStrokeTransparency = 0.000
            Hex.TextWrapped = true
            Hex.TextXAlignment = Enum.TextXAlignment.Left

            HueSliderBorder.Parent = ColorPickerBox
            HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
            HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSliderBorder.BorderSizePixel = 1
            HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
            HueSliderBorder.Rotation = 90.000
            HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

            HueSlider.Name = "HueSlider"
            HueSlider.Parent = ColorPickerBox
            HueSlider.AnchorPoint = Vector2.new(0, 1)
            HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSlider.BorderSizePixel = 0
            HueSlider.ClipsDescendants = true
            HueSlider.Position = UDim2.new(0, 112, 0, 107)
            HueSlider.Rotation = 90.000
            HueSlider.Size = UDim2.new(0, 185, 0, 15)
            HueSlider.AutoButtonColor = false
            HueSlider.Font = Enum.Font.SourceSans
            HueSlider.Text = ""
            HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
            HueSlider.TextSize = 14.000

            UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
            UIGradient.Parent = HueSlider

            Indicator.Name = "Indicator"
            Indicator.Parent = HueSlider
            Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Indicator.Position = UDim2.new(0, 0, 0, -1)
            Indicator.Size = UDim2.new(0, 1, 0, 6)

            GradientBox.Name = "Gradient Box"
            GradientBox.Parent = ColorPickerBox
            GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
            GradientBox.Position = UDim2.new(0, 5, 0, 7)
            GradientBox.Size = UDim2.new(0, 185, 0, 185)
            GradientBox.AutoButtonColor = false
            GradientBox.Image = "rbxassetid://4155801252"

            GradientIndicator.Parent = GradientBox
            GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
            GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            GradientIndicator.BackgroundTransparency = 1.000
            GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
            GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
            GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

            -- // Default Functions \\ --
            local PickerOn = false

            CPB.MouseButton1Click:connect(function()
                if ColorPickerBox.Visible == true then
                    PickerOn = true
                else
                    PickerOn = false
                end
                for i,v in pairs (PickerFolder:GetChildren()) do
                    if v.Name == 'ColorPickerBox' then
                        v.Visible = false
                    end
                end
                for i,v in pairs (DDFolder:GetChildren()) do
                    v.Visible = false
                end
                if PickerOn == true then
                    ColorPickerBox.Visible = false
                else
                    ColorPickerBox.Visible = true
                end
            end)

            local MouseInPicker = false

            ColorPickerBox.MouseLeave:connect(function()
                MouseInPicker = false 
            end)

            ColorPickerBox.MouseEnter:connect(function()
                MouseInPicker = true
            end)

            local MouseInPickerBox = false
            CPB.MouseLeave:connect(function()
                MouseInPickerBox = false 
            end)

            CPB.MouseEnter:connect(function()
                MouseInPickerBox = true
            end)

            local MouseInPickerBounds = false
            ColorPickerBounds.MouseLeave:connect(function()
                MouseInPickerBounds = false 
            end)

            ColorPickerBounds.MouseEnter:connect(function()
                MouseInPickerBounds = true
            end)

            task.spawn(function()
                UIS.InputBegan:Connect(function(Input, Processed)
                    if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        ColorPickerBox.Visible = false
                    end
                end)
            end)

            -- // Gradient Box Function / Sat and Val Updaters \\ --
            local GHeld = false

            GradientBox.MouseButton1Down:Connect(function()
                GHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    GHeld = false
                end
            end)

            local Value1
                
            RenderStepped:Connect(function(Delta)
                if GHeld then
                    local MousePos = UIS:GetMouseLocation()
                    local GradientPos = GradientBox.AbsolutePosition
                    local GradientSize = GradientBox.AbsoluteSize
                        
                    local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                    Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                    local Value2 = -(Value1 - 1)

                    Sat = math.clamp(Saturation, 0, 1)
                    Val = math.clamp(Value2, 0, 1)

                    Hex.Text = ToHex(Library.MainColor)
                    RGB.Text = ToRGB(Library.MainColor)
                    GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                end
                GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
            end)
            GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

            -- // HueSlider Functions / Hue Updater \\ --

            local SHeld = false

            HueSlider.MouseButton1Down:Connect(function()
                SHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    SHeld = false
                end
            end)


            RenderStepped:Connect(function(Delta)
                if SHeld then
                    local MousePos = UIS:GetMouseLocation().Y
                    local SliderPos = HueSlider.AbsolutePosition.Y - 52
                    local SliderSize = HueSlider.AbsoluteSize.X
                        
                    local Pos = (MousePos - SliderPos) / SliderSize

                    Hue = math.clamp(Pos, 0, 1)

                    Hex.Text = ToHex(Library.MainColor)
                    RGB.Text = ToRGB(Library.MainColor)
                    
                else

                end
                Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                        
                if Hue == 1 then
                    Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                end
            end)

            -- // Color Updater for CallBack and Color Picker Button \\ --
            task.spawn(function()
                while RenderStepped:wait() do
                    CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                    CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                    CallBack(Hue, Sat, Val)
                end
            end)

            -- // Code to Integer Converter \\ --

            function ToInteger (Color)
                return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
            end
                
            -- // From RGB to Hex Code Converter \\ --
            function ToHex (Color)
                local Red, Green, Blue = ToInteger(Color)
                local HexChar = {
                    'A', 'B', 'C', 'D', 'E', 'F'
                }
                local ColorTable = {Red, Green, Blue}
                local Result = ' #'
                
                for i,Code in pairs (ColorTable) do
                    local Divide = Code / 16
                    local FirstNumber = math.floor(Divide)
                    local Remainder = (Divide - FirstNumber) * 16
                    local Char
                
                    if FirstNumber >= 10 then
                        Char = HexChar[FirstNumber - 9]
                    else
                        Char = FirstNumber
                    end
                
                    if Remainder >= 10 then
                        Char = Char..HexChar[Remainder - 9]
                    else 
                        Char = Char..tonumber(Remainder)
                    end
                
                    Result = Result..Char
                end
                
                return tostring(Result)
            end

            -- // RGB to String Converter \\ --
            function ToRGB(Color)
                local Red, Green, Blue = ToInteger(Color)
                local RGB = ' '..Red..', '..Green..', '..Blue
                return tostring(RGB)
            end

            Hex.Text = ToHex(Library.MainColor)  
            RGB.Text = ToRGB(Library.MainColor)

        end
        function AddAccentColorPicker (CallBack)
            local CCBG = Instance.new("Frame")
            local CPN = Instance.new("TextLabel")
            local CPB = Instance.new("TextButton")

            local ColorPickerBox = Instance.new("Frame")
            local ColorPickerBounds = Instance.new('Frame')
            local Led = Instance.new("Frame")
            local RGB = Instance.new("TextBox")
            local Hex = Instance.new("TextBox")
            local HueSliderBorder = Instance.new("Frame")
            local HueSlider = Instance.new("TextButton")
            local UIGradient = Instance.new("UIGradient")
            local Indicator = Instance.new("Frame")
            local GradientBox = Instance.new("ImageButton")
            local GradientIndicator = Instance.new("ImageLabel")
            -- // Conversion from Object to usable HSV code \\ --
            local OrgHSV = Library.AccentColor:ToHSV()
            local Hue, Sat, Val = Library.AccentColor:ToHSV()

            --Properties:

            CCBG.Name = "CCBG"
            CCBG.Parent = LeftBox
            CCBG.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            CCBG.BackgroundTransparency = 1.000
            CCBG.Position = UDim2.new(0, 0, 0, 0)
            CCBG.Size = UDim2.new(0, 226, 0, 17)

            CPN.Name = "CPN"
            CPN.Parent = CCBG
            CPN.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
            CPN.BackgroundTransparency = 1.000
            CPN.BorderSizePixel = 0
            CPN.Position = UDim2.new(0, 6, 0, -1)
            CPN.Size = UDim2.new(0, 87, 0, 16)
            CPN.Font = Enum.Font.Code
            CPN.Text = 'Accent Color'
            RenderStepped:connect(function()
                CPN.TextColor3 = Library.TextColor
            end)
            CPN.TextSize = 14.000
            CPN.TextStrokeTransparency = 0.000
            CPN.TextXAlignment = Enum.TextXAlignment.Left

            CPB.Name = "CPB"
            CPB.Parent = CCBG
            CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
            CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
            CPB.Position = UDim2.new(0, 192, 0, 1)
            CPB.Size = UDim2.new(0, 28, 0, 13)
            CPB.Font = Enum.Font.SourceSans
            CPB.Text = ""
            CPB.TextColor3 = Color3.fromRGB(0, 0, 0)
            CPB.TextSize = 14.000
            CPB.AutoButtonColor = false

            ColorPickerBox.Name = "ColorPickerBox"
            ColorPickerBox.Parent = PickerFolder
            ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
            ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

            local CPosX = CPB.AbsolutePosition.X - Box.AbsolutePosition.X
            local CPosY = CPB.AbsolutePosition.Y - Box.AbsolutePosition.Y

            ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
            ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
            ColorPickerBox.ZIndex = 6

            ColorPickerBounds.Name = "ColorPickerBounds"
            ColorPickerBounds.Parent = CCBG
            ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
            ColorPickerBounds.Transparency = 1
            ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
            ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
            ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
            ColorPickerBounds.ZIndex = 6

            Led.Name = "Led"
            Led.Parent = ColorPickerBox
            task.spawn(function()
                while wait() do
                    if Library.RainbowAccent == true then
                        Led.BackgroundColor3 = Library.RainbowAccentColor 
                    else
                    Led.BackgroundColor3 = Library.AccentColor
                    end
                end
            end)
            Led.BorderSizePixel = 0
            Led.Size = UDim2.new(0, 220, 0, 2)

            RGB.Name = "RGB"
            RGB.Parent = ColorPickerBox
            RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
            RGB.BorderColor3 = Color3.fromRGB(50,50,50)
            RGB.TextColor3 = Color3.fromRGB(255,255,255)
            RGB.Position = UDim2.new(0, 113, 0, 199)
            RGB.Size = UDim2.new(0, 102, 0, 20)
            RGB.Font = Enum.Font.Code
            RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            RGB.PlaceholderText = " RGB Color"
            RGB.Text = " 255, 0, 0"
            RGB.TextSize = 13.000
            RGB.TextStrokeTransparency = 0.000
            RGB.TextWrapped = true
            RGB.TextXAlignment = Enum.TextXAlignment.Left

            Hex.Name = "Hex"
            Hex.Parent = ColorPickerBox
            Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
            Hex.BorderColor3 = Color3.fromRGB(50,50,50)
            Hex.TextColor3 = Color3.fromRGB(255,255,255)
            Hex.Position = UDim2.new(0, 5, 0, 199)
            Hex.Size = UDim2.new(0, 102, 0, 20)
            Hex.Font = Enum.Font.Code
            Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            Hex.PlaceholderText = " Hex Color"
            Hex.Text = " #FF0000"
            Hex.TextSize = 14.000
            Hex.TextStrokeTransparency = 0.000
            Hex.TextWrapped = true
            Hex.TextXAlignment = Enum.TextXAlignment.Left

            HueSliderBorder.Parent = ColorPickerBox
            HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
            HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSliderBorder.BorderSizePixel = 1
            HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
            HueSliderBorder.Rotation = 90.000
            HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

            HueSlider.Name = "HueSlider"
            HueSlider.Parent = ColorPickerBox
            HueSlider.AnchorPoint = Vector2.new(0, 1)
            HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSlider.BorderSizePixel = 0
            HueSlider.ClipsDescendants = true
            HueSlider.Position = UDim2.new(0, 112, 0, 107)
            HueSlider.Rotation = 90.000
            HueSlider.Size = UDim2.new(0, 185, 0, 15)
            HueSlider.AutoButtonColor = false
            HueSlider.Font = Enum.Font.SourceSans
            HueSlider.Text = ""
            HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
            HueSlider.TextSize = 14.000

            UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
            UIGradient.Parent = HueSlider

            Indicator.Name = "Indicator"
            Indicator.Parent = HueSlider
            Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Indicator.Position = UDim2.new(0, 0, 0, -1)
            Indicator.Size = UDim2.new(0, 1, 0, 6)

            GradientBox.Name = "Gradient Box"
            GradientBox.Parent = ColorPickerBox
            GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
            GradientBox.Position = UDim2.new(0, 5, 0, 7)
            GradientBox.Size = UDim2.new(0, 185, 0, 185)
            GradientBox.AutoButtonColor = false
            GradientBox.Image = "rbxassetid://4155801252"

            GradientIndicator.Parent = GradientBox
            GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
            GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            GradientIndicator.BackgroundTransparency = 1.000
            GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
            GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
            GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

            -- // Default Functions \\ --
            local PickerOn = false

            CPB.MouseButton1Click:connect(function()
                if ColorPickerBox.Visible == true then
                    PickerOn = true
                else
                    PickerOn = false
                end
                for i,v in pairs (PickerFolder:GetChildren()) do
                    if v.Name == 'ColorPickerBox' then
                        v.Visible = false
                    end
                end
                for i,v in pairs (DDFolder:GetChildren()) do
                    v.Visible = false
                end
                if PickerOn == true then
                    ColorPickerBox.Visible = false
                else
                    ColorPickerBox.Visible = true
                end
            end)

            local MouseInPicker = false

            ColorPickerBox.MouseLeave:connect(function()
                MouseInPicker = false 
            end)

            ColorPickerBox.MouseEnter:connect(function()
                MouseInPicker = true
            end)

            local MouseInPickerBox = false
            CPB.MouseLeave:connect(function()
                MouseInPickerBox = false 
            end)

            CPB.MouseEnter:connect(function()
                MouseInPickerBox = true
            end)

            local MouseInPickerBounds = false
            ColorPickerBounds.MouseLeave:connect(function()
                MouseInPickerBounds = false 
            end)

            ColorPickerBounds.MouseEnter:connect(function()
                MouseInPickerBounds = true
            end)

            task.spawn(function()
                UIS.InputBegan:Connect(function(Input, Processed)
                    if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        ColorPickerBox.Visible = false
                    end
                end)
            end)

            -- // Gradient Box Function / Sat and Val Updaters \\ --
            local GHeld = false

            GradientBox.MouseButton1Down:Connect(function()
                GHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    GHeld = false
                end
            end)

            local Value1
                
            RenderStepped:Connect(function(Delta)
                if GHeld then
                    local MousePos = UIS:GetMouseLocation()
                    local GradientPos = GradientBox.AbsolutePosition
                    local GradientSize = GradientBox.AbsoluteSize
                        
                    local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                    Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                    local Value2 = -(Value1 - 1)

                    Sat = math.clamp(Saturation, 0, 1)
                    Val = math.clamp(Value2, 0, 1)

                    Hex.Text = ToHex(Library.AccentColor)
                    RGB.Text = ToRGB(Library.AccentColor)
                    GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                end
                GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
            end)
            GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

            -- // HueSlider Functions / Hue Updater \\ --

            local SHeld = false

            HueSlider.MouseButton1Down:Connect(function()
                SHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    SHeld = false
                end
            end)


            RenderStepped:Connect(function(Delta)
                if SHeld then
                    local MousePos = UIS:GetMouseLocation().Y
                    local SliderPos = HueSlider.AbsolutePosition.Y - 52
                    local SliderSize = HueSlider.AbsoluteSize.X
                        
                    local Pos = (MousePos - SliderPos) / SliderSize

                    Hue = math.clamp(Pos, 0, 1)

                    Hex.Text = ToHex(Library.AccentColor)
                    RGB.Text = ToRGB(Library.AccentColor)
                    
                else

                end
                Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                        
                if Hue == 1 then
                    Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                end
            end)

            -- // Color Updater for CallBack and Color Picker Button \\ --
            task.spawn(function()
                while RenderStepped:wait() do
                    CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                    CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                    CallBack(Hue, Sat, Val)
                end
            end)

            -- // Code to Integer Converter \\ --

            function ToInteger (Color)
                return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
            end
                
            -- // From RGB to Hex Code Converter \\ --
            function ToHex (Color)
                local Red, Green, Blue = ToInteger(Color)
                local HexChar = {
                    'A', 'B', 'C', 'D', 'E', 'F'
                }
                local ColorTable = {Red, Green, Blue}
                local Result = ' #'
                
                for i,Code in pairs (ColorTable) do
                    local Divide = Code / 16
                    local FirstNumber = math.floor(Divide)
                    local Remainder = (Divide - FirstNumber) * 16
                    local Char
                
                    if FirstNumber >= 10 then
                        Char = HexChar[FirstNumber - 9]
                    else
                        Char = FirstNumber
                    end
                
                    if Remainder >= 10 then
                        Char = Char..HexChar[Remainder - 9]
                    else 
                        Char = Char..tonumber(Remainder)
                    end
                
                    Result = Result..Char
                end
                
                return tostring(Result)
            end

            -- // RGB to String Converter \\ --
            function ToRGB(Color)
                local Red, Green, Blue = ToInteger(Color)
                local RGB = ' '..Red..', '..Green..', '..Blue
                return tostring(RGB)
            end

            Hex.Text = ToHex(Library.AccentColor)  
            RGB.Text = ToRGB(Library.AccentColor)

        end

        function AddOutlineColorPicker (CallBack)
            local CCBG = Instance.new("Frame")
            local CPN = Instance.new("TextLabel")
            local CPB = Instance.new("TextButton")

            local ColorPickerBox = Instance.new("Frame")
            local ColorPickerBounds = Instance.new('Frame')
            local Led = Instance.new("Frame")
            local RGB = Instance.new("TextBox")
            local Hex = Instance.new("TextBox")
            local HueSliderBorder = Instance.new("Frame")
            local HueSlider = Instance.new("TextButton")
            local UIGradient = Instance.new("UIGradient")
            local Indicator = Instance.new("Frame")
            local GradientBox = Instance.new("ImageButton")
            local GradientIndicator = Instance.new("ImageLabel")
            -- // Conversion from Object to usable HSV code \\ --
            local OrgHSV = Library.OutLineColor:ToHSV()
            local Hue, Sat, Val = Library.OutLineColor:ToHSV()

            --Properties:

            CCBG.Name = "CCBG"
            CCBG.Parent = LeftBox
            CCBG.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            CCBG.BackgroundTransparency = 1.000
            CCBG.Position = UDim2.new(0, 0, 0, 0)
            CCBG.Size = UDim2.new(0, 226, 0, 17)

            CPN.Name = "CPN"
            CPN.Parent = CCBG
            CPN.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
            CPN.BackgroundTransparency = 1.000
            CPN.BorderSizePixel = 0
            CPN.Position = UDim2.new(0, 6, 0, -1)
            CPN.Size = UDim2.new(0, 87, 0, 16)
            CPN.Font = Enum.Font.Code
            CPN.Text = 'Outline Color'
            RenderStepped:connect(function()
                CPN.TextColor3 = Library.TextColor
            end)
            CPN.TextSize = 14.000
            CPN.TextStrokeTransparency = 0.000
            CPN.TextXAlignment = Enum.TextXAlignment.Left

            CPB.Name = "CPB"
            CPB.Parent = CCBG
            CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
            CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
            CPB.Position = UDim2.new(0, 192, 0, 1)
            CPB.Size = UDim2.new(0, 28, 0, 13)
            CPB.Font = Enum.Font.SourceSans
            CPB.Text = ""
            CPB.TextColor3 = Color3.fromRGB(0, 0, 0)
            CPB.TextSize = 14.000
            CPB.AutoButtonColor = false

            ColorPickerBox.Name = "ColorPickerBox"
            ColorPickerBox.Parent = PickerFolder
            ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
            ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)
            local CPosX = CPB.AbsolutePosition.X - Box.AbsolutePosition.X
            local CPosY = CPB.AbsolutePosition.Y - Box.AbsolutePosition.Y

            ColorPickerBox.Position = UDim2.new(0, CPosX - 188 ,0 , CPosY + 16)
            ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
            ColorPickerBox.ZIndex = 6

            ColorPickerBounds.Name = "ColorPickerBounds"
            ColorPickerBounds.Parent = CCBG
            ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
            ColorPickerBounds.Transparency = 1
            ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
            ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
            ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
            ColorPickerBounds.ZIndex = 6

            Led.Name = "Led"
            Led.Parent = ColorPickerBox
            task.spawn(function()
                while wait() do
                    if Library.RainbowAccent == true then
                        Led.BackgroundColor3 = Library.RainbowAccentColor 
                    else
                    Led.BackgroundColor3 = Library.AccentColor
                    end
                end
            end)
            Led.BorderSizePixel = 0
            Led.Size = UDim2.new(0, 220, 0, 2)

            RGB.Name = "RGB"
            RGB.Parent = ColorPickerBox
            RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
            RGB.BorderColor3 = Color3.fromRGB(50,50,50)
            RGB.TextColor3 = Color3.fromRGB(255,255,255)
            RGB.Position = UDim2.new(0, 113, 0, 199)
            RGB.Size = UDim2.new(0, 102, 0, 20)
            RGB.Font = Enum.Font.Code
            RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            RGB.PlaceholderText = " RGB Color"
            RGB.Text = " 255, 0, 0"
            RGB.TextSize = 13.000
            RGB.TextStrokeTransparency = 0.000
            RGB.TextWrapped = true
            RGB.TextXAlignment = Enum.TextXAlignment.Left

            Hex.Name = "Hex"
            Hex.Parent = ColorPickerBox
            Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
            Hex.BorderColor3 = Color3.fromRGB(50,50,50)
            Hex.TextColor3 = Color3.fromRGB(255,255,255)
            Hex.Position = UDim2.new(0, 5, 0, 199)
            Hex.Size = UDim2.new(0, 102, 0, 20)
            Hex.Font = Enum.Font.Code
            Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            Hex.PlaceholderText = " Hex Color"
            Hex.Text = " #FF0000"
            Hex.TextSize = 14.000
            Hex.TextStrokeTransparency = 0.000
            Hex.TextWrapped = true
            Hex.TextXAlignment = Enum.TextXAlignment.Left

            HueSliderBorder.Parent = ColorPickerBox
            HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
            HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSliderBorder.BorderSizePixel = 1
            HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
            HueSliderBorder.Rotation = 90.000
            HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

            HueSlider.Name = "HueSlider"
            HueSlider.Parent = ColorPickerBox
            HueSlider.AnchorPoint = Vector2.new(0, 1)
            HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSlider.BorderSizePixel = 0
            HueSlider.ClipsDescendants = true
            HueSlider.Position = UDim2.new(0, 112, 0, 107)
            HueSlider.Rotation = 90.000
            HueSlider.Size = UDim2.new(0, 185, 0, 15)
            HueSlider.AutoButtonColor = false
            HueSlider.Font = Enum.Font.SourceSans
            HueSlider.Text = ""
            HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
            HueSlider.TextSize = 14.000

            UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
            UIGradient.Parent = HueSlider

            Indicator.Name = "Indicator"
            Indicator.Parent = HueSlider
            Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Indicator.Position = UDim2.new(0, 0, 0, -1)
            Indicator.Size = UDim2.new(0, 1, 0, 6)

            GradientBox.Name = "Gradient Box"
            GradientBox.Parent = ColorPickerBox
            GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
            GradientBox.Position = UDim2.new(0, 5, 0, 7)
            GradientBox.Size = UDim2.new(0, 185, 0, 185)
            GradientBox.AutoButtonColor = false
            GradientBox.Image = "rbxassetid://4155801252"

            GradientIndicator.Parent = GradientBox
            GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
            GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            GradientIndicator.BackgroundTransparency = 1.000
            GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
            GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
            GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

            -- // Default Functions \\ --
            local PickerOn = false

            CPB.MouseButton1Click:connect(function()
                if ColorPickerBox.Visible == true then
                    PickerOn = true
                else
                    PickerOn = false
                end
                for i,v in pairs (PickerFolder:GetChildren()) do
                    if v.Name == 'ColorPickerBox' then
                        v.Visible = false
                    end
                end
                for i,v in pairs (DDFolder:GetChildren()) do
                    v.Visible = false
                end
                if PickerOn == true then
                    ColorPickerBox.Visible = false
                else
                    ColorPickerBox.Visible = true
                end
            end)

            local MouseInPicker = false

            ColorPickerBox.MouseLeave:connect(function()
                MouseInPicker = false 
            end)

            ColorPickerBox.MouseEnter:connect(function()
                MouseInPicker = true
            end)

            local MouseInPickerBox = false
            CPB.MouseLeave:connect(function()
                MouseInPickerBox = false 
            end)

            CPB.MouseEnter:connect(function()
                MouseInPickerBox = true
            end)

            local MouseInPickerBounds = false
            ColorPickerBounds.MouseLeave:connect(function()
                MouseInPickerBounds = false 
            end)

            ColorPickerBounds.MouseEnter:connect(function()
                MouseInPickerBounds = true
            end)

            task.spawn(function()
                UIS.InputBegan:Connect(function(Input, Processed)
                    if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        ColorPickerBox.Visible = false
                    end
                end)
            end)

            -- // Gradient Box Function / Sat and Val Updaters \\ --
            local GHeld = false

            GradientBox.MouseButton1Down:Connect(function()
                GHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    GHeld = false
                end
            end)

            local Value1
                
            RenderStepped:Connect(function(Delta)
                if GHeld then
                    local MousePos = UIS:GetMouseLocation()
                    local GradientPos = GradientBox.AbsolutePosition
                    local GradientSize = GradientBox.AbsoluteSize
                        
                    local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                    Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                    local Value2 = -(Value1 - 1)

                    Sat = math.clamp(Saturation, 0, 1)
                    Val = math.clamp(Value2, 0, 1)

                    Hex.Text = ToHex(Library.OutLineColor)
                    RGB.Text = ToRGB(Library.OutLineColor)
                    GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                end
                GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
            end)
            GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

            -- // HueSlider Functions / Hue Updater \\ --

            local SHeld = false

            HueSlider.MouseButton1Down:Connect(function()
                SHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    SHeld = false
                end
            end)


            RenderStepped:Connect(function(Delta)
                if SHeld then
                    local MousePos = UIS:GetMouseLocation().Y
                    local SliderPos = HueSlider.AbsolutePosition.Y - 52
                    local SliderSize = HueSlider.AbsoluteSize.X
                        
                    local Pos = (MousePos - SliderPos) / SliderSize

                    Hue = math.clamp(Pos, 0, 1)

                    Hex.Text = ToHex(Library.OutLineColor)
                    RGB.Text = ToRGB(Library.OutLineColor)
                    
                else

                end
                Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                        
                if Hue == 1 then
                    Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                end
            end)

            -- // Color Updater for CallBack and Color Picker Button \\ --
            task.spawn(function()
                while RenderStepped:wait() do
                    CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                    CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                    CallBack(Hue, Sat, Val)
                end
            end)

            -- // Code to Integer Converter \\ --

            function ToInteger (Color)
                return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
            end
                
            -- // From RGB to Hex Code Converter \\ --
            function ToHex (Color)
                local Red, Green, Blue = ToInteger(Color)
                local HexChar = {
                    'A', 'B', 'C', 'D', 'E', 'F'
                }
                local ColorTable = {Red, Green, Blue}
                local Result = ' #'
                
                for i,Code in pairs (ColorTable) do
                    local Divide = Code / 16
                    local FirstNumber = math.floor(Divide)
                    local Remainder = (Divide - FirstNumber) * 16
                    local Char
                
                    if FirstNumber >= 10 then
                        Char = HexChar[FirstNumber - 9]
                    else
                        Char = FirstNumber
                    end
                
                    if Remainder >= 10 then
                        Char = Char..HexChar[Remainder - 9]
                    else 
                        Char = Char..tonumber(Remainder)
                    end
                
                    Result = Result..Char
                end
                
                return tostring(Result)
            end

            -- // RGB to String Converter \\ --
            function ToRGB(Color)
                local Red, Green, Blue = ToInteger(Color)
                local RGB = ' '..Red..', '..Green..', '..Blue
                return tostring(RGB)
            end

            Hex.Text = ToHex(Library.OutLineColor)  
            RGB.Text = ToRGB(Library.OutLineColor)

        end
        function AddFontColorPicker (CallBack)
            local CCBG = Instance.new("Frame")
            local CPN = Instance.new("TextLabel")
            local CPB = Instance.new("TextButton")

            local ColorPickerBox = Instance.new("Frame")
            local ColorPickerBounds = Instance.new('Frame')
            local Led = Instance.new("Frame")
            local RGB = Instance.new("TextBox")
            local Hex = Instance.new("TextBox")
            local HueSliderBorder = Instance.new("Frame")
            local HueSlider = Instance.new("TextButton")
            local UIGradient = Instance.new("UIGradient")
            local Indicator = Instance.new("Frame")
            local GradientBox = Instance.new("ImageButton")
            local GradientIndicator = Instance.new("ImageLabel")
            -- // Conversion from Object to usable HSV code \\ --
            local OrgHSV = Library.TextColor:ToHSV()
            local Hue, Sat, Val = Library.TextColor:ToHSV()

            --Properties:

            CCBG.Name = "CCBG"
            CCBG.Parent = LeftBox
            CCBG.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            CCBG.BackgroundTransparency = 1.000
            CCBG.Position = UDim2.new(0, 0, 0, 0)
            CCBG.Size = UDim2.new(0, 226, 0, 17)

            CPN.Name = "CPN"
            CPN.Parent = CCBG
            CPN.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
            CPN.BackgroundTransparency = 1.000
            CPN.BorderSizePixel = 0
            CPN.Position = UDim2.new(0, 6, 0, -1)
            CPN.Size = UDim2.new(0, 87, 0, 16)
            CPN.Font = Enum.Font.Code
            CPN.Text = 'Font Color'
            RenderStepped:connect(function()
                CPN.TextColor3 = Library.TextColor
            end)
            CPN.TextSize = 14.000
            CPN.TextStrokeTransparency = 0.000
            CPN.TextXAlignment = Enum.TextXAlignment.Left

            CPB.Name = "CPB"
            CPB.Parent = CCBG
            CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
            CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
            CPB.Position = UDim2.new(0, 192, 0, 1)
            CPB.Size = UDim2.new(0, 28, 0, 13)
            CPB.Font = Enum.Font.SourceSans
            CPB.Text = ""
            CPB.TextColor3 = Color3.fromRGB(0, 0, 0)
            CPB.TextSize = 14.000
            CPB.AutoButtonColor = false

            ColorPickerBox.Name = "ColorPickerBox"
            ColorPickerBox.Parent = PickerFolder
            ColorPickerBox.BackgroundColor3 = Color3.fromRGB(28,28,28)
            ColorPickerBox.BorderColor3 = Color3.fromRGB(50,50,50)

            local CPosX = CPB.AbsolutePosition.X - Box.AbsolutePosition.X
            local CPosY = CPB.AbsolutePosition.Y - Box.AbsolutePosition.Y

            ColorPickerBox.Position = UDim2.new(0, CPosX - 192 ,0 , CPosY + 16)
            ColorPickerBox.Size = UDim2.new(0, 220, 0, 224)
            ColorPickerBox.ZIndex = 6

            ColorPickerBounds.Name = "ColorPickerBounds"
            ColorPickerBounds.Parent = CCBG
            ColorPickerBounds.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
            ColorPickerBounds.Transparency = 1
            ColorPickerBounds.BorderColor3 = Color3.fromRGB(50, 50, 50)
            ColorPickerBounds.Position = UDim2.new(0, 3, 0, 0)
            ColorPickerBounds.Size = UDim2.new(0, 220, 0, 250)
            ColorPickerBounds.ZIndex = 6

            Led.Name = "Led"
            Led.Parent = ColorPickerBox
            task.spawn(function()
                while wait() do
                    if Library.RainbowAccent == true then
                        Led.BackgroundColor3 = Library.RainbowAccentColor 
                    else
                    Led.BackgroundColor3 = Library.AccentColor
                    end
                end
            end)
            Led.BorderSizePixel = 0
            Led.Size = UDim2.new(0, 220, 0, 2)

            RGB.Name = "RGB"
            RGB.Parent = ColorPickerBox
            RGB.BackgroundColor3 = Color3.fromRGB(28,28,28)
            RGB.BorderColor3 = Color3.fromRGB(50,50,50)
            RGB.TextColor3 = Color3.fromRGB(255,255,255)
            RGB.Position = UDim2.new(0, 113, 0, 199)
            RGB.Size = UDim2.new(0, 102, 0, 20)
            RGB.Font = Enum.Font.Code
            RGB.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            RGB.PlaceholderText = " RGB Color"
            RGB.Text = " 255, 0, 0"
            RGB.TextSize = 13.000
            RGB.TextStrokeTransparency = 0.000
            RGB.TextWrapped = true
            RGB.TextXAlignment = Enum.TextXAlignment.Left

            Hex.Name = "Hex"
            Hex.Parent = ColorPickerBox
            Hex.BackgroundColor3 = Color3.fromRGB(28,28,28)
            Hex.BorderColor3 = Color3.fromRGB(50,50,50)
            Hex.TextColor3 = Color3.fromRGB(255,255,255)
            Hex.Position = UDim2.new(0, 5, 0, 199)
            Hex.Size = UDim2.new(0, 102, 0, 20)
            Hex.Font = Enum.Font.Code
            Hex.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
            Hex.PlaceholderText = " Hex Color"
            Hex.Text = " #FF0000"
            Hex.TextSize = 14.000
            Hex.TextStrokeTransparency = 0.000
            Hex.TextWrapped = true
            Hex.TextXAlignment = Enum.TextXAlignment.Left

            HueSliderBorder.Parent = ColorPickerBox
            HueSliderBorder.AnchorPoint = Vector2.new(0, 1)
            HueSliderBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSliderBorder.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSliderBorder.BorderSizePixel = 1
            HueSliderBorder.Position = UDim2.new(0, 112, 0, 107)
            HueSliderBorder.Rotation = 90.000
            HueSliderBorder.Size = UDim2.new(0, 185, 0, 15)

            HueSlider.Name = "HueSlider"
            HueSlider.Parent = ColorPickerBox
            HueSlider.AnchorPoint = Vector2.new(0, 1)
            HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSlider.BorderColor3 = Color3.fromRGB(50, 50, 50)
            HueSlider.BorderSizePixel = 0
            HueSlider.ClipsDescendants = true
            HueSlider.Position = UDim2.new(0, 112, 0, 107)
            HueSlider.Rotation = 90.000
            HueSlider.Size = UDim2.new(0, 185, 0, 15)
            HueSlider.AutoButtonColor = false
            HueSlider.Font = Enum.Font.SourceSans
            HueSlider.Text = ""
            HueSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
            HueSlider.TextSize = 14.000

            UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}
            UIGradient.Parent = HueSlider

            Indicator.Name = "Indicator"
            Indicator.Parent = HueSlider
            Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
            Indicator.Position = UDim2.new(0, 0, 0, -1)
            Indicator.Size = UDim2.new(0, 1, 0, 6)

            GradientBox.Name = "Gradient Box"
            GradientBox.Parent = ColorPickerBox
            GradientBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            GradientBox.BorderColor3 = Color3.fromRGB(50, 50, 50)
            GradientBox.Position = UDim2.new(0, 5, 0, 7)
            GradientBox.Size = UDim2.new(0, 185, 0, 185)
            GradientBox.AutoButtonColor = false
            GradientBox.Image = "rbxassetid://4155801252"

            GradientIndicator.Parent = GradientBox
            GradientIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
            GradientIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            GradientIndicator.BackgroundTransparency = 1.000
            GradientIndicator.Position = UDim2.new(0, 0, 0.0162162185, 0)
            GradientIndicator.Size = UDim2.new(0, 20, 0, 20)
            GradientIndicator.Image = "http://www.roblox.com/asset/?id=9628117279"

            -- // Default Functions \\ --
            local PickerOn = false

            CPB.MouseButton1Click:connect(function()
                if ColorPickerBox.Visible == true then
                    PickerOn = true
                else
                    PickerOn = false
                end
                for i,v in pairs (PickerFolder:GetChildren()) do
                    if v.Name == 'ColorPickerBox' then
                        v.Visible = false
                    end
                end
                for i,v in pairs (DDFolder:GetChildren()) do
                    v.Visible = false
                end
                if PickerOn == true then
                    ColorPickerBox.Visible = false
                else
                    ColorPickerBox.Visible = true
                end
            end)

            local MouseInPicker = false

            ColorPickerBox.MouseLeave:connect(function()
                MouseInPicker = false 
            end)

            ColorPickerBox.MouseEnter:connect(function()
                MouseInPicker = true
            end)

            local MouseInPickerBox = false
            CPB.MouseLeave:connect(function()
                MouseInPickerBox = false 
            end)

            CPB.MouseEnter:connect(function()
                MouseInPickerBox = true
            end)

            local MouseInPickerBounds = false
            ColorPickerBounds.MouseLeave:connect(function()
                MouseInPickerBounds = false 
            end)

            ColorPickerBounds.MouseEnter:connect(function()
                MouseInPickerBounds = true
            end)

            task.spawn(function()
                UIS.InputBegan:Connect(function(Input, Processed)
                    if not MouseInPicker and not MouseInPickerBox and not MouseInPickerBounds and Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        ColorPickerBox.Visible = false
                    end
                end)
            end)

            -- // Gradient Box Function / Sat and Val Updaters \\ --
            local GHeld = false

            GradientBox.MouseButton1Down:Connect(function()
                GHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    GHeld = false
                end
            end)

            local Value1
                
            RenderStepped:Connect(function(Delta)
                if GHeld then
                    local MousePos = UIS:GetMouseLocation()
                    local GradientPos = GradientBox.AbsolutePosition
                    local GradientSize = GradientBox.AbsoluteSize
                        
                    local Saturation = (MousePos.X - GradientPos.X) / GradientSize.X
                    Value1 = (MousePos.Y - (GradientPos.Y + 36)) / GradientSize.Y
                    local Value2 = -(Value1 - 1)

                    Sat = math.clamp(Saturation, 0, 1)
                    Val = math.clamp(Value2, 0, 1)

                    Hex.Text = ToHex(Library.TextColor)
                    RGB.Text = ToRGB(Library.TextColor)
                    GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(Value1, 0, 1),0)
                end
                GradientBox.BackgroundColor3 = Color3.fromHSV(Hue,1, 1)
            end)
            GradientIndicator.Position = UDim2.new(Sat ,0, math.clamp(-(Val - 1), 0, 1),0)

            -- // HueSlider Functions / Hue Updater \\ --

            local SHeld = false

            HueSlider.MouseButton1Down:Connect(function()
                SHeld = true
            end)

            UIS.InputEnded:Connect(function(Input, Processed)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    SHeld = false
                end
            end)


            RenderStepped:Connect(function(Delta)
                if SHeld then
                    local MousePos = UIS:GetMouseLocation().Y
                    local SliderPos = HueSlider.AbsolutePosition.Y - 52
                    local SliderSize = HueSlider.AbsoluteSize.X
                        
                    local Pos = (MousePos - SliderPos) / SliderSize

                    Hue = math.clamp(Pos, 0, 1)

                    Hex.Text = ToHex(Library.TextColor)
                    RGB.Text = ToRGB(Library.TextColor)
                    
                else

                end
                Indicator.Position = UDim2.new(Hue,0,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                        
                if Hue == 1 then
                    Indicator.Position = UDim2.new(Hue,-2,Indicator.Position.Y.Scale,Indicator.Position.Y.Offset)
                end
            end)

            -- // Color Updater for CallBack and Color Picker Button \\ --
            task.spawn(function()
                while RenderStepped:wait() do
                    CPB.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Val)
                    CPB.BorderColor3 = GetDarkerColor(Color3.fromHSV(Hue, Sat, Val))
                    CallBack(Hue, Sat, Val)
                end
            end)

            -- // Code to Integer Converter \\ --

            function ToInteger (Color)
                return math.floor(tonumber(Color.R) * 255 ), math.floor(tonumber(Color.G) * 255 ), math.floor(tonumber(Color.B) * 255 )
            end
                
            -- // From RGB to Hex Code Converter \\ --
            function ToHex (Color)
                local Red, Green, Blue = ToInteger(Color)
                local HexChar = {
                    'A', 'B', 'C', 'D', 'E', 'F'
                }
                local ColorTable = {Red, Green, Blue}
                local Result = ' #'
                
                for i,Code in pairs (ColorTable) do
                    local Divide = Code / 16
                    local FirstNumber = math.floor(Divide)
                    local Remainder = (Divide - FirstNumber) * 16
                    local Char
                
                    if FirstNumber >= 10 then
                        Char = HexChar[FirstNumber - 9]
                    else
                        Char = FirstNumber
                    end
                
                    if Remainder >= 10 then
                        Char = Char..HexChar[Remainder - 9]
                    else 
                        Char = Char..tonumber(Remainder)
                    end
                
                    Result = Result..Char
                end
                
                return tostring(Result)
            end

            -- // RGB to String Converter \\ --
            function ToRGB(Color)
                local Red, Green, Blue = ToInteger(Color)
                local RGB = ' '..Red..', '..Green..', '..Blue
                return tostring(RGB)
            end

            Hex.Text = ToHex(Library.TextColor)  
            RGB.Text = ToRGB(Library.TextColor)

        end
        function AddBasicToggle(Info, CallBack)
          
            local ToggleFrame = Instance.new("Frame")
            local OuterToggle = Instance.new("TextButton")
            local InnerToggle = Instance.new("TextButton")
            local ToggleName = Instance.new("TextLabel")
            local ToggleBounds = Instance.new('TextButton')
            local ToggleCCBounds = Instance.new('Frame') 
            local UIListLayout = Instance.new("UIListLayout")

            ToggleFrame.Name = "ToggleFrame"
            ToggleFrame.Parent = LeftBox
            ToggleFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            ToggleFrame.BackgroundTransparency = 1.000
            ToggleFrame.Position = UDim2.new(0, 0, 0, 0)
            ToggleFrame.Size = UDim2.new(0, 226, 0, 15)
            ToggleFrame.ZIndex = 1
            
            ToggleCCBounds.Name = "ToggleCCBounds"
            ToggleCCBounds.Parent = ToggleFrame
            ToggleCCBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            ToggleCCBounds.BackgroundTransparency = 1.000
            ToggleCCBounds.Position = UDim2.new(0, 158, 0, 1)
            ToggleCCBounds.Size = UDim2.new(0, 62, 0, 13)
            ToggleCCBounds.ZIndex = 1

            UIListLayout.Parent = ToggleCCBounds
            UIListLayout.FillDirection = Enum.FillDirection.Horizontal
            UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
            UIListLayout.Padding = UDim.new(0, 6)

            OuterToggle.Name = "OuterToggle"
            OuterToggle.Parent = ToggleFrame
            RenderStepped:connect(function()
            OuterToggle.BackgroundColor3 = Library.BackGroundColor
            end)
            OuterToggle.BorderColor3 = Library.Black
            OuterToggle.BorderSizePixel = 1
            OuterToggle.Position = UDim2.new(0, 5, 0, 0)
            OuterToggle.Size = UDim2.new(0, 13, 0, 13)
            OuterToggle.Font = Enum.Font.SourceSans
            OuterToggle.Text = ""
            OuterToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
            OuterToggle.TextSize = 14.000
            OuterToggle.AutoButtonColor = false

            InnerToggle.Name = "InnerToggle"
            InnerToggle.Parent = OuterToggle
            InnerToggle.BackgroundColor3 = Library.MainColor
            InnerToggle.BorderColor3 = Library.OutLineColor
            InnerToggle.BorderSizePixel = 1
            InnerToggle.BorderMode = Enum.BorderMode.Inset
            InnerToggle.Size = UDim2.new(1, 0, 1, 0)
            InnerToggle.Position = UDim2.new(0, 0, 0, 0)
            InnerToggle.Font = Enum.Font.SourceSans
            InnerToggle.Text = ""
            InnerToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
            InnerToggle.TextSize = 14.000
            InnerToggle.AutoButtonColor = false

            ToggleName.Name = "ToggleName"
            ToggleName.Parent = ToggleFrame
            ToggleName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ToggleName.BackgroundTransparency = 1.000
            ToggleName.Position = UDim2.new(0, 16, 0, -1)
            ToggleName.Size = UDim2.new(0, 130, 0, 15)
            ToggleName.Font = Enum.Font.Code
            ToggleName.Text = " "..Info.Name
            RenderStepped:connect(function()
            ToggleName.TextColor3 = Library.TextColor
            end)
            ToggleName.TextSize = 14.000
            ToggleName.TextStrokeTransparency = 0.000
            ToggleName.TextXAlignment = Enum.TextXAlignment.Left

            ToggleBounds.Name = 'ToggleBounds'
            ToggleBounds.Parent = ToggleName
            ToggleBounds.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            ToggleBounds.BackgroundTransparency = 1
            ToggleBounds.BorderSizePixel = 0
            ToggleBounds.Size = UDim2.new(0, 130, 0, 16)
            ToggleBounds.Position = UDim2.new(0, 12, 0, -1)
            ToggleBounds.Text = ''

            local MouseInToggle = false

            OuterToggle.MouseEnter:Connect(function()
                MouseInToggle = true
                while MouseInToggle == true do
                    if Library.RainbowAccent == true then
                        OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                    else
                        OuterToggle.BorderColor3 = Library.AccentColor
                    end
                    wait()
                end
            end)
            ToggleBounds.MouseEnter:Connect(function()
                MouseInToggle = true
                while MouseInToggle == true do
                    if Library.RainbowAccent == true then
                        OuterToggle.BorderColor3 = Library.RainbowAccentColor 
                    else
                        OuterToggle.BorderColor3 = Library.AccentColor
                    end
                    wait()
                end
            end)

            OuterToggle.MouseLeave:Connect(function()
                MouseInToggle = false
                OuterToggle.BorderColor3 = Library.Black
            end)
            ToggleBounds.MouseLeave:Connect(function()
                MouseInToggle = false
                OuterToggle.BorderColor3 = Library.Black
            end)

            local Toggle = true
            CallBack(Toggle)
            ToggleBounds.MouseButton1Click:Connect(function()
                Toggle = not Toggle
                CallBack(Toggle)
            end)

            InnerToggle.MouseButton1Click:Connect(function()
                Toggle = not Toggle
                CallBack(Toggle)
            end)
            task.spawn(function()
                while RenderStepped:wait() do
                    if Library.RainbowAccent == true and Toggle == true then
                        InnerToggle.BackgroundColor3 = Library.RainbowAccentColor 
                    elseif Library.RainbowAccent == false and Toggle == true then
                        InnerToggle.BackgroundColor3 = Library.AccentColor
                    elseif Toggle == false then
                        InnerToggle.BackgroundColor3 = Library.MainColor
                    end
                end
            end)
        end
        AddBackgroundColorPicker (function(Hue, Sat, Val)
            Library.BackGroundColor = Color3.fromHSV(Hue, Sat, Val)
        end)

        AddMainColorPicker (function(Hue, Sat, Val)
            Library.MainColor = Color3.fromHSV(Hue, Sat, Val)
        end)

        AddAccentColorPicker (function(Hue, Sat, Val)
            Library.AccentColor = Color3.fromHSV(Hue, Sat, Val)
        end)

        AddBasicToggle({Name = 'Rainbow Accent Color'}, function(Toggle)
            Library.RainbowAccent = Toggle 
        end)

        AddOutlineColorPicker (function(Hue, Sat, Val)
            Library.OutLineColor = Color3.fromHSV(Hue, Sat, Val)
        end)

        AddFontColorPicker (function(Hue, Sat, Val)
            Library.TextColor = Color3.fromHSV(Hue, Sat, Val)
        end)
    end
    return InnerLibrary
end


function Library:MakeDraggable (Instance)
    local TB = Instance
    TB.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
            local OrgPos = Vector2.new(
                Mouse.X - TB.AbsolutePosition.X,
                Mouse.Y - TB.AbsolutePosition.Y
            )
            local OrgAnc_X = TB.Size.X.Offset * TB.AnchorPoint.X
            local OrgAnc_Y = TB.Size.Y.Offset * TB.AnchorPoint.Y
            
            while UIS:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                
                TB.Position = UDim2.new(
                    0,
                    Mouse.X - OrgPos.X + OrgAnc_X,
                    0,
                    Mouse.Y - OrgPos.Y + OrgAnc_Y
                )
                
                RenderStepped:Wait()
            end
            if TB.AbsolutePosition.Y <= -58  then
                TB.Position = UDim2.new(TB.Position.X.Scale, TB.Position.X.Offset , TB.Position.Y.Scale, TB.Position.Y.Offset + 30)
            end
        end
    end)

end

